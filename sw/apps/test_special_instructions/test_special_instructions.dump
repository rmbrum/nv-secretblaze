
test_special_instructions.elf:     file format elf32-microblaze


Disassembly of section .vectors.reset:

10000000 <_start>:
10000000:	b0001000 	imm	4096
10000004:	b8080050 	brai	80	// 10000050 <_start1>

Disassembly of section .vectors.sw_exception:

10000008 <_vector_sw_exception>:
10000008:	b0001000 	imm	4096
1000000c:	b808092c 	brai	2348	// 1000092c <_exception_handler>

Disassembly of section .vectors.interrupt:

10000010 <_vector_interrupt>:
10000010:	b0001000 	imm	4096
10000014:	b808093c 	brai	2364	// 1000093c <_interrupt_handler>

Disassembly of section .vectors.hw_exception:

10000020 <_vector_hw_exception>:
10000020:	b0001000 	imm	4096
10000024:	b8080934 	brai	2356	// 10000934 <_hw_exception_handler>

Disassembly of section .text:

10000050 <_start1>:
10000050:	b0001000 	imm	4096
10000054:	31a01684 	addik	r13, r0, 5764	// 10001684 <_SDA_BASE_>
10000058:	b0001000 	imm	4096
1000005c:	30401555 	addik	r2, r0, 5461	// 10001555 <_SDA2_BASE_>
10000060:	b0001000 	imm	4096
10000064:	302018a8 	addik	r1, r0, 6312
10000068:	b9f4012c 	brlid	r15, 300	// 10000194 <_crtinit>
1000006c:	80000000 	or	r0, r0, r0
10000070:	b9f408e4 	brlid	r15, 2276	// 10000954 <exit>
10000074:	30a30000 	addik	r5, r3, 0

10000078 <_exit>:
10000078:	b8000000 	bri	0	// 10000078 <_exit>

1000007c <__do_global_dtors_aux>:
1000007c:	b0001000 	imm	4096
10000080:	e0601694 	lbui	r3, r0, 5780	// 10001694 <__tbss_end>
10000084:	3021ffdc 	addik	r1, r1, -36
10000088:	f9e10000 	swi	r15, r1, 0
1000008c:	fa61001c 	swi	r19, r1, 28
10000090:	be23008c 	bneid	r3, 140		// 1000011c
10000094:	fac10020 	swi	r22, r1, 32
10000098:	b0001000 	imm	4096
1000009c:	32c0166c 	addik	r22, r0, 5740	// 1000166c <__CTOR_END__>
100000a0:	b0001000 	imm	4096
100000a4:	32601670 	addik	r19, r0, 5744	// 10001670 <__DTOR_END__>
100000a8:	b0001000 	imm	4096
100000ac:	e8601698 	lwi	r3, r0, 5784	// 10001698 <dtor_idx.2340>
100000b0:	16769800 	rsubk	r19, r22, r19
100000b4:	66730202 	bsrai	r19, r19, 2
100000b8:	3273ffff 	addik	r19, r19, -1
100000bc:	14931803 	cmpu	r4, r19, r3
100000c0:	bea40034 	bgeid	r4, 52		// 100000f4
100000c4:	30630001 	addik	r3, r3, 1
100000c8:	64830402 	bslli	r4, r3, 2
100000cc:	c884b000 	lw	r4, r4, r22
100000d0:	b0001000 	imm	4096
100000d4:	f8601698 	swi	r3, r0, 5784	// 10001698 <dtor_idx.2340>
100000d8:	99fc2000 	brald	r15, r4
100000dc:	80000000 	or	r0, r0, r0
100000e0:	b0001000 	imm	4096
100000e4:	e8601698 	lwi	r3, r0, 5784	// 10001698 <dtor_idx.2340>
100000e8:	14931803 	cmpu	r4, r19, r3
100000ec:	be44ffdc 	bltid	r4, -36		// 100000c8
100000f0:	30630001 	addik	r3, r3, 1
100000f4:	b0000000 	imm	0
100000f8:	30600000 	addik	r3, r0, 0
100000fc:	bc030014 	beqi	r3, 20		// 10000110
10000100:	b0001000 	imm	4096
10000104:	30a01674 	addik	r5, r0, 5748	// 10001674 <__EH_FRAME_BEGIN__>
10000108:	99fc1800 	brald	r15, r3
1000010c:	80000000 	or	r0, r0, r0
10000110:	30600001 	addik	r3, r0, 1
10000114:	b0001000 	imm	4096
10000118:	f0601694 	sbi	r3, r0, 5780	// 10001694 <__tbss_end>
1000011c:	e9e10000 	lwi	r15, r1, 0
10000120:	ea61001c 	lwi	r19, r1, 28
10000124:	eac10020 	lwi	r22, r1, 32
10000128:	b60f0008 	rtsd	r15, 8
1000012c:	30210024 	addik	r1, r1, 36

10000130 <frame_dummy>:
10000130:	b0000000 	imm	0
10000134:	30600000 	addik	r3, r0, 0
10000138:	3021ffe4 	addik	r1, r1, -28
1000013c:	be030020 	beqid	r3, 32		// 1000015c
10000140:	f9e10000 	swi	r15, r1, 0
10000144:	b0001000 	imm	4096
10000148:	30a01674 	addik	r5, r0, 5748	// 10001674 <__EH_FRAME_BEGIN__>
1000014c:	b0001000 	imm	4096
10000150:	30c0169c 	addik	r6, r0, 5788	// 1000169c <object.2350>
10000154:	99fc1800 	brald	r15, r3
10000158:	80000000 	or	r0, r0, r0
1000015c:	b0001000 	imm	4096
10000160:	e8601678 	lwi	r3, r0, 5752	// 10001678 <__JCR_END__>
10000164:	be030028 	beqid	r3, 40		// 1000018c
10000168:	e9e10000 	lwi	r15, r1, 0
1000016c:	b0000000 	imm	0
10000170:	30600000 	addik	r3, r0, 0
10000174:	bc030018 	beqi	r3, 24		// 1000018c
10000178:	b0001000 	imm	4096
1000017c:	30a01678 	addik	r5, r0, 5752	// 10001678 <__JCR_END__>
10000180:	99fc1800 	brald	r15, r3
10000184:	80000000 	or	r0, r0, r0
10000188:	e9e10000 	lwi	r15, r1, 0
1000018c:	b60f0008 	rtsd	r15, 8
10000190:	3021001c 	addik	r1, r1, 28

10000194 <_crtinit>:
10000194:	2021ffec 	addi	r1, r1, -20
10000198:	f9e10000 	swi	r15, r1, 0
1000019c:	b0001000 	imm	4096
100001a0:	20c01688 	addi	r6, r0, 5768	// 10001688 <__sbss_end>
100001a4:	b0001000 	imm	4096
100001a8:	20e01688 	addi	r7, r0, 5768	// 10001688 <__sbss_end>
100001ac:	06463800 	rsub	r18, r6, r7
100001b0:	bc720014 	blei	r18, 20		// 100001c4
100001b4:	f8060000 	swi	r0, r6, 0
100001b8:	20c60004 	addi	r6, r6, 4
100001bc:	06463800 	rsub	r18, r6, r7
100001c0:	bc92fff4 	bgti	r18, -12		// 100001b4
100001c4:	b0001000 	imm	4096
100001c8:	20c01694 	addi	r6, r0, 5780	// 10001694 <__tbss_end>
100001cc:	b0001000 	imm	4096
100001d0:	20e016b4 	addi	r7, r0, 5812	// 100016b4 <__bss_end>
100001d4:	06463800 	rsub	r18, r6, r7
100001d8:	bc720014 	blei	r18, 20		// 100001ec
100001dc:	f8060000 	swi	r0, r6, 0
100001e0:	20c60004 	addi	r6, r6, 4
100001e4:	06463800 	rsub	r18, r6, r7
100001e8:	bc92fff4 	bgti	r18, -12		// 100001dc
100001ec:	b9f40760 	brlid	r15, 1888	// 1000094c <_program_init>
100001f0:	80000000 	or	r0, r0, r0
100001f4:	b9f4122c 	brlid	r15, 4652	// 10001420 <__init>
100001f8:	80000000 	or	r0, r0, r0
100001fc:	20c00000 	addi	r6, r0, 0
10000200:	20e00000 	addi	r7, r0, 0
10000204:	b9f409a8 	brlid	r15, 2472	// 10000bac <main>
10000208:	20a00000 	addi	r5, r0, 0
1000020c:	32630000 	addik	r19, r3, 0
10000210:	b9f4124c 	brlid	r15, 4684	// 1000145c <__fini>
10000214:	80000000 	or	r0, r0, r0
10000218:	b9f4072c 	brlid	r15, 1836	// 10000944 <_program_clean>
1000021c:	80000000 	or	r0, r0, r0
10000220:	c9e10000 	lw	r15, r1, r0
10000224:	30730000 	addik	r3, r19, 0
10000228:	b60f0008 	rtsd	r15, 8
1000022c:	20210014 	addi	r1, r1, 20

10000230 <uart_put>:
 * \brief Write data to TX buffer
 * \param[in] data The data to write
 */
static __inline__ void uart_write(const sb_uint8_t data)
{
  WRITE_REG32(UART_DATA_TX_REG,data);
10000230:	b0002000 	imm	8192
10000234:	f8a0000c 	swi	r5, r0, 12
 * \fn void uart_send(void)
 * \brief Start a TX transfert
 */
static __inline__ void uart_send(void)
{
  WRITE_REG32(UART_CONTROL_REG,SEND_TX_BIT);
10000238:	30600001 	addik	r3, r0, 1
1000023c:	b0002000 	imm	8192
10000240:	f8600008 	swi	r3, r0, 8
 * \fn void uart_wait_tx_done(void)
 * \brief Poll the TX busy flag, return when TX transfert is finished.
 */
void uart_wait_tx_done(void)
{
  sb_uint32_t flag = (READ_REG32(UART_STATUS_REG) & TX_BUSY_FLAG_BIT);
10000244:	b0002000 	imm	8192
10000248:	e8600000 	lwi	r3, r0, 0
1000024c:	a4630002 	andi	r3, r3, 2
  while(flag == TX_BUSY_FLAG_BIT)
10000250:	bc23fff4 	bnei	r3, -12		// 10000244
10000254:	b60f0008 	rtsd	r15, 8
10000258:	80000000 	or	r0, r0, r0

1000025c <uart_get>:
 * \fn void uart_wait_rx_ready(void)
 * \brief Poll the RX ready flag, return when new RX data.
 */
void uart_wait_rx_ready(void)
{
  sb_uint32_t flag = (READ_REG32(UART_STATUS_REG) & RX_READY_FLAG_BIT);
1000025c:	b0002000 	imm	8192
10000260:	e8600000 	lwi	r3, r0, 0
10000264:	a4630001 	andi	r3, r3, 1
  while(flag != RX_READY_FLAG_BIT)
10000268:	a8630001 	xori	r3, r3, 1
1000026c:	bc23fff0 	bnei	r3, -16	// 1000025c <uart_get>
 * \brief Read data from RX buffer
 * \param[in,out] data The pointer to the data
 */
static __inline__ void uart_read(sb_uint8_t *const data)
{
  *data = (sb_uint8_t)READ_REG32(UART_DATA_RX_REG);
10000270:	b0002000 	imm	8192
10000274:	e8600004 	lwi	r3, r0, 4
 */
void uart_get(sb_uint8_t *const in)
{
  uart_wait_rx_ready();
  uart_read(in);
}
10000278:	b60f0008 	rtsd	r15, 8
1000027c:	f0650000 	sbi	r3, r5, 0

10000280 <uart_wait_rx_ready>:
 * \fn void uart_wait_rx_ready(void)
 * \brief Poll the RX ready flag, return when new RX data.
 */
void uart_wait_rx_ready(void)
{
  sb_uint32_t flag = (READ_REG32(UART_STATUS_REG) & RX_READY_FLAG_BIT);
10000280:	b0002000 	imm	8192
10000284:	e8600000 	lwi	r3, r0, 0
10000288:	a4630001 	andi	r3, r3, 1
  while(flag != RX_READY_FLAG_BIT)
1000028c:	a8630001 	xori	r3, r3, 1
10000290:	bc23fff0 	bnei	r3, -16	// 10000280 <uart_wait_rx_ready>
10000294:	b60f0008 	rtsd	r15, 8
10000298:	80000000 	or	r0, r0, r0

1000029c <uart_wait_tx_done>:
 * \fn void uart_wait_tx_done(void)
 * \brief Poll the TX busy flag, return when TX transfert is finished.
 */
void uart_wait_tx_done(void)
{
  sb_uint32_t flag = (READ_REG32(UART_STATUS_REG) & TX_BUSY_FLAG_BIT);
1000029c:	b0002000 	imm	8192
100002a0:	e8600000 	lwi	r3, r0, 0
100002a4:	a4630002 	andi	r3, r3, 2
  while(flag == TX_BUSY_FLAG_BIT)
100002a8:	bc23fff4 	bnei	r3, -12	// 1000029c <uart_wait_tx_done>
100002ac:	b60f0008 	rtsd	r15, 8
100002b0:	80000000 	or	r0, r0, r0

100002b4 <outbyte>:
  int *varg = (int *)((char **)&format);
  return print(&out,varg);
}

void outbyte(char **str, char c)
{
100002b4:	3021ffe4 	addik	r1, r1, -28
  if(str) 
100002b8:	be050028 	beqid	r5, 40		// 100002e0
100002bc:	f9e10000 	swi	r15, r1, 0
  {
    **str = c;
100002c0:	e8650000 	lwi	r3, r5, 0
100002c4:	f0c30000 	sbi	r6, r3, 0
    ++(*str);
100002c8:	e8650000 	lwi	r3, r5, 0
100002cc:	30630001 	addik	r3, r3, 1
100002d0:	f8650000 	swi	r3, r5, 0
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
  }
}
100002d4:	e9e10000 	lwi	r15, r1, 0
100002d8:	b60f0008 	rtsd	r15, 8
100002dc:	3021001c 	addik	r1, r1, 28
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
100002e0:	b9f4ff50 	brlid	r15, -176	// 10000230 <uart_put>
100002e4:	a4a600ff 	andi	r5, r6, 255
  }
}
100002e8:	e9e10000 	lwi	r15, r1, 0
100002ec:	b60f0008 	rtsd	r15, 8
100002f0:	3021001c 	addik	r1, r1, 28

100002f4 <prints>:

int prints(char **out, const char *string, int width, int pad)
{
100002f4:	3021ffcc 	addik	r1, r1, -52
100002f8:	fa610020 	swi	r19, r1, 32
100002fc:	fae10028 	swi	r23, r1, 40
10000300:	fb01002c 	swi	r24, r1, 44
10000304:	f9e10000 	swi	r15, r1, 0
10000308:	fac10024 	swi	r22, r1, 36
1000030c:	fb210030 	swi	r25, r1, 48
10000310:	13070000 	addk	r24, r7, r0
10000314:	12650000 	addk	r19, r5, r0
  int pc = 0, padchar = ' ';

  if(width > 0)  
10000318:	be670050 	bleid	r7, 80		// 10000368
1000031c:	32e00020 	addik	r23, r0, 32
  {
    int len = 0;
    const char *ptr;
    for (ptr = string; *ptr; ++ptr) ++len;
10000320:	e0860000 	lbui	r4, r6, 0
10000324:	90840060 	sext8	r4, r4
10000328:	be040110 	beqid	r4, 272		// 10000438
1000032c:	10660000 	addk	r3, r6, r0
10000330:	10800000 	addk	r4, r0, r0
10000334:	30630001 	addik	r3, r3, 1
10000338:	e0a30000 	lbui	r5, r3, 0
1000033c:	90a50060 	sext8	r5, r5
10000340:	be25fff4 	bneid	r5, -12		// 10000334
10000344:	30840001 	addik	r4, r4, 1
    if (len >= width) 
10000348:	14782001 	cmp	r3, r24, r4
1000034c:	be43000c 	bltid	r3, 12		// 10000358
10000350:	1704c000 	rsubk	r24, r4, r24
    {
      width = 0;
10000354:	13050000 	addk	r24, r5, r0
    }
    else 
    {
      width -= len;
    }
    if(pad & PAD_ZERO) 
10000358:	a4680002 	andi	r3, r8, 2
1000035c:	be03000c 	beqid	r3, 12		// 10000368
10000360:	32e00020 	addik	r23, r0, 32
10000364:	32e00030 	addik	r23, r0, 48
    {
      padchar = '0';
    }
  }
  
  if(!(pad & PAD_RIGHT)) 
10000368:	a5080001 	andi	r8, r8, 1
1000036c:	be28003c 	bneid	r8, 60		// 100003a8
10000370:	12c00000 	addk	r22, r0, r0
  {
    for(;width > 0;--width) 
10000374:	be780034 	bleid	r24, 52		// 100003a8
10000378:	12c80000 	addk	r22, r8, r0
1000037c:	be130104 	beqid	r19, 260		// 10000480
10000380:	10780000 	addk	r3, r24, r0
10000384:	e8930000 	lwi	r4, r19, 0

void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
10000388:	f2e40000 	sbi	r23, r4, 0
    ++(*str);
1000038c:	e8930000 	lwi	r4, r19, 0
    }
  }
  
  if(!(pad & PAD_RIGHT)) 
  {
    for(;width > 0;--width) 
10000390:	3063ffff 	addik	r3, r3, -1
void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
    ++(*str);
10000394:	30840001 	addik	r4, r4, 1
    }
  }
  
  if(!(pad & PAD_RIGHT)) 
  {
    for(;width > 0;--width) 
10000398:	be23fff0 	bneid	r3, -16		// 10000388
1000039c:	f8930000 	swi	r4, r19, 0
100003a0:	12d80000 	addk	r22, r24, r0
100003a4:	13000000 	addk	r24, r0, r0
      outbyte(out,padchar);
      ++pc;
    }
  }
  
  for(;*string;++string) 
100003a8:	e0a60000 	lbui	r5, r6, 0
100003ac:	90a50060 	sext8	r5, r5
100003b0:	bc050034 	beqi	r5, 52		// 100003e4
100003b4:	be1300ac 	beqid	r19, 172		// 10000460
100003b8:	13260000 	addk	r25, r6, r0
100003bc:	e8930000 	lwi	r4, r19, 0

void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
100003c0:	f0a40000 	sbi	r5, r4, 0
    ++(*str);
100003c4:	e8930000 	lwi	r4, r19, 0
  }
  
  for(;*string;++string) 
  {
    outbyte(out,*string);
    ++pc;
100003c8:	30c60001 	addik	r6, r6, 1
void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
    ++(*str);
100003cc:	30840001 	addik	r4, r4, 1
100003d0:	f8930000 	swi	r4, r19, 0
      outbyte(out,padchar);
      ++pc;
    }
  }
  
  for(;*string;++string) 
100003d4:	e0a60000 	lbui	r5, r6, 0
100003d8:	90a50060 	sext8	r5, r5
100003dc:	be25ffe4 	bneid	r5, -28		// 100003c0
100003e0:	32d60001 	addik	r22, r22, 1
  {
    outbyte(out,*string);
    ++pc;
   }
   
  for(;width > 0;--width) 
100003e4:	be780034 	bleid	r24, 52		// 10000418
100003e8:	10760000 	addk	r3, r22, r0
100003ec:	be130054 	beqid	r19, 84		// 10000440
100003f0:	10780000 	addk	r3, r24, r0
100003f4:	e8930000 	lwi	r4, r19, 0

void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
100003f8:	f2e40000 	sbi	r23, r4, 0
    ++(*str);
100003fc:	e8930000 	lwi	r4, r19, 0
  {
    outbyte(out,*string);
    ++pc;
   }
   
  for(;width > 0;--width) 
10000400:	3063ffff 	addik	r3, r3, -1
void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
    ++(*str);
10000404:	30840001 	addik	r4, r4, 1
  {
    outbyte(out,*string);
    ++pc;
   }
   
  for(;width > 0;--width) 
10000408:	be23fff0 	bneid	r3, -16		// 100003f8
1000040c:	f8930000 	swi	r4, r19, 0
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
  }
}

int prints(char **out, const char *string, int width, int pad)
10000410:	12d6c000 	addk	r22, r22, r24
    outbyte(out,padchar);
    ++pc;
  }

  return pc;
}
10000414:	10760000 	addk	r3, r22, r0
10000418:	e9e10000 	lwi	r15, r1, 0
1000041c:	ea610020 	lwi	r19, r1, 32
10000420:	eac10024 	lwi	r22, r1, 36
10000424:	eae10028 	lwi	r23, r1, 40
10000428:	eb01002c 	lwi	r24, r1, 44
1000042c:	eb210030 	lwi	r25, r1, 48
10000430:	b60f0008 	rtsd	r15, 8
10000434:	30210034 	addik	r1, r1, 52
    {
      width = 0;
    }
    else 
    {
      width -= len;
10000438:	b810ff20 	brid	-224		// 10000358
1000043c:	1704c000 	rsubk	r24, r4, r24
  {
    outbyte(out,*string);
    ++pc;
   }
   
  for(;width > 0;--width) 
10000440:	12780000 	addk	r19, r24, r0
10000444:	a73700ff 	andi	r25, r23, 255
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
10000448:	10b90000 	addk	r5, r25, r0
1000044c:	b9f4fde4 	brlid	r15, -540	// 10000230 <uart_put>
10000450:	3273ffff 	addik	r19, r19, -1
  {
    outbyte(out,*string);
    ++pc;
   }
   
  for(;width > 0;--width) 
10000454:	bc33fff4 	bnei	r19, -12		// 10000448
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
  }
}

int prints(char **out, const char *string, int width, int pad)
10000458:	b810ffbc 	brid	-68		// 10000414
1000045c:	12d6c000 	addk	r22, r22, r24
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
10000460:	a4a500ff 	andi	r5, r5, 255
10000464:	b9f4fdcc 	brlid	r15, -564	// 10000230 <uart_put>
10000468:	33390001 	addik	r25, r25, 1
      outbyte(out,padchar);
      ++pc;
    }
  }
  
  for(;*string;++string) 
1000046c:	e0b90000 	lbui	r5, r25, 0
10000470:	90a50060 	sext8	r5, r5
10000474:	be25ffec 	bneid	r5, -20		// 10000460
10000478:	32d60001 	addik	r22, r22, 1
1000047c:	b800ff68 	bri	-152		// 100003e4
    }
  }
  
  if(!(pad & PAD_RIGHT)) 
  {
    for(;width > 0;--width) 
10000480:	12d80000 	addk	r22, r24, r0
10000484:	a73700ff 	andi	r25, r23, 255
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
10000488:	10b90000 	addk	r5, r25, r0
1000048c:	f8c1001c 	swi	r6, r1, 28
10000490:	b9f4fda0 	brlid	r15, -608	// 10000230 <uart_put>
10000494:	32d6ffff 	addik	r22, r22, -1
    }
  }
  
  if(!(pad & PAD_RIGHT)) 
  {
    for(;width > 0;--width) 
10000498:	be36fff0 	bneid	r22, -16		// 10000488
1000049c:	e8c1001c 	lwi	r6, r1, 28
100004a0:	b810ff04 	brid	-252		// 100003a4
100004a4:	12d80000 	addk	r22, r24, r0

100004a8 <printi>:

  return pc;
}

int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
100004a8:	3021ffbc 	addik	r1, r1, -68
100004ac:	fae10040 	swi	r23, r1, 64
100004b0:	f9e10000 	swi	r15, r1, 0
100004b4:	fa610038 	swi	r19, r1, 56
100004b8:	fac1003c 	swi	r22, r1, 60
100004bc:	10660000 	addk	r3, r6, r0
100004c0:	12e50000 	addk	r23, r5, r0
  char print_buf[PRINT_BUF_LEN];
  char *s;
  int t, neg = 0, pc = 0;
  unsigned int u = i;

  if(i == 0) 
100004c4:	be060108 	beqid	r6, 264		// 100005cc
100004c8:	10860000 	addk	r4, r6, r0
    print_buf[0] = '0';
    print_buf[1] = '\0';
    return prints(out,print_buf,width,pad);
  }

  if(sg && b == 10 && i < 0) 
100004cc:	be2800d4 	bneid	r8, 212		// 100005a0
100004d0:	10a00000 	addk	r5, r0, r0
    neg = 1;
    u = -i;
  }

  s = print_buf + PRINT_BUF_LEN-1;
  *s = '\0';
100004d4:	f001002b 	sbi	r0, r1, 43

  while(u) 
100004d8:	be040058 	beqid	r4, 88		// 10000530
100004dc:	30c1002b 	addik	r6, r1, 43
100004e0:	eac10060 	lwi	r22, r1, 96
    t = u % b;
    if(t >= 10)
    {
      t += letbase - '0' - 10;
    }
    *--s = t + '0';
100004e4:	32600009 	addik	r19, r0, 9
100004e8:	b8100014 	brid	20		// 100004fc
100004ec:	32d6ffc6 	addik	r22, r22, -58
100004f0:	318c0030 	addik	r12, r12, 48
  }

  s = print_buf + PRINT_BUF_LEN-1;
  *s = '\0';

  while(u) 
100004f4:	be04003c 	beqid	r4, 60		// 10000530
100004f8:	f1860000 	sbi	r12, r6, 0
  {
    t = u % b;
100004fc:	49872002 	idivu	r12, r7, r4
    if(t >= 10)
    {
      t += letbase - '0' - 10;
    }
    *--s = t + '0';
10000500:	30c6ffff 	addik	r6, r6, -1
  s = print_buf + PRINT_BUF_LEN-1;
  *s = '\0';

  while(u) 
  {
    t = u % b;
10000504:	416c3800 	mul	r11, r12, r7
10000508:	156b2000 	rsubk	r11, r11, r4
    if(t >= 10)
    {
      t += letbase - '0' - 10;
    }
    *--s = t + '0';
1000050c:	146b9801 	cmp	r3, r11, r19
    u /= b;
10000510:	108c0000 	addk	r4, r12, r0
    t = u % b;
    if(t >= 10)
    {
      t += letbase - '0' - 10;
    }
    *--s = t + '0';
10000514:	118b0000 	addk	r12, r11, r0
10000518:	bea3ffd8 	bgeid	r3, -40		// 100004f0
1000051c:	11765800 	addk	r11, r22, r11
10000520:	118b0000 	addk	r12, r11, r0
10000524:	318c0030 	addik	r12, r12, 48
  }

  s = print_buf + PRINT_BUF_LEN-1;
  *s = '\0';

  while(u) 
10000528:	be24ffd4 	bneid	r4, -44		// 100004fc
1000052c:	f1860000 	sbi	r12, r6, 0
    }
    *--s = t + '0';
    u /= b;
  }

  if(neg) 
10000530:	be250034 	bneid	r5, 52		// 10000564
10000534:	12650000 	addk	r19, r5, r0
    {
      *--s = '-';
    }
  }

	return pc + prints(out,s,width,pad);
10000538:	10b70000 	addk	r5, r23, r0
1000053c:	10e90000 	addk	r7, r9, r0
10000540:	b9f4fdb4 	brlid	r15, -588	// 100002f4 <prints>
10000544:	110a0000 	addk	r8, r10, r0
10000548:	10639800 	addk	r3, r3, r19
}
1000054c:	e9e10000 	lwi	r15, r1, 0
10000550:	ea610038 	lwi	r19, r1, 56
10000554:	eac1003c 	lwi	r22, r1, 60
10000558:	eae10040 	lwi	r23, r1, 64
1000055c:	b60f0008 	rtsd	r15, 8
10000560:	30210044 	addik	r1, r1, 68
    u /= b;
  }

  if(neg) 
  {
    if(width && (pad & PAD_ZERO)) 
10000564:	be090058 	beqid	r9, 88		// 100005bc
10000568:	3060002d 	addik	r3, r0, 45
1000056c:	a46a0002 	andi	r3, r10, 2
10000570:	be03004c 	beqid	r3, 76		// 100005bc
10000574:	3060002d 	addik	r3, r0, 45
  return print(&out,varg);
}

void outbyte(char **str, char c)
{
  if(str) 
10000578:	be170088 	beqid	r23, 136		// 10000600
1000057c:	3080002d 	addik	r4, r0, 45
  {
    **str = c;
10000580:	e8770000 	lwi	r3, r23, 0
10000584:	f0830000 	sbi	r4, r3, 0
    ++(*str);
10000588:	e8770000 	lwi	r3, r23, 0
1000058c:	30630001 	addik	r3, r3, 1
10000590:	f8770000 	swi	r3, r23, 0
  {
    if(width && (pad & PAD_ZERO)) 
    {
      outbyte(out, '-');
      ++pc;
     --width;
10000594:	3129ffff 	addik	r9, r9, -1
10000598:	b810ffa0 	brid	-96		// 10000538
1000059c:	32600001 	addik	r19, r0, 1
    print_buf[0] = '0';
    print_buf[1] = '\0';
    return prints(out,print_buf,width,pad);
  }

  if(sg && b == 10 && i < 0) 
100005a0:	3060000a 	addik	r3, r0, 10
100005a4:	88671c00 	pcmpeq	r3, r7, r3
100005a8:	bc03ff2c 	beqi	r3, -212		// 100004d4
100005ac:	bca6ff28 	bgei	r6, -216		// 100004d4
  {
    neg = 1;
    u = -i;
100005b0:	14860000 	rsubk	r4, r6, r0
    return prints(out,print_buf,width,pad);
  }

  if(sg && b == 10 && i < 0) 
  {
    neg = 1;
100005b4:	b810ff20 	brid	-224		// 100004d4
100005b8:	30a00001 	addik	r5, r0, 1
      ++pc;
     --width;
    }
    else 
    {
      *--s = '-';
100005bc:	f066ffff 	sbi	r3, r6, -1

int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
  char print_buf[PRINT_BUF_LEN];
  char *s;
  int t, neg = 0, pc = 0;
100005c0:	12600000 	addk	r19, r0, r0
      ++pc;
     --width;
    }
    else 
    {
      *--s = '-';
100005c4:	b810ff74 	brid	-140		// 10000538
100005c8:	30c6ffff 	addik	r6, r6, -1

  if(i == 0) 
  {
    print_buf[0] = '0';
    print_buf[1] = '\0';
    return prints(out,print_buf,width,pad);
100005cc:	10e90000 	addk	r7, r9, r0
100005d0:	110a0000 	addk	r8, r10, r0
  int t, neg = 0, pc = 0;
  unsigned int u = i;

  if(i == 0) 
  {
    print_buf[0] = '0';
100005d4:	30800030 	addik	r4, r0, 48
    print_buf[1] = '\0';
    return prints(out,print_buf,width,pad);
100005d8:	30c1001c 	addik	r6, r1, 28
  int t, neg = 0, pc = 0;
  unsigned int u = i;

  if(i == 0) 
  {
    print_buf[0] = '0';
100005dc:	f081001c 	sbi	r4, r1, 28
    print_buf[1] = '\0';
    return prints(out,print_buf,width,pad);
100005e0:	b9f4fd14 	brlid	r15, -748	// 100002f4 <prints>
100005e4:	f061001d 	sbi	r3, r1, 29
      *--s = '-';
    }
  }

	return pc + prints(out,s,width,pad);
}
100005e8:	e9e10000 	lwi	r15, r1, 0
100005ec:	ea610038 	lwi	r19, r1, 56
100005f0:	eac1003c 	lwi	r22, r1, 60
100005f4:	eae10040 	lwi	r23, r1, 64
100005f8:	b60f0008 	rtsd	r15, 8
100005fc:	30210044 	addik	r1, r1, 68
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
10000600:	30a0002d 	addik	r5, r0, 45
10000604:	f8c1002c 	swi	r6, r1, 44
10000608:	f9210030 	swi	r9, r1, 48
1000060c:	b9f4fc24 	brlid	r15, -988	// 10000230 <uart_put>
10000610:	f9410034 	swi	r10, r1, 52
10000614:	e9410034 	lwi	r10, r1, 52
10000618:	e9210030 	lwi	r9, r1, 48
1000061c:	b810ff78 	brid	-136		// 10000594
10000620:	e8c1002c 	lwi	r6, r1, 44

10000624 <print>:

	return pc + prints(out,s,width,pad);
}

int print(char **out, int *varg)
{
10000624:	3021ffbc 	addik	r1, r1, -68
10000628:	fac10028 	swi	r22, r1, 40
1000062c:	fb010030 	swi	r24, r1, 48
10000630:	f9e10000 	swi	r15, r1, 0
10000634:	fa610024 	swi	r19, r1, 36
10000638:	fae1002c 	swi	r23, r1, 44
1000063c:	fb210034 	swi	r25, r1, 52
10000640:	fb410038 	swi	r26, r1, 56
10000644:	fb61003c 	swi	r27, r1, 60
10000648:	fb810040 	swi	r28, r1, 64
  int width, pad;
  int pc = 0;
  char *format = (char *)(*varg++);
1000064c:	eae60000 	lwi	r23, r6, 0

	return pc + prints(out,s,width,pad);
}

int print(char **out, int *varg)
{
10000650:	12c50000 	addk	r22, r5, r0
  int width, pad;
  int pc = 0;
  char *format = (char *)(*varg++);
  char scr[2];

  for(;*format != 0;++format) 
10000654:	e0b70000 	lbui	r5, r23, 0
10000658:	90a50060 	sext8	r5, r5
1000065c:	be050100 	beqid	r5, 256		// 1000075c
10000660:	13050000 	addk	r24, r5, r0

int print(char **out, int *varg)
{
  int width, pad;
  int pc = 0;
  char *format = (char *)(*varg++);
10000664:	33460004 	addik	r26, r6, 4
}

int print(char **out, int *varg)
{
  int width, pad;
  int pc = 0;
10000668:	13000000 	addk	r24, r0, r0
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
1000066c:	33200009 	addik	r25, r0, 9
        pc += printi (out,*varg++,16,0,width,pad,'A');
        continue;
      }
      if( *format == 'u' ) 
      {
        pc += printi(out,*varg++,10,0,width,pad,'a');
10000670:	33600061 	addik	r27, r0, 97
        pc += printi(out,*varg++,16,0,width,pad,'a');
        continue;
      } 
      if(*format == 'X') 
      {
        pc += printi (out,*varg++,16,0,width,pad,'A');
10000674:	33800041 	addik	r28, r0, 65
  char *format = (char *)(*varg++);
  char scr[2];

  for(;*format != 0;++format) 
  {
    if(*format == '%') 
10000678:	a9450025 	xori	r10, r5, 37
1000067c:	bc2a0124 	bnei	r10, 292		// 100007a0
    {
      ++format;
      width = pad = 0;
      if(*format == '\0') 
10000680:	e0970001 	lbui	r4, r23, 1
10000684:	90840060 	sext8	r4, r4
10000688:	be0400d4 	beqid	r4, 212		// 1000075c
1000068c:	a8640025 	xori	r3, r4, 37
      {
        break;
      }
      if(*format == '%') 
10000690:	be03010c 	beqid	r3, 268		// 1000079c
10000694:	32770001 	addik	r19, r23, 1
      {
        goto out;
      }
      if(*format == '-') 
10000698:	a864002d 	xori	r3, r4, 45
1000069c:	bc030148 	beqi	r3, 328		// 100007e4
      {
        ++format;
        pad = PAD_RIGHT;
      }
      while (*format == '0') 
100006a0:	a8640030 	xori	r3, r4, 48
100006a4:	be230024 	bneid	r3, 36		// 100006c8
100006a8:	10d30000 	addk	r6, r19, r0
  }

	return pc + prints(out,s,width,pad);
}

int print(char **out, int *varg)
100006ac:	30c60001 	addik	r6, r6, 1
      if(*format == '-') 
      {
        ++format;
        pad = PAD_RIGHT;
      }
      while (*format == '0') 
100006b0:	e0860000 	lbui	r4, r6, 0
      {
        ++format;
        pad |= PAD_ZERO;
100006b4:	a14a0002 	ori	r10, r10, 2
      if(*format == '-') 
      {
        ++format;
        pad = PAD_RIGHT;
      }
      while (*format == '0') 
100006b8:	90840060 	sext8	r4, r4
100006bc:	a8a40030 	xori	r5, r4, 48
100006c0:	be05ffec 	beqid	r5, -20		// 100006ac
100006c4:	12660000 	addk	r19, r6, r0
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
100006c8:	3104ffd0 	addik	r8, r4, -48
100006cc:	a46800ff 	andi	r3, r8, 255
100006d0:	1463c803 	cmpu	r3, r3, r25
100006d4:	10e00000 	addk	r7, r0, r0
100006d8:	bea30014 	bgeid	r3, 20		// 100006ec
100006dc:	10d30000 	addk	r6, r19, r0
      {
        width *= 10;
        width += *format - '0';
      }
      if(*format == 's') 
100006e0:	b8100038 	brid	56		// 10000718
100006e4:	a8640073 	xori	r3, r4, 115
100006e8:	3104ffd0 	addik	r8, r4, -48
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
100006ec:	e0860001 	lbui	r4, r6, 1
      {
        width *= 10;
100006f0:	60e7000a 	muli	r7, r7, 10
  }

	return pc + prints(out,s,width,pad);
}

int print(char **out, int *varg)
100006f4:	32660001 	addik	r19, r6, 1
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
100006f8:	30a4ffd0 	addik	r5, r4, -48
100006fc:	a4a500ff 	andi	r5, r5, 255
10000700:	14a5c803 	cmpu	r5, r5, r25
10000704:	10d30000 	addk	r6, r19, r0
      {
        width *= 10;
        width += *format - '0';
10000708:	10e83800 	addk	r7, r8, r7
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
1000070c:	bea5ffdc 	bgeid	r5, -36		// 100006e8
10000710:	90840060 	sext8	r4, r4
      {
        width *= 10;
        width += *format - '0';
      }
      if(*format == 's') 
10000714:	a8640073 	xori	r3, r4, 115
10000718:	be0300ac 	beqid	r3, 172		// 100007c4
1000071c:	a8640064 	xori	r3, r4, 100
      {
        char *s = *((char **)varg++);
        pc += prints(out, s?s:"(null)",width,pad);
        continue;
      }  
      if(*format == 'd') 
10000720:	be0300e8 	beqid	r3, 232		// 10000808
10000724:	11270000 	addk	r9, r7, r0
      {
        pc += printi(out,*varg++,10,1,width,pad,'a');
        continue;
      }
      if(*format == 'x') 
10000728:	a9040078 	xori	r8, r4, 120
1000072c:	be080100 	beqid	r8, 256		// 1000082c
10000730:	10b60000 	addk	r5, r22, r0
      {
        pc += printi(out,*varg++,16,0,width,pad,'a');
        continue;
      } 
      if(*format == 'X') 
10000734:	a9040058 	xori	r8, r4, 88
10000738:	bc080110 	beqi	r8, 272		// 10000848
      {
        pc += printi (out,*varg++,16,0,width,pad,'A');
        continue;
      }
      if( *format == 'u' ) 
1000073c:	a9040075 	xori	r8, r4, 117
10000740:	bc080124 	beqi	r8, 292		// 10000864
      {
        pc += printi(out,*varg++,10,0,width,pad,'a');
        continue;
      }
      if(*format == 'c') 
10000744:	a8840063 	xori	r4, r4, 99
10000748:	bc040138 	beqi	r4, 312		// 10000880
  int width, pad;
  int pc = 0;
  char *format = (char *)(*varg++);
  char scr[2];

  for(;*format != 0;++format) 
1000074c:	e0b30001 	lbui	r5, r19, 1
10000750:	90a50060 	sext8	r5, r5
10000754:	be25ff24 	bneid	r5, -220		// 10000678
10000758:	32f30001 	addik	r23, r19, 1
       outbyte(out,*format);
       ++pc;
     }
   }
   
   if(out) 
1000075c:	be160014 	beqid	r22, 20		// 10000770
10000760:	10780000 	addk	r3, r24, r0
   {
     **out = '\0';
10000764:	e8760000 	lwi	r3, r22, 0
10000768:	f0030000 	sbi	r0, r3, 0
   }
   
   return pc;
}
1000076c:	10780000 	addk	r3, r24, r0
10000770:	e9e10000 	lwi	r15, r1, 0
10000774:	ea610024 	lwi	r19, r1, 36
10000778:	eac10028 	lwi	r22, r1, 40
1000077c:	eae1002c 	lwi	r23, r1, 44
10000780:	eb010030 	lwi	r24, r1, 48
10000784:	eb210034 	lwi	r25, r1, 52
10000788:	eb410038 	lwi	r26, r1, 56
1000078c:	eb61003c 	lwi	r27, r1, 60
10000790:	eb810040 	lwi	r28, r1, 64
10000794:	b60f0008 	rtsd	r15, 8
10000798:	30210044 	addik	r1, r1, 68

  for(;*format != 0;++format) 
  {
    if(*format == '%') 
    {
      ++format;
1000079c:	12f30000 	addk	r23, r19, r0
  return print(&out,varg);
}

void outbyte(char **str, char c)
{
  if(str) 
100007a0:	bc160058 	beqi	r22, 88		// 100007f8
  {
    **str = c;
100007a4:	e8760000 	lwi	r3, r22, 0
100007a8:	f0a30000 	sbi	r5, r3, 0
    ++(*str);
100007ac:	e8760000 	lwi	r3, r22, 0
100007b0:	30630001 	addik	r3, r3, 1
100007b4:	f8760000 	swi	r3, r22, 0
     }
     else 
     {
       out:
       outbyte(out,*format);
       ++pc;
100007b8:	12770000 	addk	r19, r23, r0
100007bc:	b810ff90 	brid	-112		// 1000074c
100007c0:	33180001 	addik	r24, r24, 1
        width *= 10;
        width += *format - '0';
      }
      if(*format == 's') 
      {
        char *s = *((char **)varg++);
100007c4:	e8da0000 	lwi	r6, r26, 0
        pc += prints(out, s?s:"(null)",width,pad);
100007c8:	be0600dc 	beqid	r6, 220		// 100008a4
100007cc:	335a0004 	addik	r26, r26, 4
100007d0:	10b60000 	addk	r5, r22, r0
100007d4:	b9f4fb20 	brlid	r15, -1248	// 100002f4 <prints>
100007d8:	110a0000 	addk	r8, r10, r0
        continue;
100007dc:	b810ff70 	brid	-144		// 1000074c
100007e0:	13181800 	addk	r24, r24, r3
      {
        goto out;
      }
      if(*format == '-') 
      {
        ++format;
100007e4:	e0970002 	lbui	r4, r23, 2
100007e8:	32770002 	addik	r19, r23, 2
        pad = PAD_RIGHT;
100007ec:	31400001 	addik	r10, r0, 1
      {
        goto out;
      }
      if(*format == '-') 
      {
        ++format;
100007f0:	b810feb0 	brid	-336		// 100006a0
100007f4:	90840060 	sext8	r4, r4
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
100007f8:	b9f4fa38 	brlid	r15, -1480	// 10000230 <uart_put>
100007fc:	a4a500ff 	andi	r5, r5, 255
     }
     else 
     {
       out:
       outbyte(out,*format);
       ++pc;
10000800:	b810ffbc 	brid	-68		// 100007bc
10000804:	12770000 	addk	r19, r23, r0
        pc += prints(out, s?s:"(null)",width,pad);
        continue;
      }  
      if(*format == 'd') 
      {
        pc += printi(out,*varg++,10,1,width,pad,'a');
10000808:	e8da0000 	lwi	r6, r26, 0
1000080c:	10b60000 	addk	r5, r22, r0
10000810:	30e0000a 	addik	r7, r0, 10
10000814:	31000001 	addik	r8, r0, 1
10000818:	b9f4fc90 	brlid	r15, -880	// 100004a8 <printi>
1000081c:	fb61001c 	swi	r27, r1, 28
10000820:	335a0004 	addik	r26, r26, 4
        continue;
10000824:	b810ff28 	brid	-216		// 1000074c
10000828:	13181800 	addk	r24, r24, r3
      }
      if(*format == 'x') 
      {
        pc += printi(out,*varg++,16,0,width,pad,'a');
1000082c:	e8da0000 	lwi	r6, r26, 0
10000830:	30e00010 	addik	r7, r0, 16
10000834:	b9f4fc74 	brlid	r15, -908	// 100004a8 <printi>
10000838:	fb61001c 	swi	r27, r1, 28
1000083c:	335a0004 	addik	r26, r26, 4
        continue;
10000840:	b810ff0c 	brid	-244		// 1000074c
10000844:	13181800 	addk	r24, r24, r3
      } 
      if(*format == 'X') 
      {
        pc += printi (out,*varg++,16,0,width,pad,'A');
10000848:	e8da0000 	lwi	r6, r26, 0
1000084c:	30e00010 	addik	r7, r0, 16
10000850:	b9f4fc58 	brlid	r15, -936	// 100004a8 <printi>
10000854:	fb81001c 	swi	r28, r1, 28
10000858:	335a0004 	addik	r26, r26, 4
        continue;
1000085c:	b810fef0 	brid	-272		// 1000074c
10000860:	13181800 	addk	r24, r24, r3
      }
      if( *format == 'u' ) 
      {
        pc += printi(out,*varg++,10,0,width,pad,'a');
10000864:	e8da0000 	lwi	r6, r26, 0
10000868:	30e0000a 	addik	r7, r0, 10
1000086c:	b9f4fc3c 	brlid	r15, -964	// 100004a8 <printi>
10000870:	fb61001c 	swi	r27, r1, 28
10000874:	335a0004 	addik	r26, r26, 4
        continue;
10000878:	b810fed4 	brid	-300		// 1000074c
1000087c:	13181800 	addk	r24, r24, r3
      }
      if(*format == 'c') 
      {
        scr[0] = *varg++;
10000880:	e07a0003 	lbui	r3, r26, 3
        scr[1] = '\0';
        pc += prints(out,scr,width,pad);
10000884:	110a0000 	addk	r8, r10, r0
10000888:	30c10020 	addik	r6, r1, 32
        pc += printi(out,*varg++,10,0,width,pad,'a');
        continue;
      }
      if(*format == 'c') 
      {
        scr[0] = *varg++;
1000088c:	f0610020 	sbi	r3, r1, 32
        scr[1] = '\0';
        pc += prints(out,scr,width,pad);
10000890:	b9f4fa64 	brlid	r15, -1436	// 100002f4 <prints>
10000894:	f0810021 	sbi	r4, r1, 33
        pc += printi(out,*varg++,10,0,width,pad,'a');
        continue;
      }
      if(*format == 'c') 
      {
        scr[0] = *varg++;
10000898:	335a0004 	addik	r26, r26, 4
        scr[1] = '\0';
        pc += prints(out,scr,width,pad);
        continue;
1000089c:	b810feb0 	brid	-336		// 1000074c
100008a0:	13181800 	addk	r24, r24, r3
        width += *format - '0';
      }
      if(*format == 's') 
      {
        char *s = *((char **)varg++);
        pc += prints(out, s?s:"(null)",width,pad);
100008a4:	b0001000 	imm	4096
100008a8:	30c01478 	addik	r6, r0, 5240	// 10001478 <__rodata_start>
100008ac:	b810ff28 	brid	-216		// 100007d4
100008b0:	10b60000 	addk	r5, r22, r0

100008b4 <e_sprintf>:
  int *varg = (int *)((char **)&format);
  return print(0,varg);
}

int e_sprintf(char *out, const char *format, ...)
{
100008b4:	f8c10008 	swi	r6, r1, 8
100008b8:	f8e1000c 	swi	r7, r1, 12
100008bc:	f9010010 	swi	r8, r1, 16
100008c0:	f9210014 	swi	r9, r1, 20
100008c4:	f9410018 	swi	r10, r1, 24
100008c8:	3021ffe4 	addik	r1, r1, -28
100008cc:	f8a10020 	swi	r5, r1, 32
100008d0:	f8c10024 	swi	r6, r1, 36
  int *varg = (int *)((char **)&format);
  return print(&out,varg);
100008d4:	30a10020 	addik	r5, r1, 32
  int *varg = (int *)((char **)&format);
  return print(0,varg);
}

int e_sprintf(char *out, const char *format, ...)
{
100008d8:	f9e10000 	swi	r15, r1, 0
  int *varg = (int *)((char **)&format);
  return print(&out,varg);
100008dc:	b9f4fd48 	brlid	r15, -696	// 10000624 <print>
100008e0:	30c10024 	addik	r6, r1, 36
}
100008e4:	e9e10000 	lwi	r15, r1, 0
100008e8:	b60f0008 	rtsd	r15, 8
100008ec:	3021001c 	addik	r1, r1, 28

100008f0 <e_printf>:
 */

#include "e_printf.h"

int e_printf(const char *format, ...)
{ 
100008f0:	f8a10004 	swi	r5, r1, 4
100008f4:	f8c10008 	swi	r6, r1, 8
100008f8:	f8e1000c 	swi	r7, r1, 12
100008fc:	f9010010 	swi	r8, r1, 16
10000900:	f9210014 	swi	r9, r1, 20
10000904:	f9410018 	swi	r10, r1, 24
10000908:	3021ffe4 	addik	r1, r1, -28
1000090c:	f8a10020 	swi	r5, r1, 32
  int *varg = (int *)((char **)&format);
  return print(0,varg);
10000910:	30c10020 	addik	r6, r1, 32
 */

#include "e_printf.h"

int e_printf(const char *format, ...)
{ 
10000914:	f9e10000 	swi	r15, r1, 0
  int *varg = (int *)((char **)&format);
  return print(0,varg);
10000918:	b9f4fd0c 	brlid	r15, -756	// 10000624 <print>
1000091c:	10a00000 	addk	r5, r0, r0
}
10000920:	e9e10000 	lwi	r15, r1, 0
10000924:	b60f0008 	rtsd	r15, 8
10000928:	3021001c 	addik	r1, r1, 28

1000092c <_exception_handler>:
1000092c:	b6110000 	rtsd	r17, 0
10000930:	80000000 	or	r0, r0, r0

10000934 <_hw_exception_handler>:
10000934:	b6910000 	rted	r17, 0
10000938:	80000000 	or	r0, r0, r0

1000093c <_interrupt_handler>:
1000093c:	b62e0000 	rtid	r14, 0
10000940:	80000000 	or	r0, r0, r0

10000944 <_program_clean>:
10000944:	b60f0008 	rtsd	r15, 8
10000948:	80000000 	or	r0, r0, r0

1000094c <_program_init>:
1000094c:	b60f0008 	rtsd	r15, 8
10000950:	80000000 	or	r0, r0, r0

10000954 <exit>:
10000954:	3021ffe0 	addik	r1, r1, -32
10000958:	10c00000 	addk	r6, r0, r0
1000095c:	fa61001c 	swi	r19, r1, 28
10000960:	f9e10000 	swi	r15, r1, 0
10000964:	b9f40028 	brlid	r15, 40	// 1000098c <__call_exitprocs>
10000968:	12650000 	addk	r19, r5, r0
1000096c:	b0001000 	imm	4096
10000970:	e880153c 	lwi	r4, r0, 5436	// 1000153c <_global_impure_ptr>
10000974:	e8640028 	lwi	r3, r4, 40
10000978:	bc03000c 	beqi	r3, 12		// 10000984
1000097c:	99fc1800 	brald	r15, r3
10000980:	10a40000 	addk	r5, r4, r0
10000984:	b9f4f6f4 	brlid	r15, -2316	// 10000078 <_exit>
10000988:	10b30000 	addk	r5, r19, r0

1000098c <__call_exitprocs>:
1000098c:	3021ffb4 	addik	r1, r1, -76
10000990:	fbe10048 	swi	r31, r1, 72
10000994:	b0001000 	imm	4096
10000998:	ebe0153c 	lwi	r31, r0, 5436	// 1000153c <_global_impure_ptr>
1000099c:	fb410034 	swi	r26, r1, 52
100009a0:	fbc10044 	swi	r30, r1, 68
100009a4:	13460000 	addk	r26, r6, r0
100009a8:	13c50000 	addk	r30, r5, r0
100009ac:	307f0048 	addik	r3, r31, 72
100009b0:	fba10040 	swi	r29, r1, 64
100009b4:	f9e10000 	swi	r15, r1, 0
100009b8:	fa610020 	swi	r19, r1, 32
100009bc:	fac10024 	swi	r22, r1, 36
100009c0:	fae10028 	swi	r23, r1, 40
100009c4:	fb01002c 	swi	r24, r1, 44
100009c8:	fb210030 	swi	r25, r1, 48
100009cc:	fb610038 	swi	r27, r1, 56
100009d0:	fb81003c 	swi	r28, r1, 60
100009d4:	f861001c 	swi	r3, r1, 28
100009d8:	33a00001 	addik	r29, r0, 1
100009dc:	eaff0048 	lwi	r23, r31, 72
100009e0:	be170060 	beqid	r23, 96		// 10000a40
100009e4:	eb61001c 	lwi	r27, r1, 28
100009e8:	e8770004 	lwi	r3, r23, 4
100009ec:	3263ffff 	addik	r19, r3, -1
100009f0:	be530044 	bltid	r19, 68		// 10000a34
100009f4:	eb370088 	lwi	r25, r23, 136
100009f8:	33030001 	addik	r24, r3, 1
100009fc:	66d30402 	bslli	r22, r19, 2
10000a00:	67180402 	bslli	r24, r24, 2
10000a04:	12d9b000 	addk	r22, r25, r22
10000a08:	1317c000 	addk	r24, r23, r24
10000a0c:	bc1a006c 	beqi	r26, 108		// 10000a78
10000a10:	bc190010 	beqi	r25, 16		// 10000a20
10000a14:	e8760080 	lwi	r3, r22, 128
10000a18:	8863d000 	xor	r3, r3, r26
10000a1c:	bc03005c 	beqi	r3, 92		// 10000a78
10000a20:	3273ffff 	addik	r19, r19, -1
10000a24:	a873ffff 	xori	r3, r19, -1
10000a28:	32d6fffc 	addik	r22, r22, -4
10000a2c:	be23ffe0 	bneid	r3, -32		// 10000a0c
10000a30:	3318fffc 	addik	r24, r24, -4
10000a34:	b0000000 	imm	0
10000a38:	30600000 	addik	r3, r0, 0
10000a3c:	bc2300d4 	bnei	r3, 212		// 10000b10
10000a40:	e9e10000 	lwi	r15, r1, 0
10000a44:	ea610020 	lwi	r19, r1, 32
10000a48:	eac10024 	lwi	r22, r1, 36
10000a4c:	eae10028 	lwi	r23, r1, 40
10000a50:	eb01002c 	lwi	r24, r1, 44
10000a54:	eb210030 	lwi	r25, r1, 48
10000a58:	eb410034 	lwi	r26, r1, 52
10000a5c:	eb610038 	lwi	r27, r1, 56
10000a60:	eb81003c 	lwi	r28, r1, 60
10000a64:	eba10040 	lwi	r29, r1, 64
10000a68:	ebc10044 	lwi	r30, r1, 68
10000a6c:	ebe10048 	lwi	r31, r1, 72
10000a70:	b60f0008 	rtsd	r15, 8
10000a74:	3021004c 	addik	r1, r1, 76
10000a78:	e8970004 	lwi	r4, r23, 4
10000a7c:	3084ffff 	addik	r4, r4, -1
10000a80:	88c49800 	xor	r6, r4, r19
10000a84:	be060074 	beqid	r6, 116		// 10000af8
10000a88:	e8780000 	lwi	r3, r24, 0
10000a8c:	f8180000 	swi	r0, r24, 0
10000a90:	bc03ff90 	beqi	r3, -112		// 10000a20
10000a94:	be190054 	beqid	r25, 84		// 10000ae8
10000a98:	eb970004 	lwi	r28, r23, 4
10000a9c:	e8d90100 	lwi	r6, r25, 256
10000aa0:	449d9c00 	bsll	r4, r29, r19
10000aa4:	84c43000 	and	r6, r4, r6
10000aa8:	bc060040 	beqi	r6, 64		// 10000ae8
10000aac:	e8d90104 	lwi	r6, r25, 260
10000ab0:	84843000 	and	r4, r4, r6
10000ab4:	be24004c 	bneid	r4, 76		// 10000b00
10000ab8:	10be0000 	addk	r5, r30, r0
10000abc:	99fc1800 	brald	r15, r3
10000ac0:	e8d60000 	lwi	r6, r22, 0
10000ac4:	e8770004 	lwi	r3, r23, 4
10000ac8:	8863e000 	xor	r3, r3, r28
10000acc:	bc23ff10 	bnei	r3, -240		// 100009dc
10000ad0:	e87b0000 	lwi	r3, r27, 0
10000ad4:	8863b800 	xor	r3, r3, r23
10000ad8:	be03ff4c 	beqid	r3, -180		// 10000a24
10000adc:	3273ffff 	addik	r19, r19, -1
10000ae0:	b810ff00 	brid	-256		// 100009e0
10000ae4:	eaff0048 	lwi	r23, r31, 72
10000ae8:	99fc1800 	brald	r15, r3
10000aec:	80000000 	or	r0, r0, r0
10000af0:	b810ffd8 	brid	-40		// 10000ac8
10000af4:	e8770004 	lwi	r3, r23, 4
10000af8:	b810ff98 	brid	-104		// 10000a90
10000afc:	f8970004 	swi	r4, r23, 4
10000b00:	99fc1800 	brald	r15, r3
10000b04:	e8b60000 	lwi	r5, r22, 0
10000b08:	b810ffc0 	brid	-64		// 10000ac8
10000b0c:	e8770004 	lwi	r3, r23, 4
10000b10:	e8770004 	lwi	r3, r23, 4
10000b14:	bc230040 	bnei	r3, 64		// 10000b54
10000b18:	e8770000 	lwi	r3, r23, 0
10000b1c:	bc03003c 	beqi	r3, 60		// 10000b58
10000b20:	be190014 	beqid	r25, 20		// 10000b34
10000b24:	f87b0000 	swi	r3, r27, 0
10000b28:	b000efff 	imm	-4097
10000b2c:	b9f4f4d4 	brlid	r15, -2860
10000b30:	10b90000 	addk	r5, r25, r0
10000b34:	b000efff 	imm	-4097
10000b38:	b9f4f4c8 	brlid	r15, -2872
10000b3c:	10b70000 	addk	r5, r23, r0
10000b40:	eafb0000 	lwi	r23, r27, 0
10000b44:	be37fea4 	bneid	r23, -348		// 100009e8
10000b48:	e9e10000 	lwi	r15, r1, 0
10000b4c:	b810fefc 	brid	-260		// 10000a48
10000b50:	ea610020 	lwi	r19, r1, 32
10000b54:	e8770000 	lwi	r3, r23, 0
10000b58:	13770000 	addk	r27, r23, r0
10000b5c:	b810ffe8 	brid	-24		// 10000b44
10000b60:	12e30000 	addk	r23, r3, r0

10000b64 <__do_global_ctors_aux>:
10000b64:	b0001000 	imm	4096
10000b68:	e8601664 	lwi	r3, r0, 5732	// 10001664 <__data_end>
10000b6c:	3021ffe0 	addik	r1, r1, -32
10000b70:	f9e10000 	swi	r15, r1, 0
10000b74:	a883ffff 	xori	r4, r3, -1
10000b78:	be040024 	beqid	r4, 36		// 10000b9c
10000b7c:	fa61001c 	swi	r19, r1, 28
10000b80:	b0001000 	imm	4096
10000b84:	32601664 	addik	r19, r0, 5732	// 10001664 <__data_end>
10000b88:	99fc1800 	brald	r15, r3
10000b8c:	3273fffc 	addik	r19, r19, -4
10000b90:	e8730000 	lwi	r3, r19, 0
10000b94:	a883ffff 	xori	r4, r3, -1
10000b98:	bc24fff0 	bnei	r4, -16		// 10000b88
10000b9c:	e9e10000 	lwi	r15, r1, 0
10000ba0:	ea61001c 	lwi	r19, r1, 28
10000ba4:	b60f0008 	rtsd	r15, 8
10000ba8:	30210020 	addik	r1, r1, 32

10000bac <main>:
  volatile sb_uint32_t um1,um2;
  volatile sb_int64_t m4;
  volatile sb_uint64_t um3;

  /* divu rd, r1, r2 */
  e_printf("div inst\n"); 
10000bac:	b0001000 	imm	4096
10000bb0:	30a01480 	addik	r5, r0, 5248
#include "sb_uart.h"

#include "e_printf.h" /* embedded printf */

int main(void)
{
10000bb4:	3021ffc0 	addik	r1, r1, -64
10000bb8:	f9e10000 	swi	r15, r1, 0
  volatile sb_uint32_t um1,um2;
  volatile sb_int64_t m4;
  volatile sb_uint64_t um3;

  /* divu rd, r1, r2 */
  e_printf("div inst\n"); 
10000bbc:	b9f4fd34 	brlid	r15, -716	// 100008f0 <e_printf>
10000bc0:	80000000 	or	r0, r0, r0
  um1 = 0x1;
10000bc4:	30600001 	addik	r3, r0, 1
10000bc8:	f8610020 	swi	r3, r1, 32
  um2 = 0x8000001;
10000bcc:	b0000800 	imm	2048
10000bd0:	30600001 	addik	r3, r0, 1
  um3 = um1/um2; 
10000bd4:	10800000 	addk	r4, r0, r0
  volatile sb_uint64_t um3;

  /* divu rd, r1, r2 */
  e_printf("div inst\n"); 
  um1 = 0x1;
  um2 = 0x8000001;
10000bd8:	f861001c 	swi	r3, r1, 28
  um3 = um1/um2; 
10000bdc:	e8c10020 	lwi	r6, r1, 32
10000be0:	e861001c 	lwi	r3, r1, 28
10000be4:	48a33002 	idivu	r5, r3, r6
10000be8:	f8810030 	swi	r4, r1, 48
10000bec:	f8a10034 	swi	r5, r1, 52
  if(um3 == 0) 
10000bf0:	e8810030 	lwi	r4, r1, 48
10000bf4:	e8a10034 	lwi	r5, r1, 52
10000bf8:	80842800 	or	r4, r4, r5
10000bfc:	bc240654 	bnei	r4, 1620		// 10001250
  {
    e_printf("ok!\n");    
10000c00:	b0001000 	imm	4096
10000c04:	30a0148c 	addik	r5, r0, 5260
10000c08:	b9f4fce8 	brlid	r15, -792	// 100008f0 <e_printf>
10000c0c:	80000000 	or	r0, r0, r0
  {
    e_printf("failed!\n");    
  }

  /* div rd, r1, r2 */
  e_printf("div inst\n"); 
10000c10:	b0001000 	imm	4096
10000c14:	30a01480 	addik	r5, r0, 5248
10000c18:	b9f4fcd8 	brlid	r15, -808	// 100008f0 <e_printf>
10000c1c:	80000000 	or	r0, r0, r0
  m1 = -1023;
10000c20:	3060fc01 	addik	r3, r0, -1023
10000c24:	f861002c 	swi	r3, r1, 44
  m2 = -511;
10000c28:	3060fe01 	addik	r3, r0, -511
10000c2c:	f8610028 	swi	r3, r1, 40
  m3 = m1/m2; 
10000c30:	e881002c 	lwi	r4, r1, 44
10000c34:	e8610028 	lwi	r3, r1, 40
10000c38:	48632000 	idiv	r3, r3, r4
10000c3c:	f8610024 	swi	r3, r1, 36
  if(m3 == 2) 
10000c40:	e8610024 	lwi	r3, r1, 36
10000c44:	a8630002 	xori	r3, r3, 2
10000c48:	bc0306a8 	beqi	r3, 1704		// 100012f0
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
10000c4c:	b0001000 	imm	4096
10000c50:	30a01494 	addik	r5, r0, 5268
10000c54:	b9f4fc9c 	brlid	r15, -868	// 100008f0 <e_printf>
10000c58:	80000000 	or	r0, r0, r0
  }

  /* divu rd, r1, r2 */
  e_printf("divu inst\n");
10000c5c:	b0001000 	imm	4096
10000c60:	30a014a0 	addik	r5, r0, 5280
10000c64:	b9f4fc8c 	brlid	r15, -884	// 100008f0 <e_printf>
10000c68:	80000000 	or	r0, r0, r0
  um1 = 19903994;
10000c6c:	b000012f 	imm	303
10000c70:	3060b5fa 	addik	r3, r0, -18950
  um2 = 2451;  
  um3 = um1/um2;
10000c74:	10800000 	addk	r4, r0, r0
    e_printf("failed!\n");    
  }

  /* divu rd, r1, r2 */
  e_printf("divu inst\n");
  um1 = 19903994;
10000c78:	f8610020 	swi	r3, r1, 32
  um2 = 2451;  
10000c7c:	30600993 	addik	r3, r0, 2451
10000c80:	f861001c 	swi	r3, r1, 28
  um3 = um1/um2;
10000c84:	e8c10020 	lwi	r6, r1, 32
10000c88:	e861001c 	lwi	r3, r1, 28
10000c8c:	48a33002 	idivu	r5, r3, r6
10000c90:	f8810030 	swi	r4, r1, 48
10000c94:	f8a10034 	swi	r5, r1, 52
  if(um3 == 8120) 
10000c98:	e8810030 	lwi	r4, r1, 48
10000c9c:	e8a10034 	lwi	r5, r1, 52
10000ca0:	be040750 	beqid	r4, 1872		// 100013f0
10000ca4:	a8651fb8 	xori	r3, r5, 8120
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
10000ca8:	b0001000 	imm	4096
10000cac:	30a01494 	addik	r5, r0, 5268
10000cb0:	b9f4fc40 	brlid	r15, -960	// 100008f0 <e_printf>
10000cb4:	80000000 	or	r0, r0, r0
  }

  /* div rd, r1, r2 */
  e_printf("div inst\n"); 
10000cb8:	b0001000 	imm	4096
10000cbc:	30a01480 	addik	r5, r0, 5248
10000cc0:	b9f4fc30 	brlid	r15, -976	// 100008f0 <e_printf>
10000cc4:	80000000 	or	r0, r0, r0
  m1 = -1023;
10000cc8:	3060fc01 	addik	r3, r0, -1023
10000ccc:	f861002c 	swi	r3, r1, 44
  m2 = 0;
10000cd0:	f8010028 	swi	r0, r1, 40
  m3 = m1/m2; 
10000cd4:	e881002c 	lwi	r4, r1, 44
10000cd8:	e8610028 	lwi	r3, r1, 40
10000cdc:	48632000 	idiv	r3, r3, r4
10000ce0:	f8610024 	swi	r3, r1, 36
  if(m3 == 0) 
10000ce4:	e8610024 	lwi	r3, r1, 36
10000ce8:	bc2305f4 	bnei	r3, 1524		// 100012dc
  {
    e_printf("ok!\n");    
10000cec:	b0001000 	imm	4096
10000cf0:	30a0148c 	addik	r5, r0, 5260
10000cf4:	b9f4fbfc 	brlid	r15, -1028	// 100008f0 <e_printf>
10000cf8:	80000000 	or	r0, r0, r0
  {
    e_printf("failed!\n");    
  }

  /* div rd, r1, r2 */
  e_printf("div inst\n"); 
10000cfc:	b0001000 	imm	4096
10000d00:	30a01480 	addik	r5, r0, 5248
10000d04:	b9f4fbec 	brlid	r15, -1044	// 100008f0 <e_printf>
10000d08:	80000000 	or	r0, r0, r0
  m1 = -2147483648;
10000d0c:	b0008000 	imm	-32768
10000d10:	30600000 	addik	r3, r0, 0
10000d14:	f861002c 	swi	r3, r1, 44
  m2 = -1;
10000d18:	3060ffff 	addik	r3, r0, -1
10000d1c:	f8610028 	swi	r3, r1, 40
  m3 = m1/m2; 
10000d20:	e881002c 	lwi	r4, r1, 44
10000d24:	e8610028 	lwi	r3, r1, 40
10000d28:	48632000 	idiv	r3, r3, r4
10000d2c:	f8610024 	swi	r3, r1, 36
  if(m3 == -2147483648) 
10000d30:	e8610024 	lwi	r3, r1, 36
10000d34:	b0008000 	imm	-32768
10000d38:	30630000 	addik	r3, r3, 0
10000d3c:	bc0306a0 	beqi	r3, 1696		// 100013dc
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
10000d40:	b0001000 	imm	4096
10000d44:	30a01494 	addik	r5, r0, 5268
10000d48:	b9f4fba8 	brlid	r15, -1112	// 100008f0 <e_printf>
10000d4c:	80000000 	or	r0, r0, r0
  }

  /* check cmp instructions */
  e_printf("cmp inst\n"); 
10000d50:	b0001000 	imm	4096
10000d54:	30a014ac 	addik	r5, r0, 5292
10000d58:	b9f4fb98 	brlid	r15, -1128	// 100008f0 <e_printf>
10000d5c:	80000000 	or	r0, r0, r0
  m1 = -1;
10000d60:	3060ffff 	addik	r3, r0, -1
10000d64:	f861002c 	swi	r3, r1, 44
  m2 = -1;
10000d68:	f8610028 	swi	r3, r1, 40
  __asm__ __volatile__ ("cmpu %0, %1, %2;"           \
10000d6c:	e861002c 	lwi	r3, r1, 44
10000d70:	e8810028 	lwi	r4, r1, 40
10000d74:	14632003 	cmpu	r3, r3, r4
10000d78:	f8610024 	swi	r3, r1, 36
                              : "=r" (m3)            \
                              : "r" (m1), "r" (m2)); \
  if(((m3 >> 24) & 0x80) == 0x00) 
10000d7c:	e8610024 	lwi	r3, r1, 36
10000d80:	64630218 	bsrai	r3, r3, 24
10000d84:	a4630080 	andi	r3, r3, 128
10000d88:	bc230540 	bnei	r3, 1344		// 100012c8
  {
    e_printf("ok!\n");    
10000d8c:	b0001000 	imm	4096
10000d90:	30a0148c 	addik	r5, r0, 5260
10000d94:	b9f4fb5c 	brlid	r15, -1188	// 100008f0 <e_printf>
10000d98:	80000000 	or	r0, r0, r0
  {
    e_printf("failed!\n");    
  }

  /* check cmp instructions */
  e_printf("cmp inst\n"); 
10000d9c:	b0001000 	imm	4096
10000da0:	30a014ac 	addik	r5, r0, 5292
10000da4:	b9f4fb4c 	brlid	r15, -1204	// 100008f0 <e_printf>
10000da8:	80000000 	or	r0, r0, r0
  m1 = 0x7FFFFFFF;
10000dac:	b0007fff 	imm	32767
10000db0:	3060ffff 	addik	r3, r0, -1
10000db4:	f861002c 	swi	r3, r1, 44
  m2 = 0x80000000;
10000db8:	b0008000 	imm	-32768
10000dbc:	30600000 	addik	r3, r0, 0
10000dc0:	f8610028 	swi	r3, r1, 40
  __asm__ __volatile__ ("cmpu %0, %1, %2;"             \
10000dc4:	e8610020 	lwi	r3, r1, 32
10000dc8:	e881001c 	lwi	r4, r1, 28
10000dcc:	14632003 	cmpu	r3, r3, r4
10000dd0:	f8610024 	swi	r3, r1, 36
                              : "=r" (m3)              \
                              : "r" (um1), "r" (um2)); \
  if(((m3 >> 24) & 0x80) == 0x80) 
10000dd4:	e8610024 	lwi	r3, r1, 36
10000dd8:	bca304dc 	bgei	r3, 1244		// 100012b4
  {
    e_printf("ok!\n");    
10000ddc:	b0001000 	imm	4096
10000de0:	30a0148c 	addik	r5, r0, 5260
10000de4:	b9f4fb0c 	brlid	r15, -1268	// 100008f0 <e_printf>
10000de8:	80000000 	or	r0, r0, r0
  {
    e_printf("failed!\n");    
  }

  /* check cmpu instructions */
  e_printf("cmpu inst\n"); 
10000dec:	b0001000 	imm	4096
10000df0:	30a014b8 	addik	r5, r0, 5304
10000df4:	b9f4fafc 	brlid	r15, -1284	// 100008f0 <e_printf>
10000df8:	80000000 	or	r0, r0, r0
  um1 = 0xFFFFFFFF;
10000dfc:	3060ffff 	addik	r3, r0, -1
10000e00:	f8610020 	swi	r3, r1, 32
  um2 = 0x0FFFFFFF;
10000e04:	b0000fff 	imm	4095
10000e08:	3060ffff 	addik	r3, r0, -1
10000e0c:	f861001c 	swi	r3, r1, 28
  __asm__ __volatile__ ("cmpu %0, %1, %2;"             \
10000e10:	e8610020 	lwi	r3, r1, 32
10000e14:	e881001c 	lwi	r4, r1, 28
10000e18:	14632003 	cmpu	r3, r3, r4
10000e1c:	f8610024 	swi	r3, r1, 36
                              : "=r" (m3)              \
                              : "r" (um1), "r" (um2)); \
  if(((m3 >> 24) & 0x80) == 0x80) 
10000e20:	e8610024 	lwi	r3, r1, 36
10000e24:	bca3047c 	bgei	r3, 1148		// 100012a0
  {
    e_printf("ok!\n");    
10000e28:	b0001000 	imm	4096
10000e2c:	30a0148c 	addik	r5, r0, 5260
10000e30:	b9f4fac0 	brlid	r15, -1344	// 100008f0 <e_printf>
10000e34:	80000000 	or	r0, r0, r0
  {
    e_printf("failed!\n");    
  }

  /* check cmpu instructions */
  e_printf("cmpu inst\n"); 
10000e38:	b0001000 	imm	4096
10000e3c:	30a014b8 	addik	r5, r0, 5304
10000e40:	b9f4fab0 	brlid	r15, -1360	// 100008f0 <e_printf>
10000e44:	80000000 	or	r0, r0, r0
  um1 = 0xFFFFFFFF;
10000e48:	3060ffff 	addik	r3, r0, -1
10000e4c:	f8610020 	swi	r3, r1, 32
  um2 = 0xFFFFFFFF;
10000e50:	f861001c 	swi	r3, r1, 28
  __asm__ __volatile__ ("cmpu %0, %1, %2;"             \
10000e54:	e8610020 	lwi	r3, r1, 32
10000e58:	e881001c 	lwi	r4, r1, 28
10000e5c:	14632003 	cmpu	r3, r3, r4
10000e60:	f8610024 	swi	r3, r1, 36
                              : "=r" (m3)              \
                              : "r" (um1), "r" (um2)); \
  if(((m3 >> 24) & 0x80) == 0x00) 
10000e64:	e8610024 	lwi	r3, r1, 36
10000e68:	64630218 	bsrai	r3, r3, 24
10000e6c:	a4630080 	andi	r3, r3, 128
10000e70:	bc23041c 	bnei	r3, 1052		// 1000128c
  {
    e_printf("ok!\n");    
10000e74:	b0001000 	imm	4096
10000e78:	30a0148c 	addik	r5, r0, 5260
10000e7c:	b9f4fa74 	brlid	r15, -1420	// 100008f0 <e_printf>
10000e80:	80000000 	or	r0, r0, r0
  {
    e_printf("failed!\n");    
  }

  /* check cmpu instructions */
  e_printf("cmpu inst\n"); 
10000e84:	b0001000 	imm	4096
10000e88:	30a014b8 	addik	r5, r0, 5304
10000e8c:	b9f4fa64 	brlid	r15, -1436	// 100008f0 <e_printf>
10000e90:	80000000 	or	r0, r0, r0
  um1 = 0x7FFFFFFF;
10000e94:	b0007fff 	imm	32767
10000e98:	3060ffff 	addik	r3, r0, -1
10000e9c:	f8610020 	swi	r3, r1, 32
  um2 = 0x80000000;
10000ea0:	b0008000 	imm	-32768
10000ea4:	30600000 	addik	r3, r0, 0
10000ea8:	f861001c 	swi	r3, r1, 28
  __asm__ __volatile__ ("cmpu %0, %1, %2;"             \
10000eac:	e8610020 	lwi	r3, r1, 32
10000eb0:	e881001c 	lwi	r4, r1, 28
10000eb4:	14632003 	cmpu	r3, r3, r4
10000eb8:	f8610024 	swi	r3, r1, 36
                              : "=r" (m3)              \
                              : "r" (um1), "r" (um2)); \
  if(((m3 >> 24) & 0x80) == 0x00) 
10000ebc:	e8610024 	lwi	r3, r1, 36
10000ec0:	64630218 	bsrai	r3, r3, 24
10000ec4:	a4630080 	andi	r3, r3, 128
10000ec8:	bc2303b0 	bnei	r3, 944		// 10001278
  {
    e_printf("ok!\n");    
10000ecc:	b0001000 	imm	4096
10000ed0:	30a0148c 	addik	r5, r0, 5260
10000ed4:	b9f4fa1c 	brlid	r15, -1508	// 100008f0 <e_printf>
10000ed8:	80000000 	or	r0, r0, r0
  {
    e_printf("failed!\n");    
  }

  /* bsll */
  e_printf("bsll inst\n");   
10000edc:	b0001000 	imm	4096
10000ee0:	30a014c4 	addik	r5, r0, 5316
10000ee4:	b9f4fa0c 	brlid	r15, -1524	// 100008f0 <e_printf>
10000ee8:	80000000 	or	r0, r0, r0
  m1 = 0x0000FF00;
10000eec:	b0000000 	imm	0
10000ef0:	3060ff00 	addik	r3, r0, -256
10000ef4:	f861002c 	swi	r3, r1, 44
  m2 = 8;
10000ef8:	30600008 	addik	r3, r0, 8
10000efc:	f8610028 	swi	r3, r1, 40
  m3 = (m1 << m2);
10000f00:	e881002c 	lwi	r4, r1, 44
10000f04:	e8610028 	lwi	r3, r1, 40
10000f08:	44641c00 	bsll	r3, r4, r3
10000f0c:	f8610024 	swi	r3, r1, 36
  if(m3 == 0xFF0000) 
10000f10:	e8610024 	lwi	r3, r1, 36
10000f14:	b00000ff 	imm	255
10000f18:	a8630000 	xori	r3, r3, 0
10000f1c:	bc0304ac 	beqi	r3, 1196		// 100013c8
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
10000f20:	b0001000 	imm	4096
10000f24:	30a01494 	addik	r5, r0, 5268
10000f28:	b9f4f9c8 	brlid	r15, -1592	// 100008f0 <e_printf>
10000f2c:	80000000 	or	r0, r0, r0
  } 
  
  /* mul rd, r1, r2 */
  e_printf("mul inst\n"); 
10000f30:	b0001000 	imm	4096
10000f34:	30a014d0 	addik	r5, r0, 5328
10000f38:	b9f4f9b8 	brlid	r15, -1608	// 100008f0 <e_printf>
10000f3c:	80000000 	or	r0, r0, r0
  m1 = -1023;
10000f40:	3060fc01 	addik	r3, r0, -1023
10000f44:	f861002c 	swi	r3, r1, 44
  m2 = -511;
10000f48:	3060fe01 	addik	r3, r0, -511
10000f4c:	f8610028 	swi	r3, r1, 40
  m3 = m1*m2; 
10000f50:	e881002c 	lwi	r4, r1, 44
10000f54:	e8610028 	lwi	r3, r1, 40
10000f58:	40641800 	mul	r3, r4, r3
10000f5c:	f8610024 	swi	r3, r1, 36
  if(m3 == 522753) 
10000f60:	e8610024 	lwi	r3, r1, 36
10000f64:	b0000007 	imm	7
10000f68:	a863fa01 	xori	r3, r3, -1535
10000f6c:	bc030448 	beqi	r3, 1096		// 100013b4
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
10000f70:	b0001000 	imm	4096
10000f74:	30a01494 	addik	r5, r0, 5268
10000f78:	b9f4f978 	brlid	r15, -1672	// 100008f0 <e_printf>
10000f7c:	80000000 	or	r0, r0, r0
  }

  /* muli rd, r1, imm */
  e_printf("muli inst\n"); 
10000f80:	b0001000 	imm	4096
10000f84:	30a014dc 	addik	r5, r0, 5340
10000f88:	b9f4f968 	brlid	r15, -1688	// 100008f0 <e_printf>
10000f8c:	80000000 	or	r0, r0, r0
  m1 = -2500;
10000f90:	3060f63c 	addik	r3, r0, -2500
10000f94:	f861002c 	swi	r3, r1, 44
  m3 = m1*5191; 
10000f98:	e861002c 	lwi	r3, r1, 44
10000f9c:	60631447 	muli	r3, r3, 5191
10000fa0:	f8610024 	swi	r3, r1, 36
  if(m3 == -12977500) 
10000fa4:	e8610024 	lwi	r3, r1, 36
10000fa8:	b000ff39 	imm	-199
10000fac:	a863faa4 	xori	r3, r3, -1372
10000fb0:	bc0303f0 	beqi	r3, 1008		// 100013a0
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
10000fb4:	b0001000 	imm	4096
10000fb8:	30a01494 	addik	r5, r0, 5268
10000fbc:	b9f4f934 	brlid	r15, -1740	// 100008f0 <e_printf>
10000fc0:	80000000 	or	r0, r0, r0
  }

  /* mulh rd, r1, r2 */
  e_printf("mulh inst\n");
10000fc4:	b0001000 	imm	4096
10000fc8:	30a014e8 	addik	r5, r0, 5352
10000fcc:	b9f4f924 	brlid	r15, -1756	// 100008f0 <e_printf>
10000fd0:	80000000 	or	r0, r0, r0
  m1 = -240909;
10000fd4:	b000fffc 	imm	-4
10000fd8:	306052f3 	addik	r3, r0, 21235
10000fdc:	f861002c 	swi	r3, r1, 44
  m2 = -103994;  
10000fe0:	b000fffe 	imm	-2
10000fe4:	306069c6 	addik	r3, r0, 27078
10000fe8:	f8610028 	swi	r3, r1, 40
  m4 = (sb_int64_t)m1*m2;
10000fec:	e8c1002c 	lwi	r6, r1, 44
10000ff0:	e8610028 	lwi	r3, r1, 40
10000ff4:	40a61800 	mul	r5, r6, r3
10000ff8:	40861801 	mulh	r4, r6, r3
10000ffc:	f8810038 	swi	r4, r1, 56
10001000:	f8a1003c 	swi	r5, r1, 60
  if(m4 == 25053090546) 
10001004:	e8810038 	lwi	r4, r1, 56
10001008:	e8a1003c 	lwi	r5, r1, 60
1000100c:	a8640005 	xori	r3, r4, 5
10001010:	bc030370 	beqi	r3, 880		// 10001380
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
10001014:	b0001000 	imm	4096
10001018:	30a01494 	addik	r5, r0, 5268
1000101c:	b9f4f8d4 	brlid	r15, -1836	// 100008f0 <e_printf>
10001020:	80000000 	or	r0, r0, r0
  }

  /* mulhu rd, r1, r2 */
  e_printf("mulhu inst\n");
10001024:	b0001000 	imm	4096
10001028:	30a014f4 	addik	r5, r0, 5364
1000102c:	b9f4f8c4 	brlid	r15, -1852	// 100008f0 <e_printf>
10001030:	80000000 	or	r0, r0, r0
  um1 = 240909;
10001034:	b0000003 	imm	3
10001038:	3060ad0d 	addik	r3, r0, -21235
1000103c:	f8610020 	swi	r3, r1, 32
  um2 = 19903994;  
10001040:	b000012f 	imm	303
10001044:	3060b5fa 	addik	r3, r0, -18950
10001048:	f861001c 	swi	r3, r1, 28
  um3 = (sb_uint64_t)um1*um2;
1000104c:	e8610020 	lwi	r3, r1, 32
10001050:	e8c1001c 	lwi	r6, r1, 28
10001054:	40a61800 	mul	r5, r6, r3
10001058:	40861803 	mulhu	r4, r6, r3
1000105c:	f8810030 	swi	r4, r1, 48
10001060:	f8a10034 	swi	r5, r1, 52
  if(um3 == 4795051290546) 
10001064:	e8810030 	lwi	r4, r1, 48
10001068:	e8a10034 	lwi	r5, r1, 52
1000106c:	a864045c 	xori	r3, r4, 1116
10001070:	bc0302f0 	beqi	r3, 752		// 10001360
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
10001074:	b0001000 	imm	4096
10001078:	30a01494 	addik	r5, r0, 5268
1000107c:	b9f4f874 	brlid	r15, -1932	// 100008f0 <e_printf>
10001080:	80000000 	or	r0, r0, r0
  }

  /* mulhsu rd, r1, r2 */
  e_printf("mulhsu inst\n");
10001084:	b0001000 	imm	4096
10001088:	30a01500 	addik	r5, r0, 5376
1000108c:	b9f4f864 	brlid	r15, -1948	// 100008f0 <e_printf>
10001090:	80000000 	or	r0, r0, r0
  m1 = -240909;
10001094:	b000fffc 	imm	-4
10001098:	306052f3 	addik	r3, r0, 21235
1000109c:	f861002c 	swi	r3, r1, 44
  um2 = 19903994;  
100010a0:	b000012f 	imm	303
100010a4:	3060b5fa 	addik	r3, r0, -18950
100010a8:	f861001c 	swi	r3, r1, 28
  m4 = (sb_uint64_t)((sb_int64_t)m1*um2);
100010ac:	e861002c 	lwi	r3, r1, 44
100010b0:	e8c1001c 	lwi	r6, r1, 28
100010b4:	40a61800 	mul	r5, r6, r3
100010b8:	40833002 	mulhsu	r4, r3, r6
100010bc:	f8810038 	swi	r4, r1, 56
100010c0:	f8a1003c 	swi	r5, r1, 60
  if(m4 == -4795051290546) 
100010c4:	e8810038 	lwi	r4, r1, 56
100010c8:	e8a1003c 	lwi	r5, r1, 60
100010cc:	a864fba3 	xori	r3, r4, -1117
100010d0:	bc030270 	beqi	r3, 624		// 10001340
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
100010d4:	b0001000 	imm	4096
100010d8:	30a01494 	addik	r5, r0, 5268
100010dc:	b9f4f814 	brlid	r15, -2028	// 100008f0 <e_printf>
100010e0:	80000000 	or	r0, r0, r0
  }

  /* pcmpeq rd, r1, r2 */
  e_printf("pcmpeq inst\n");
100010e4:	b0001000 	imm	4096
100010e8:	30a01510 	addik	r5, r0, 5392
100010ec:	b9f4f804 	brlid	r15, -2044	// 100008f0 <e_printf>
100010f0:	80000000 	or	r0, r0, r0
  m1 = 240909;
100010f4:	b0000003 	imm	3
100010f8:	3060ad0d 	addik	r3, r0, -21235
100010fc:	f861002c 	swi	r3, r1, 44
  m2 = 240909;  
10001100:	f8610028 	swi	r3, r1, 40
  m1 = (m1 == m2);
10001104:	e881002c 	lwi	r4, r1, 44
10001108:	e8610028 	lwi	r3, r1, 40
1000110c:	88641c00 	pcmpeq	r3, r4, r3
10001110:	f861002c 	swi	r3, r1, 44
  if(m1 == 1) 
10001114:	e861002c 	lwi	r3, r1, 44
10001118:	a8630001 	xori	r3, r3, 1
1000111c:	bc030210 	beqi	r3, 528		// 1000132c
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
10001120:	b0001000 	imm	4096
10001124:	30a01494 	addik	r5, r0, 5268
10001128:	b9f4f7c8 	brlid	r15, -2104	// 100008f0 <e_printf>
1000112c:	80000000 	or	r0, r0, r0
  }

  /* pcmpne rd, r1, r2 */
  e_printf("pcmpne inst\n");
10001130:	b0001000 	imm	4096
10001134:	30a01520 	addik	r5, r0, 5408
10001138:	b9f4f7b8 	brlid	r15, -2120	// 100008f0 <e_printf>
1000113c:	80000000 	or	r0, r0, r0
  m1 = 240909;
10001140:	b0000003 	imm	3
10001144:	3060ad0d 	addik	r3, r0, -21235
10001148:	f861002c 	swi	r3, r1, 44
  m2 = 140909;  
1000114c:	b0000002 	imm	2
10001150:	3060266d 	addik	r3, r0, 9837
10001154:	f8610028 	swi	r3, r1, 40
  m1 = (m1 != m2);
10001158:	e881002c 	lwi	r4, r1, 44
1000115c:	e8610028 	lwi	r3, r1, 40
10001160:	8c641c00 	pcmpne	r3, r4, r3
10001164:	f861002c 	swi	r3, r1, 44
  if(m1 == 1) 
10001168:	e861002c 	lwi	r3, r1, 44
1000116c:	a8630001 	xori	r3, r3, 1
10001170:	bc0301a8 	beqi	r3, 424		// 10001318
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
10001174:	b0001000 	imm	4096
10001178:	30a01494 	addik	r5, r0, 5268
1000117c:	b9f4f774 	brlid	r15, -2188	// 100008f0 <e_printf>
10001180:	80000000 	or	r0, r0, r0
  }

  /* clz rd, r1 */
  e_printf("clz inst\n");
10001184:	b0001000 	imm	4096
10001188:	30a01530 	addik	r5, r0, 5424
1000118c:	b9f4f764 	brlid	r15, -2204	// 100008f0 <e_printf>
10001190:	80000000 	or	r0, r0, r0
  m1 = 0;
10001194:	f801002c 	swi	r0, r1, 44
  __asm__ __volatile__ ("clz %0, %1;"     \
10001198:	e861002c 	lwi	r3, r1, 44
1000119c:	906300e0 	clz	r3, r3
100011a0:	f8610028 	swi	r3, r1, 40
                             : "=r" (m2)  \
                             : "r" (m1)); \
  if(m2 == 32) 
100011a4:	e8610028 	lwi	r3, r1, 40
100011a8:	a8630020 	xori	r3, r3, 32
100011ac:	bc030158 	beqi	r3, 344		// 10001304
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
100011b0:	b0001000 	imm	4096
100011b4:	30a01494 	addik	r5, r0, 5268
100011b8:	b9f4f738 	brlid	r15, -2248	// 100008f0 <e_printf>
100011bc:	80000000 	or	r0, r0, r0
  }

  /* clz rd, r1 */
  e_printf("clz inst\n");
100011c0:	b0001000 	imm	4096
100011c4:	30a01530 	addik	r5, r0, 5424
100011c8:	b9f4f728 	brlid	r15, -2264	// 100008f0 <e_printf>
100011cc:	80000000 	or	r0, r0, r0
  m1 = 0xFFFFFFFF;
100011d0:	3060ffff 	addik	r3, r0, -1
100011d4:	f861002c 	swi	r3, r1, 44
  __asm__ __volatile__ ("clz %0, %1;"     \
100011d8:	e861002c 	lwi	r3, r1, 44
100011dc:	906300e0 	clz	r3, r3
100011e0:	f8610028 	swi	r3, r1, 40
                             : "=r" (m2)  \
                             : "r" (m1)); \
  if(m2 == 0) 
100011e4:	e8610028 	lwi	r3, r1, 40
100011e8:	bc23007c 	bnei	r3, 124		// 10001264
  {
    e_printf("ok!\n");    
100011ec:	b0001000 	imm	4096
100011f0:	30a0148c 	addik	r5, r0, 5260
100011f4:	b9f4f6fc 	brlid	r15, -2308	// 100008f0 <e_printf>
100011f8:	80000000 	or	r0, r0, r0
  {
    e_printf("failed!\n");    
  }

  /* clz rd, r1 */
  e_printf("clz inst\n");
100011fc:	b0001000 	imm	4096
10001200:	30a01530 	addik	r5, r0, 5424
10001204:	b9f4f6ec 	brlid	r15, -2324	// 100008f0 <e_printf>
10001208:	80000000 	or	r0, r0, r0
  m1 = 4830239;
1000120c:	b0000049 	imm	73
10001210:	3060b41f 	addik	r3, r0, -19425
10001214:	f861002c 	swi	r3, r1, 44
  __asm__ __volatile__ ("clz %0, %1;"     \
10001218:	e861002c 	lwi	r3, r1, 44
1000121c:	906300e0 	clz	r3, r3
10001220:	f8610028 	swi	r3, r1, 40
                             : "=r" (m2)  \
                             : "r" (m1)); \
  if(m2 == 9) 
10001224:	e8610028 	lwi	r3, r1, 40
10001228:	a8630009 	xori	r3, r3, 9
1000122c:	bc0301dc 	beqi	r3, 476		// 10001408
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
10001230:	b0001000 	imm	4096
10001234:	30a01494 	addik	r5, r0, 5268
10001238:	b9f4f6b8 	brlid	r15, -2376	// 100008f0 <e_printf>
1000123c:	80000000 	or	r0, r0, r0
  }

  return 0;
}
10001240:	e9e10000 	lwi	r15, r1, 0
10001244:	10600000 	addk	r3, r0, r0
10001248:	b60f0008 	rtsd	r15, 8
1000124c:	30210040 	addik	r1, r1, 64
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
10001250:	b0001000 	imm	4096
10001254:	30a01494 	addik	r5, r0, 5268
10001258:	b9f4f698 	brlid	r15, -2408	// 100008f0 <e_printf>
1000125c:	80000000 	or	r0, r0, r0
10001260:	b800f9b0 	bri	-1616		// 10000c10
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
10001264:	b0001000 	imm	4096
10001268:	30a01494 	addik	r5, r0, 5268
1000126c:	b9f4f684 	brlid	r15, -2428	// 100008f0 <e_printf>
10001270:	80000000 	or	r0, r0, r0
10001274:	b800ff88 	bri	-120		// 100011fc
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
10001278:	b0001000 	imm	4096
1000127c:	30a01494 	addik	r5, r0, 5268
10001280:	b9f4f670 	brlid	r15, -2448	// 100008f0 <e_printf>
10001284:	80000000 	or	r0, r0, r0
10001288:	b800fc54 	bri	-940		// 10000edc
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
1000128c:	b0001000 	imm	4096
10001290:	30a01494 	addik	r5, r0, 5268
10001294:	b9f4f65c 	brlid	r15, -2468	// 100008f0 <e_printf>
10001298:	80000000 	or	r0, r0, r0
1000129c:	b800fbe8 	bri	-1048		// 10000e84
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
100012a0:	b0001000 	imm	4096
100012a4:	30a01494 	addik	r5, r0, 5268
100012a8:	b9f4f648 	brlid	r15, -2488	// 100008f0 <e_printf>
100012ac:	80000000 	or	r0, r0, r0
100012b0:	b800fb88 	bri	-1144		// 10000e38
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
100012b4:	b0001000 	imm	4096
100012b8:	30a01494 	addik	r5, r0, 5268
100012bc:	b9f4f634 	brlid	r15, -2508	// 100008f0 <e_printf>
100012c0:	80000000 	or	r0, r0, r0
100012c4:	b800fb28 	bri	-1240		// 10000dec
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
100012c8:	b0001000 	imm	4096
100012cc:	30a01494 	addik	r5, r0, 5268
100012d0:	b9f4f620 	brlid	r15, -2528	// 100008f0 <e_printf>
100012d4:	80000000 	or	r0, r0, r0
100012d8:	b800fac4 	bri	-1340		// 10000d9c
  {
    e_printf("ok!\n");    
  }
  else
  {
    e_printf("failed!\n");    
100012dc:	b0001000 	imm	4096
100012e0:	30a01494 	addik	r5, r0, 5268
100012e4:	b9f4f60c 	brlid	r15, -2548	// 100008f0 <e_printf>
100012e8:	80000000 	or	r0, r0, r0
100012ec:	b800fa10 	bri	-1520		// 10000cfc
  m1 = -1023;
  m2 = -511;
  m3 = m1/m2; 
  if(m3 == 2) 
  {
    e_printf("ok!\n");    
100012f0:	b0001000 	imm	4096
100012f4:	30a0148c 	addik	r5, r0, 5260
100012f8:	b9f4f5f8 	brlid	r15, -2568	// 100008f0 <e_printf>
100012fc:	80000000 	or	r0, r0, r0
10001300:	b800f95c 	bri	-1700		// 10000c5c
  __asm__ __volatile__ ("clz %0, %1;"     \
                             : "=r" (m2)  \
                             : "r" (m1)); \
  if(m2 == 32) 
  {
    e_printf("ok!\n");    
10001304:	b0001000 	imm	4096
10001308:	30a0148c 	addik	r5, r0, 5260
1000130c:	b9f4f5e4 	brlid	r15, -2588	// 100008f0 <e_printf>
10001310:	80000000 	or	r0, r0, r0
10001314:	b800feac 	bri	-340		// 100011c0
  m1 = 240909;
  m2 = 140909;  
  m1 = (m1 != m2);
  if(m1 == 1) 
  {
    e_printf("ok!\n");    
10001318:	b0001000 	imm	4096
1000131c:	30a0148c 	addik	r5, r0, 5260
10001320:	b9f4f5d0 	brlid	r15, -2608	// 100008f0 <e_printf>
10001324:	80000000 	or	r0, r0, r0
10001328:	b800fe5c 	bri	-420		// 10001184
  m1 = 240909;
  m2 = 240909;  
  m1 = (m1 == m2);
  if(m1 == 1) 
  {
    e_printf("ok!\n");    
1000132c:	b0001000 	imm	4096
10001330:	30a0148c 	addik	r5, r0, 5260
10001334:	b9f4f5bc 	brlid	r15, -2628	// 100008f0 <e_printf>
10001338:	80000000 	or	r0, r0, r0
1000133c:	b800fdf4 	bri	-524		// 10001130
  /* mulhsu rd, r1, r2 */
  e_printf("mulhsu inst\n");
  m1 = -240909;
  um2 = 19903994;  
  m4 = (sb_uint64_t)((sb_int64_t)m1*um2);
  if(m4 == -4795051290546) 
10001340:	b00090ab 	imm	-28501
10001344:	a865d04e 	xori	r3, r5, -12210
10001348:	bc23fd8c 	bnei	r3, -628		// 100010d4
  {
    e_printf("ok!\n");    
1000134c:	b0001000 	imm	4096
10001350:	30a0148c 	addik	r5, r0, 5260
10001354:	b9f4f59c 	brlid	r15, -2660	// 100008f0 <e_printf>
10001358:	80000000 	or	r0, r0, r0
1000135c:	b800fd88 	bri	-632		// 100010e4
  /* mulhu rd, r1, r2 */
  e_printf("mulhu inst\n");
  um1 = 240909;
  um2 = 19903994;  
  um3 = (sb_uint64_t)um1*um2;
  if(um3 == 4795051290546) 
10001360:	b0006f54 	imm	28500
10001364:	a8652fb2 	xori	r3, r5, 12210
10001368:	bc23fd0c 	bnei	r3, -756		// 10001074
  {
    e_printf("ok!\n");    
1000136c:	b0001000 	imm	4096
10001370:	30a0148c 	addik	r5, r0, 5260
10001374:	b9f4f57c 	brlid	r15, -2692	// 100008f0 <e_printf>
10001378:	80000000 	or	r0, r0, r0
1000137c:	b800fd08 	bri	-760		// 10001084
  /* mulh rd, r1, r2 */
  e_printf("mulh inst\n");
  m1 = -240909;
  m2 = -103994;  
  m4 = (sb_int64_t)m1*m2;
  if(m4 == 25053090546) 
10001380:	b000d547 	imm	-10937
10001384:	a865d2f2 	xori	r3, r5, -11534
10001388:	bc23fc8c 	bnei	r3, -884		// 10001014
  {
    e_printf("ok!\n");    
1000138c:	b0001000 	imm	4096
10001390:	30a0148c 	addik	r5, r0, 5260
10001394:	b9f4f55c 	brlid	r15, -2724	// 100008f0 <e_printf>
10001398:	80000000 	or	r0, r0, r0
1000139c:	b800fc88 	bri	-888		// 10001024
  e_printf("muli inst\n"); 
  m1 = -2500;
  m3 = m1*5191; 
  if(m3 == -12977500) 
  {
    e_printf("ok!\n");    
100013a0:	b0001000 	imm	4096
100013a4:	30a0148c 	addik	r5, r0, 5260
100013a8:	b9f4f548 	brlid	r15, -2744	// 100008f0 <e_printf>
100013ac:	80000000 	or	r0, r0, r0
100013b0:	b800fc14 	bri	-1004		// 10000fc4
  m1 = -1023;
  m2 = -511;
  m3 = m1*m2; 
  if(m3 == 522753) 
  {
    e_printf("ok!\n");    
100013b4:	b0001000 	imm	4096
100013b8:	30a0148c 	addik	r5, r0, 5260
100013bc:	b9f4f534 	brlid	r15, -2764	// 100008f0 <e_printf>
100013c0:	80000000 	or	r0, r0, r0
100013c4:	b800fbbc 	bri	-1092		// 10000f80
  m1 = 0x0000FF00;
  m2 = 8;
  m3 = (m1 << m2);
  if(m3 == 0xFF0000) 
  {
    e_printf("ok!\n");    
100013c8:	b0001000 	imm	4096
100013cc:	30a0148c 	addik	r5, r0, 5260
100013d0:	b9f4f520 	brlid	r15, -2784	// 100008f0 <e_printf>
100013d4:	80000000 	or	r0, r0, r0
100013d8:	b800fb58 	bri	-1192		// 10000f30
  m1 = -2147483648;
  m2 = -1;
  m3 = m1/m2; 
  if(m3 == -2147483648) 
  {
    e_printf("ok!\n");    
100013dc:	b0001000 	imm	4096
100013e0:	30a0148c 	addik	r5, r0, 5260
100013e4:	b9f4f50c 	brlid	r15, -2804	// 100008f0 <e_printf>
100013e8:	80000000 	or	r0, r0, r0
100013ec:	b800f964 	bri	-1692		// 10000d50
  /* divu rd, r1, r2 */
  e_printf("divu inst\n");
  um1 = 19903994;
  um2 = 2451;  
  um3 = um1/um2;
  if(um3 == 8120) 
100013f0:	bc23f8b8 	bnei	r3, -1864		// 10000ca8
  {
    e_printf("ok!\n");    
100013f4:	b0001000 	imm	4096
100013f8:	30a0148c 	addik	r5, r0, 5260
100013fc:	b9f4f4f4 	brlid	r15, -2828	// 100008f0 <e_printf>
10001400:	80000000 	or	r0, r0, r0
10001404:	b800f8b4 	bri	-1868		// 10000cb8
  __asm__ __volatile__ ("clz %0, %1;"     \
                             : "=r" (m2)  \
                             : "r" (m1)); \
  if(m2 == 9) 
  {
    e_printf("ok!\n");    
10001408:	b0001000 	imm	4096
1000140c:	30a0148c 	addik	r5, r0, 5260
10001410:	b9f4f4e0 	brlid	r15, -2848	// 100008f0 <e_printf>
10001414:	80000000 	or	r0, r0, r0
  {
    e_printf("failed!\n");    
  }

  return 0;
}
10001418:	b810fe2c 	brid	-468		// 10001244
1000141c:	e9e10000 	lwi	r15, r1, 0

Disassembly of section .init:

10001420 <__init>:
10001420:	3021fff8 	addik	r1, r1, -8
10001424:	d9e00800 	sw	r15, r0, r1
10001428:	b0001000 	imm	4096
1000142c:	316018a8 	addik	r11, r0, 6312
10001430:	940bc802 	mts	rshr, r11
10001434:	b0001000 	imm	4096
10001438:	316017bc 	addik	r11, r0, 6076
1000143c:	940bc800 	mts	rslr, r11
10001440:	b9f4ecf0 	brlid	r15, -4880	// 10000130 <frame_dummy>
10001444:	80000000 	or	r0, r0, r0
10001448:	b9f4f71c 	brlid	r15, -2276	// 10000b64 <__do_global_ctors_aux>
1000144c:	80000000 	or	r0, r0, r0
10001450:	c9e00800 	lw	r15, r0, r1
10001454:	b60f0008 	rtsd	r15, 8
10001458:	30210008 	addik	r1, r1, 8

Disassembly of section .fini:

1000145c <__fini>:
1000145c:	3021fff8 	addik	r1, r1, -8
10001460:	d9e00800 	sw	r15, r0, r1
10001464:	b9f4ec18 	brlid	r15, -5096	// 1000007c <__do_global_dtors_aux>
10001468:	80000000 	or	r0, r0, r0
1000146c:	c9e00800 	lw	r15, r0, r1
10001470:	b60f0008 	rtsd	r15, 8
10001474:	30210008 	addik	r1, r1, 8

Disassembly of section .rodata:

10001478 <__rodata_start>:
10001478:	286e756c 	addic	r3, r14, 30060
1000147c:	6c290000 	get	r1, rfsl0
10001480:	64697620 		r3, r9, r14
10001484:	696e7374 		r11, r14, r14
10001488:	0a000000 	addc	r16, r0, r0
1000148c:	6f6b210a 	cget	r27, rfsl10
10001490:	
1000153c <_global_impure_ptr>:
1000153c:	10001570 		r0, r0, r2
10001540:	Address 0x10001540 is out of bounds.


Disassembly of section .data:

10001564 <__data_start>:
10001564:	
10001568 <__dso_handle>:
10001568:	
1000156c <_impure_ptr>:
1000156c:	10001570 		r0, r0, r2

10001570 <impure_data>:
10001570:	
10001660 <force_to_data>:
10001660:	
Disassembly of section .ctors:

10001664 <__CTOR_LIST__>:
10001664:	ffffffff 		r31, r31, r31

10001668 <__CTOR_END__>:
10001668:	
Disassembly of section .dtors:

1000166c <__DTOR_LIST__>:
1000166c:	ffffffff 		r31, r31, r31

10001670 <__DTOR_END__>:
10001670:	
Disassembly of section .eh_frame:

10001674 <__EH_FRAME_BEGIN__>:
10001674:	
Disassembly of section .jcr:

10001678 <__JCR_END__>:
10001678:	
Disassembly of section .bss:

10001694 <__bss_start>:
10001694:	
10001698 <dtor_idx.2340>:
10001698:	
1000169c <object.2350>:
1000169c:	
Disassembly of section .heap:

100016b4 <_heap-0x4>:
100016b4:	
100016b8 <_heap>:
100016b8:	
Disassembly of section .stack:

100017b8 <_stack_end>:
100017b8:	
Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000000a7 		r0, r0, r0
       4:	00020000 	add	r0, r2, r0
       8:	00490101 		r2, r9, r0
       c:	fb0e0d00 	swi	r24, r14, 3328
      10:	01010101 		r8, r1, r0
      14:	00000001 		r0, r0, r0
      18:	0000012f 		r0, r0, r0
      1c:	676e752f 	bslli	r27, r14, 15
      20:	6d625f67 	tneaget	r11, rfsl7
      24:	6e752f2f 	ecaget	r19, rfsl15
      28:	7372632f 		r27, r18, r12
      2c:	6e65776c 	tnecget	r19, rfsl12
      30:	69622f6c 		r11, r2, r5
      34:	6962676c 		r11, r2, r12
      38:	6f73732f 	tncget	r27, rfsl15
      3c:	6d696372 	ncget	r11, rfsl2
      40:	6f626c61 	necaget	r27, rfsl1
      44:	7a650000 		r19, r5, r0
      48:	63727430 	muli	r27, r18, 29744
      4c:	2e530001 	rsubic	r18, r19, 1
      50:	
Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000000b8 		r0, r0, r0
       4:	00020000 	add	r0, r2, r0
       8:	00000401 		r0, r0, r0
       c:	
Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	01110010 		r8, r17, r0
   4:	06550603 	neg	r18, r21
   8:	081b0825 		r0, r27, r1
   c:	08130500 		r0, r19, r0
  10:	00000111 		r0, r0, r0
  14:	00100655 		r0, r16, r0
  18:	0603081b 	neg	r16, r3
  1c:	08250813 		r1, r5, r1
  20:	05000000 	rsub	r8, r0, r0
  24:	01110010 		r8, r17, r0
  28:	06110112 	neg	r16, r17
  2c:	0103081b 		r8, r3, r1
  30:	08250813 		r1, r5, r1
  34:	05000000 	rsub	r8, r0, r0
  38:	01110125 		r8, r17, r0
  3c:	0e130b03 		r16, r19, r1
  40:	0e1b0e11 		r16, r27, r1
  44:	01120110 		r8, r18, r0
  48:	06000002 	neg	r16, r0
  4c:	24000b0b 	rsubi	r0, r0, 2827
  50:	3e0b030e 	rsubikc	r16, r11, 782
  54:	00000316 		r0, r0, r0
  58:	00030e3a 		r0, r3, r1
  5c:	0b3b0b49 		r25, r27, r1
  60:	13000004 		r24, r0, r0
  64:	24000b0b 	rsubi	r0, r0, 2827
  68:	3e0b0308 	rsubikc	r16, r11, 776
  6c:	0000052e 		r0, r0, r0
  70:	013f0c03 		r9, r31, r1
  74:	0e3a0b3b 		r17, r26, r1
  78:	0b270c20 		r25, r7, r1
  7c:	0b011300 		r24, r1, r2
  80:	00063400 		r0, r6, r6
  84:	030e3a0b 		r24, r14, r7
  88:	3b0b4913 	addikc	r24, r11, 18707
  8c:	0000072e 		r0, r0, r0
  90:	01030e3a 		r8, r3, r1
  94:	0b3b0b27 		r25, r27, r1
  98:	0c200b01 		r1, r0, r1
  9c:	13000008 		r24, r0, r0
  a0:	0500030e 	neg	r8, r0
  a4:	3a0b3b0b 	addikc	r16, r11, 15115
  a8:	49130000 	idiv	r8, r19, r0
  ac:	09260049 		r9, r6, r0
  b0:	1300000a 		r24, r0, r0
  b4:	0f000b0b 		r24, r0, r1
  b8:	49130000 	idiv	r8, r19, r0
  bc:	0b2e0003 		r25, r14, r0
  c0:	0e3a0b3b 		r17, r26, r1
  c4:	0b270c20 		r25, r7, r1
  c8:	0b00000c 		r24, r0, r0
  cc:	2e013f0c 	rsubic	r16, r1, 16140
  d0:	030e3a0b 		r24, r14, r7
  d4:	3b0b270c 	addikc	r24, r11, 9996
  d8:	11011201 		r8, r1, r2
  dc:	400a0113 		r0, r10, r0
  e0:	00000d05 		r0, r0, r1
  e4:	0003083a 		r0, r3, r1
  e8:	0b3b0b49 		r25, r27, r1
  ec:	13020a00 		r24, r2, r1
  f0:	000e1d01 		r0, r14, r3
  f4:	31131101 	addik	r8, r19, 4353
  f8:	1201580b 		r16, r1, r11
  fc:	590b0113 		r8, r11, r0
 100:	00000f05 		r0, r0, r1
 104:	00311302 		r1, r17, r2
 108:	0a000010 		r16, r0, r0
 10c:	1d003113 		r8, r0, r6
 110:	11011201 		r8, r1, r2
 114:	580b590b 		r0, r11, r11
 118:	0000111d 		r0, r0, r2
 11c:	01311311 		r9, r17, r2
 120:	01120158 		r8, r18, r0
 124:	0b590b00 		r26, r25, r1
 128:	00120b01 		r0, r18, r1
 12c:	11011201 		r8, r1, r2
 130:	00001334 		r0, r0, r2
 134:	00311302 		r1, r17, r2
 138:	06000014 	neg	r16, r0
 13c:	2e013113 	rsubic	r16, r1, 12563
 140:	11011201 		r8, r1, r2
 144:	400a0113 		r0, r10, r0
 148:	00001501 		r0, r0, r2
 14c:	01491301 		r10, r9, r2
 150:	13000016 		r24, r0, r0
 154:	21004913 	addi	r8, r0, 18707
 158:	2f0b0000 	rsubic	r24, r11, 0
 15c:	00011101 		r0, r1, r2
 160:	250e130b 	rsubi	r8, r14, 4875
 164:	030e1b0e 		r24, r14, r3
 168:	11011201 		r8, r1, r2
 16c:	10060000 	addk	r0, r6, r0
 170:	0224000b 		r17, r4, r0
 174:	0b3e0b03 		r25, r30, r1
 178:	0e000003 		r16, r0, r0
 17c:	1600030e 		r16, r0, r0
 180:	3a0b3b0b 	addikc	r16, r11, 15115
 184:	49130000 	idiv	r8, r19, r0
 188:	0424000b 	neg	r1, r4
 18c:	0b3e0b03 		r25, r30, r1
 190:	08000005 		r0, r0, r0
 194:	2e013f0c 	rsubic	r16, r1, 16140
 198:	030e3a0b 		r24, r14, r7
 19c:	3b0b270c 	addikc	r24, r11, 9996
 1a0:	200b0113 	addi	r0, r11, 275
 1a4:	00000605 		r0, r0, r0
 1a8:	0003083a 		r0, r3, r1
 1ac:	0b3b0b49 		r25, r27, r1
 1b0:	13000007 		r24, r0, r0
 1b4:	0f000b0b 		r24, r0, r1
 1b8:	49130000 	idiv	r8, r19, r0
 1bc:	082e0131 		r1, r14, r0
 1c0:	13110112 		r24, r17, r0
 1c4:	01400601 		r10, r0, r0
 1c8:	13000009 		r24, r0, r0
 1cc:	05003113 	neg	r8, r0
 1d0:	02060000 	add	r16, r6, r0
 1d4:	0a2e013f 		r17, r14, r0
 1d8:	0c030e3a 		r0, r3, r1
 1dc:	0b3b0b27 		r25, r27, r1
 1e0:	0c491311 		r2, r9, r2
 1e4:	01120140 		r8, r18, r0
 1e8:	06011300 	neg	r16, r1
 1ec:	000b0500 		r0, r11, r0
 1f0:	03083a0b 		r24, r8, r7
 1f4:	3b0b4913 	addikc	r24, r11, 18707
 1f8:	02060000 	add	r16, r6, r0
 1fc:	0c050003 		r0, r5, r0
 200:	0e3a0b3b 		r17, r26, r1
 204:	0b491302 		r26, r9, r2
 208:	0600000d 	neg	r16, r0
 20c:	34000308 	rsubik	r0, r0, 776
 210:	3a0b3b0b 	addikc	r16, r11, 15115
 214:	49130206 		r8, r19, r0
 218:	00000e34 		r0, r0, r1
 21c:	00030e3a 		r0, r3, r1
 220:	0b3b0b49 		r25, r27, r1
 224:	13020600 		r24, r2, r0
 228:	000f0b01 		r0, r15, r1
 22c:	11011201 		r8, r1, r2
 230:	01130000 	add	r8, r19, r0
 234:	101d0131 		r0, r29, r0
 238:	13520155 		r26, r18, r0
 23c:	06580b59 	neg	r18, r24
 240:	0b011300 		r24, r1, r2
 244:	00111d01 		r0, r17, r3
 248:	31135201 	addik	r8, r19, 20993
 24c:	5506580b 		r8, r6, r11
 250:	590b0000 	fadd	r8, r11, r0
 254:	12260049 		r17, r6, r0
 258:	13000013 		r24, r0, r0
 25c:	0500030e 	neg	r8, r0
 260:	3a0b3b0b 	addikc	r16, r11, 15115
 264:	4913020a 		r8, r19, r0
 268:	00001434 		r0, r0, r2
 26c:	00030e3a 		r0, r3, r1
 270:	0b3b0b49 		r25, r27, r1
 274:	13020a00 		r24, r2, r1
 278:	00150101 		r0, r21, r0
 27c:	49130113 		r8, r19, r0
 280:	00001621 		r0, r0, r2
 284:	0049132f 		r2, r9, r2
 288:	0b000017 		r24, r0, r0
 28c:	34000308 	rsubik	r0, r0, 776
 290:	3a0b3b0b 	addikc	r16, r11, 15115
 294:	4913020a 		r8, r19, r0
 298:	0000180a 		r0, r0, r3
 29c:	0003083a 		r0, r3, r1
 2a0:	0b3b0b11 		r25, r27, r1
 2a4:	01000019 		r8, r0, r0
 2a8:	0b015506 		r24, r1, r10
 2ac:	00001a18 		r0, r0, r3
 2b0:	0000001b 		r0, r0, r0
 2b4:	3400030e 	rsubik	r0, r0, 782
 2b8:	3a0b3b0b 	addikc	r16, r11, 15115
 2bc:	49130000 	idiv	r8, r19, r0
 2c0:	00011101 		r0, r1, r2
 2c4:	250e130b 	rsubi	r8, r14, 4875
 2c8:	030e1b0e 		r24, r14, r3
 2cc:	11015201 		r8, r1, r10
 2d0:	55061006 		r8, r6, r2
 2d4:	00000216 		r0, r0, r0
 2d8:	00030e3a 		r0, r3, r1
 2dc:	0b3b0b49 		r25, r27, r1
 2e0:	13000003 		r24, r0, r0
 2e4:	24000b0b 	rsubi	r0, r0, 2827
 2e8:	3e0b030e 	rsubikc	r16, r11, 782
 2ec:	00000424 		r0, r0, r0
 2f0:	000b0b3e 		r0, r11, r1
 2f4:	0b030800 	addc	r24, r3, r1
 2f8:	00052e01 		r0, r5, r5
 2fc:	3f0c030e 	rsubikc	r24, r12, 782
 300:	3a0b3b0b 	addikc	r16, r11, 15115
 304:	270c4913 	rsubi	r24, r12, 18707
 308:	11011201 		r8, r1, r2
 30c:	40060113 		r0, r6, r0
 310:	00000634 		r0, r0, r0
 314:	0003083a 		r0, r3, r1
 318:	0b3b0b49 		r25, r27, r1
 31c:	13020600 		r24, r2, r0
 320:	00073400 		r0, r7, r6
 324:	03083a0b 		r24, r8, r7
 328:	3b0b4913 	addikc	r24, r11, 18707
 32c:	020a0000 	add	r16, r10, r0
 330:	08350049 		r1, r21, r0
 334:	13000009 		r24, r0, r0
 338:	01014913 		r8, r1, r9
 33c:	01130000 	add	r8, r19, r0
 340:	0a210049 		r17, r1, r0
 344:	132f0b00 		r25, r15, r1
 348:	000b3400 		r0, r11, r6
 34c:	030e3a0b 		r24, r14, r7
 350:	3b0b4913 	addikc	r24, r11, 18707
 354:	00000c26 		r0, r0, r1
 358:	00491300 		r2, r9, r2
 35c:	00000111 		r0, r0, r0
 360:	00100611 		r0, r16, r0
 364:	01120103 		r8, r18, r0
 368:	081b0825 		r0, r27, r1
 36c:	08130500 		r0, r19, r0
 370:	00000111 		r0, r0, r0
 374:	00100611 		r0, r16, r0
 378:	01120103 		r8, r18, r0
 37c:	081b0825 		r0, r27, r1
 380:	08130500 		r0, r19, r0
 384:	00000111 		r0, r0, r0
 388:	00100611 		r0, r16, r0
 38c:	01120103 		r8, r18, r0
 390:	081b0825 		r0, r27, r1
 394:	08130500 		r0, r19, r0
 398:	00000111 		r0, r0, r0
 39c:	00100611 		r0, r16, r0
 3a0:	01120103 		r8, r18, r0
 3a4:	081b0825 		r0, r27, r1
 3a8:	08130500 		r0, r19, r0
 3ac:	00000111 		r0, r0, r0
 3b0:	00100611 		r0, r16, r0
 3b4:	01120103 		r8, r18, r0
 3b8:	081b0825 		r0, r27, r1
 3bc:	08130500 		r0, r19, r0
 3c0:	00000111 		r0, r0, r0
 3c4:	01250e13 		r9, r5, r1
 3c8:	0b030e11 		r24, r3, r1
 3cc:	01120110 		r8, r18, r0
 3d0:	06000002 	neg	r16, r0
 3d4:	24000b0b 	rsubi	r0, r0, 2827
 3d8:	3e0b030e 	rsubikc	r16, r11, 782
 3dc:	00000324 		r0, r0, r0
 3e0:	000b0b3e 		r0, r11, r1
 3e4:	0b030800 	addc	r24, r3, r1
 3e8:	00041600 		r0, r4, r2
 3ec:	030e3a0b 		r24, r14, r7
 3f0:	3b0b4913 	addikc	r24, r11, 18707
 3f4:	00000516 		r0, r0, r0
 3f8:	00030e3a 		r0, r3, r1
 3fc:	0b3b0549 		r25, r27, r0
 400:	13000006 		r24, r0, r0
 404:	17010b0b 		r24, r1, r1
 408:	3a0b3b0b 	addikc	r16, r11, 15115
 40c:	01130000 	add	r8, r19, r0
 410:	070d0003 	neg	r24, r13
 414:	0e3a0b3b 		r17, r26, r1
 418:	0b491300 		r26, r9, r2
 41c:	00080101 		r0, r8, r0
 420:	49130113 		r8, r19, r0
 424:	00000921 		r0, r0, r1
 428:	0049132f 		r2, r9, r2
 42c:	0b00000a 		r24, r0, r0
 430:	13010b0b 		r24, r1, r1
 434:	3a0b3b0b 	addikc	r16, r11, 15115
 438:	01130000 	add	r8, r19, r0
 43c:	0b0d0003 		r24, r13, r0
 440:	0e3a0b3b 		r17, r26, r1
 444:	0b491338 		r26, r9, r2
 448:	0a00000c 		r16, r0, r0
 44c:	0f000b0b 		r24, r0, r1
 450:	00000d13 		r0, r0, r1
 454:	01030e0b 		r8, r3, r1
 458:	0b3a0b3b 		r25, r26, r1
 45c:	0b011300 		r24, r1, r2
 460:	000e0d00 		r0, r14, r1
 464:	03083a0b 		r24, r8, r7
 468:	3b0b4913 	addikc	r24, r11, 18707
 46c:	380a0000 	addikc	r0, r10, 0
 470:	0f0f000b 		r24, r15, r0
 474:	0b491300 		r26, r9, r2
 478:	00101301 		r0, r16, r2
 47c:	030e0b05 		r24, r14, r1
 480:	3a0b3b0b 	addikc	r16, r11, 15115
 484:	01130000 	add	r8, r19, r0
 488:	11150027 		r8, r21, r0
 48c:	0c000012 		r0, r0, r0
 490:	1301030e 		r24, r1, r0
 494:	0b0b3a0b 		r24, r11, r7
 498:	3b050113 	addikc	r24, r5, 275
 49c:	0000130d 		r0, r0, r2
 4a0:	00030e3a 		r0, r3, r1
 4a4:	0b3b0549 		r25, r27, r0
 4a8:	13380a00 		r25, r24, r1
 4ac:	00140d00 		r0, r20, r1
 4b0:	03083a0b 		r24, r8, r7
 4b4:	3b054913 	addikc	r24, r5, 18707
 4b8:	380a0000 	addikc	r0, r10, 0
 4bc:	15150127 		r8, r21, r0
 4c0:	0c491301 		r2, r9, r2
 4c4:	13000016 		r24, r0, r0
 4c8:	05004913 	neg	r8, r0
 4cc:	00001726 		r0, r0, r2
 4d0:	00491300 		r2, r9, r2
 4d4:	00181501 		r0, r24, r2
 4d8:	270c0113 	rsubi	r24, r12, 275
 4dc:	0000192e 		r0, r0, r3
 4e0:	013f0c03 		r9, r31, r1
 4e4:	0e3a0b3b 		r17, r26, r1
 4e8:	0b270c11 		r25, r7, r1
 4ec:	01120140 		r8, r18, r0
 4f0:	06011300 	neg	r16, r1
 4f4:	001a0500 		r0, r26, r0
 4f8:	030e3a0b 		r24, r14, r7
 4fc:	3b0b4913 	addikc	r24, r11, 18707
 500:	02060000 	add	r16, r6, r0
 504:	1b340003 		r25, r20, r0
 508:	0e3a0b3b 		r17, r26, r1
 50c:	0549133f 	neg	r10, r9
 510:	0c3c0c00 		r1, r28, r1
 514:	00000111 		r0, r0, r0
 518:	01250e13 		r9, r5, r1
 51c:	0b030e11 		r24, r3, r1
 520:	01120110 		r8, r18, r0
 524:	06000002 	neg	r16, r0
 528:	24000b0b 	rsubi	r0, r0, 2827
 52c:	3e0b030e 	rsubikc	r16, r11, 782
 530:	00000324 		r0, r0, r0
 534:	000b0b3e 		r0, r11, r1
 538:	0b030800 	addc	r24, r3, r1
 53c:	00041600 		r0, r4, r2
 540:	030e3a0b 		r24, r14, r7
 544:	3b0b4913 	addikc	r24, r11, 18707
 548:	00000516 		r0, r0, r0
 54c:	00030e3a 		r0, r3, r1
 550:	0b3b0549 		r25, r27, r0
 554:	13000006 		r24, r0, r0
 558:	17010b0b 		r24, r1, r1
 55c:	3a0b3b0b 	addikc	r16, r11, 15115
 560:	01130000 	add	r8, r19, r0
 564:	070d0003 	neg	r24, r13
 568:	0e3a0b3b 		r17, r26, r1
 56c:	0b491300 		r26, r9, r2
 570:	00080101 		r0, r8, r0
 574:	49130113 		r8, r19, r0
 578:	00000921 		r0, r0, r1
 57c:	0049132f 		r2, r9, r2
 580:	0b00000a 		r24, r0, r0
 584:	13010b0b 		r24, r1, r1
 588:	3a0b3b0b 	addikc	r16, r11, 15115
 58c:	01130000 	add	r8, r19, r0
 590:	0b0d0003 		r24, r13, r0
 594:	0e3a0b3b 		r17, r26, r1
 598:	0b491338 		r26, r9, r2
 59c:	0a00000c 		r16, r0, r0
 5a0:	0f000b0b 		r24, r0, r1
 5a4:	00000d13 		r0, r0, r1
 5a8:	01030e0b 		r8, r3, r1
 5ac:	0b3a0b3b 		r25, r26, r1
 5b0:	0b011300 		r24, r1, r2
 5b4:	000e0d00 		r0, r14, r1
 5b8:	03083a0b 		r24, r8, r7
 5bc:	3b0b4913 	addikc	r24, r11, 18707
 5c0:	380a0000 	addikc	r0, r10, 0
 5c4:	0f0f000b 		r24, r15, r0
 5c8:	0b491300 		r26, r9, r2
 5cc:	00101301 		r0, r16, r2
 5d0:	030e0b05 		r24, r14, r1
 5d4:	3a0b3b0b 	addikc	r16, r11, 15115
 5d8:	01130000 	add	r8, r19, r0
 5dc:	11150027 		r8, r21, r0
 5e0:	0c000012 		r0, r0, r0
 5e4:	1301030e 		r24, r1, r0
 5e8:	0b0b3a0b 		r24, r11, r7
 5ec:	3b050113 	addikc	r24, r5, 275
 5f0:	0000130d 		r0, r0, r2
 5f4:	00030e3a 		r0, r3, r1
 5f8:	0b3b0549 		r25, r27, r0
 5fc:	13380a00 		r25, r24, r1
 600:	00140d00 		r0, r20, r1
 604:	03083a0b 		r24, r8, r7
 608:	3b054913 	addikc	r24, r5, 18707
 60c:	380a0000 	addikc	r0, r10, 0
 610:	15150127 		r8, r21, r0
 614:	0c491301 		r2, r9, r2
 618:	13000016 		r24, r0, r0
 61c:	05004913 	neg	r8, r0
 620:	00001726 		r0, r0, r2
 624:	00491300 		r2, r9, r2
 628:	00181501 		r0, r24, r2
 62c:	270c0113 	rsubi	r24, r12, 275
 630:	00001934 		r0, r0, r3
 634:	00030e3a 		r0, r3, r1
 638:	0b3b0549 		r25, r27, r0
 63c:	133f0c3c 		r25, r31, r1
 640:	0c00001a 		r0, r0, r0
 644:	3400030e 	rsubik	r0, r0, 782
 648:	3a0b3b0b 	addikc	r16, r11, 15115
 64c:	4913020a 		r8, r19, r0
 650:	00001b34 		r0, r0, r3
 654:	00030e3a 		r0, r3, r1
 658:	0b3b0549 		r25, r27, r0
 65c:	133f0c02 		r25, r31, r1
 660:	0a000000 	addc	r16, r0, r0
 664:	01110125 		r8, r17, r0
 668:	0e130b03 		r16, r19, r1
 66c:	0e110112 		r16, r17, r0
 670:	01100600 		r8, r16, r0
 674:	00022400 		r0, r2, r4
 678:	0b0b3e0b 		r24, r11, r7
 67c:	030e0000 	add	r24, r14, r0
 680:	0324000b 		r25, r4, r0
 684:	0b3e0b03 		r25, r30, r1
 688:	08000004 		r0, r0, r0
 68c:	1600030e 		r16, r0, r0
 690:	3a0b3b0b 	addikc	r16, r11, 15115
 694:	49130000 	idiv	r8, r19, r0
 698:	05160003 	neg	r8, r22
 69c:	0e3a0b3b 		r17, r26, r1
 6a0:	05491300 	neg	r10, r9
 6a4:	00061701 		r0, r6, r2
 6a8:	0b0b3a0b 		r24, r11, r7
 6ac:	3b0b0113 	addikc	r24, r11, 275
 6b0:	0000070d 		r0, r0, r0
 6b4:	00030e3a 		r0, r3, r1
 6b8:	0b3b0b49 		r25, r27, r1
 6bc:	13000008 		r24, r0, r0
 6c0:	01014913 		r8, r1, r9
 6c4:	01130000 	add	r8, r19, r0
 6c8:	09210049 		r9, r1, r0
 6cc:	132f0b00 		r25, r15, r1
 6d0:	000a1301 		r0, r10, r2
 6d4:	0b0b3a0b 		r24, r11, r7
 6d8:	3b0b0113 	addikc	r24, r11, 275
 6dc:	00000b0d 		r0, r0, r1
 6e0:	00030e3a 		r0, r3, r1
 6e4:	0b3b0b49 		r25, r27, r1
 6e8:	13380a00 		r25, r24, r1
 6ec:	000c0f00 		r0, r12, r1
 6f0:	0b0b0000 	addc	r24, r11, r0
 6f4:	0d130103 		r8, r19, r0
 6f8:	0e0b0b3a 		r16, r11, r1
 6fc:	0b3b0b01 		r25, r27, r1
 700:	1300000e 		r24, r0, r0
 704:	0d000308 		r8, r0, r0
 708:	3a0b3b0b 	addikc	r16, r11, 15115
 70c:	4913380a 		r8, r19, r7
 710:	00000f0f 		r0, r0, r1
 714:	000b0b49 		r0, r11, r1
 718:	13000010 		r24, r0, r0
 71c:	1301030e 		r24, r1, r0
 720:	0b053a0b 		r24, r5, r7
 724:	3b0b0113 	addikc	r24, r11, 275
 728:	00001115 		r0, r0, r2
 72c:	00270c00 		r1, r7, r1
 730:	00121301 		r0, r18, r2
 734:	030e0b0b 		r24, r14, r1
 738:	3a0b3b05 	addikc	r16, r11, 15109
 73c:	01130000 	add	r8, r19, r0
 740:	130d0003 		r24, r13, r0
 744:	0e3a0b3b 		r17, r26, r1
 748:	05491338 	neg	r10, r9
 74c:	0a000014 		r16, r0, r0
 750:	0d000308 		r8, r0, r0
 754:	3a0b3b05 	addikc	r16, r11, 15109
 758:	4913380a 		r8, r19, r7
 75c:	00001515 		r0, r0, r2
 760:	01270c49 		r9, r7, r1
 764:	13011300 		r24, r1, r2
 768:	00160500 		r0, r22, r0
 76c:	49130000 	idiv	r8, r19, r0
 770:	17260049 		r25, r6, r0
 774:	13000018 		r24, r0, r0
 778:	1501270c 		r8, r1, r4
 77c:	01130000 	add	r8, r19, r0
 780:	192e013f 		r9, r14, r0
 784:	0c030e3a 		r0, r3, r1
 788:	0b3b0b27 		r25, r27, r1
 78c:	0c110112 		r0, r17, r0
 790:	01400601 		r10, r0, r0
 794:	1300001a 		r24, r0, r0
 798:	0500030e 	neg	r8, r0
 79c:	3a0b3b0b 	addikc	r16, r11, 15115
 7a0:	49130206 		r8, r19, r0
 7a4:	00001b05 		r0, r0, r3
 7a8:	0003083a 		r0, r3, r1
 7ac:	0b3b0b49 		r25, r27, r1
 7b0:	13020600 		r24, r2, r0
 7b4:	001c3400 		r0, r28, r6
 7b8:	03083a0b 		r24, r8, r7
 7bc:	3b0b4913 	addikc	r24, r11, 18707
 7c0:	02060000 	add	r16, r6, r0
 7c4:	1d340003 		r9, r20, r0
 7c8:	0e3a0b3b 		r17, r26, r1
 7cc:	0b491302 		r26, r9, r2
 7d0:	0600001e 	neg	r16, r0
 7d4:	0a00030e 		r16, r0, r0
 7d8:	3a0b3b0b 	addikc	r16, r11, 15115
 7dc:	00001f0b 		r0, r0, r3
 7e0:	01550600 		r10, r21, r0
 7e4:	00203400 		r1, r0, r6
 7e8:	030e3a0b 		r24, r14, r7
 7ec:	3b054913 	addikc	r24, r5, 18707
 7f0:	3f0c3c0c 	rsubikc	r24, r12, 15372
 7f4:	00000001 		r0, r0, r0
 7f8:	11001006 		r8, r0, r2
 7fc:	55060308 		r8, r6, r0
 800:	1b082508 		r24, r8, r4
 804:	13050000 	addk	r24, r5, r0
 808:	Address 0x00000808 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000003c 		r0, r0, r0
   4:	00020000 	add	r0, r2, r0
   8:	00000400 		r0, r0, r0
   c:	
Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 		r31, r31, r31
   4:	
Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 		r0, r0, r0
   4:	ffffffff 		r31, r31, r31
   8:	0100017c 		r8, r0, r0
   c:	0f0c0100 		r24, r12, r0
  10:	0000000c 		r0, r0, r0
  14:	
Disassembly of section .debug_loc:

00000000 <.debug_loc>:
   0:	0000001c 		r0, r0, r0
   4:	00000020 		r0, r0, r0
   8:	00057300 		r0, r5, r14
   c:	321a9f00 	addik	r16, r26, -24832
  10:	00002000 	add	r0, r0, r4
  14:	00002c00 		r0, r0, r5
  18:	01530000 	add	r10, r19, r0
  1c:	
Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c6f6e67 	necaget	r3, rfsl7
   4:	206c6f6e 	addi	r3, r12, 28526
   8:	6720696e 	bsrli	r25, r0, 14
   c:	74007561 		r0, r0, r14
  10:	72745f73 		r19, r20, r11
  14:	656e6400 	bslli	r11, r14, 0
  18:	75617274 		r11, r1, r14
  1c:	5f707574 		r27, r16, r14
  20:	00756172 		r3, r21, r12
  24:	745f6765 		r2, r31, r12
  28:	74006c6f 		r0, r0, r13
  2c:	6e67206c 	cget	r19, rfsl12
  30:	6f6e6720 	necget	r27, rfsl0
  34:	756e7369 		r11, r14, r14
  38:	676e6564 	bslli	r27, r14, 4
  3c:	20696e74 	addi	r3, r9, 28276
  40:	00666c6f 		r3, r6, r13
  44:	61740075 	muli	r11, r20, 117
  48:	6172745f 	muli	r11, r18, 29791
  4c:	72656164 		r19, r5, r12
  50:	00435055 		r2, r3, r10
  54:	5f564552 		r26, r22, r8
  58:	00756e73 		r3, r21, r13
  5c:	69676e65 		r11, r7, r13
  60:	64206368 	bsrai	r1, r0, 8
  64:	61720066 	muli	r11, r18, 102
  68:	6c616700 	necget	r3, rfsl0
  6c:	75617274 		r11, r1, r14
  70:	5f776169 		r27, r23, r12
  74:	745f7478 		r2, r31, r14
  78:	5f646f6e 		r27, r4, r13
  7c:	6500646f 	bslli	r8, r0, 15
  80:	75626c65 		r11, r2, r13
  84:	00756172 		r3, r21, r12
  88:	745f7772 		r2, r31, r14
  8c:	69746500 		r11, r20, r12
  90:	75617274 		r11, r1, r14
  94:	5f776169 		r27, r23, r12
  98:	745f7278 		r2, r31, r14
  9c:	5f726561 		r27, r18, r12
  a0:	64790073 	bsrli	r3, r25, 19
  a4:	686f7274 		r3, r15, r14
  a8:	20756e73 	addi	r3, r21, 28275
  ac:	69676e65 		r11, r7, r13
  b0:	6420696e 	bsrli	r1, r0, 14
  b4:	74007362 		r0, r0, r14
  b8:	5f75696e 		r27, r21, r13
  bc:	74385f74 		r1, r24, r11
  c0:	00435055 		r2, r3, r10
  c4:	5f434849 		r26, r3, r9
  c8:	5000474e 		r0, r0, r8
  cc:	55204320 		r9, r0, r8
  d0:	342e362e 	rsubik	r1, r14, 13870
  d4:	32203230 	addik	r17, r0, 12848
  d8:	31313130 	addik	r9, r17, 12592
  dc:	31382028 	addik	r9, r24, 8232
  e0:	58696c69 		r3, r9, r13
  e4:	6e782031 	cget	r19, rfsl1
  e8:	342e3120 	rsubik	r1, r14, 12576
  ec:	4275696c 		r19, r21, r13
  f0:	64204544 	bslli	r1, r0, 4
  f4:	4b5f502e 		r26, r31, r10
  f8:	31352032 	addik	r9, r21, 8242
  fc:	32204d61 	addik	r17, r0, 19809
 100:	72203230 		r17, r0, r6
 104:	31322900 	addik	r9, r18, 10496
 108:	73625f75 		r27, r2, r11
 10c:	696e7433 		r11, r14, r14
 110:	325f7400 	addik	r18, r31, 29696
 114:	73686f72 		r27, r8, r13
 118:	7420696e 		r1, r0, r13
 11c:	74002e2e 		r0, r0, r5
 120:	2f2e2e2f 	rsubic	r25, r14, 11823
 124:	6c69622f 	ncget	r3, rfsl15
 128:	73656372 		r27, r5, r12
 12c:	6574626c 	bsrai	r11, r20, 12
 130:	617a652f 	muli	r11, r26, 25903
 134:	73625f75 		r27, r2, r11
 138:	6172742e 	muli	r11, r18, 29742
 13c:	63002f68 	muli	r24, r0, 12136
 140:	6f6d652f 	necget	r27, rfsl15
 144:	6c75636b 	ncget	r3, rfsl11
 148:	79746967 		r11, r20, r13
 14c:	65722f44 		r11, r18, r5
 150:	65736b74 	bsrai	r11, r19, 20
 154:	6f702f73 	ecaget	r27, rfsl3
 158:	65637265 	bsrai	r11, r3, 5
 15c:	74626c61 		r3, r2, r13
 160:	7a655f73 		r19, r5, r11
 164:	74645f31 		r3, r4, r11
 168:	5f36382f 		r25, r22, r7
 16c:	73772f61 		r27, r23, r5
 170:	7070732f 		r3, r16, r14
 174:	74657374 		r3, r5, r14
 178:	5f737065 		r27, r19, r14
 17c:	6369616c 	muli	r27, r9, 24940
 180:	5f696e73 		r27, r9, r13
 184:	74727563 		r3, r18, r14
 188:	74696f6e 		r3, r9, r13
 18c:	73007374 		r24, r0, r14
 190:	72696e67 		r19, r9, r13
 194:	00707269 		r3, r16, r14
 198:	6e746900 	ncaget	r19, rfsl0
 19c:	70616463 		r3, r1, r12
 1a0:	68617200 		r3, r1, r14
 1a4:	655f7072 	bsrli	r10, r31, 18
 1a8:	696e7466 		r11, r14, r14
 1ac:	00666f72 		r3, r6, r13
 1b0:	6d617400 	tnecget	r11, rfsl0
 1b4:	7072696e 		r3, r18, r13
 1b8:	745f6275 		r2, r31, r12
 1bc:	6600655f 	bslli	r16, r0, 31
 1c0:	73707269 		r27, r16, r14
 1c4:	6e746600 	necget	r19, rfsl0
 1c8:	7072696e 		r3, r18, r13
 1cc:	74007769 		r0, r0, r14
 1d0:	64746800 	bsrli	r3, r20, 0
 1d4:	6c657462 	tnecget	r3, rfsl2
 1d8:	61736500 	muli	r11, r19, 25856
 1dc:	7072696e 		r3, r18, r13
 1e0:	7473006f 		r3, r19, r0
 1e4:	75746279 		r11, r20, r12
 1e8:	7465002e 		r3, r5, r0
 1ec:	2e2f2e2e 	rsubic	r17, r15, 11822
 1f0:	2f6c6962 	rsubic	r27, r12, 26978
 1f4:	2f655f6c 	rsubic	r27, r5, 24428
 1f8:	69622f65 		r11, r2, r5
 1fc:	5f707269 		r27, r16, r14
 200:	6e74662e 	necget	r19, rfsl14
 204:	63007661 	muli	r24, r0, 30305
 208:	7267006d 		r19, r7, r0
 20c:	61696e2e 	muli	r11, r9, 28206
 210:	63007362 	muli	r24, r0, 29538
 214:	5f696e74 		r27, r9, r13
 218:	33325f74 	addik	r25, r18, 24436
 21c:	006d6169 		r3, r13, r12
 220:	6e007362 	tncget	r16, rfsl2
 224:	5f75696e 		r27, r21, r13
 228:	7436345f 		r1, r22, r6
 22c:	74007362 		r0, r0, r14
 230:	5f696e74 		r27, r9, r13
 234:	36345f74 	rsubik	r17, r20, 24436
 238:	005f6473 		r2, r31, r12
 23c:	6f5f6861 	ncaget	r26, rfsl1
 240:	6e646c65 	necaget	r19, rfsl5
 244:	005f7369 		r2, r31, r14
 248:	7a65005f 		r19, r5, r0
 24c:	72616e64 		r19, r1, r13
 250:	3438005f 	rsubik	r1, r24, 95
 254:	656d6572 	bslli	r11, r13, 18
 258:	67656e63 		r27, r5, r13
 25c:	79005f61 		r8, r0, r11
 260:	74657869 		r3, r5, r15
 264:	7430002f 		r1, r16, r0
 268:	676e752f 	bslli	r27, r14, 15
 26c:	6d625f67 	tneaget	r11, rfsl7
 270:	6e752f2f 	ecaget	r19, rfsl15
 274:	7372632f 		r27, r18, r12
 278:	6e65776c 	tnecget	r19, rfsl12
 27c:	69622f6e 		r11, r2, r5
 280:	65776c69 	bslli	r11, r23, 9
 284:	622f6c69 	muli	r17, r15, 27753
 288:	62632f73 	muli	r19, r3, 12147
 28c:	74646c69 		r3, r4, r13
 290:	622f6578 	muli	r17, r15, 25976
 294:	69742e63 		r11, r20, r5
 298:	005f7763 		r2, r31, r14
 29c:	72746f6d 		r19, r20, r13
 2a0:	625f7374 	muli	r18, r31, 29556
 2a4:	61746500 	muli	r11, r20, 25856
 2a8:	5f776373 		r27, r23, r12
 2ac:	72746f6d 		r19, r20, r13
 2b0:	62735f73 	muli	r19, r19, 24435
 2b4:	74617465 		r3, r1, r14
 2b8:	005f6c62 		r2, r31, r13
 2bc:	6673697a 	bsrli	r19, r19, 26
 2c0:	65005f6d 		r8, r0, r11
 2c4:	6272746f 	muli	r19, r18, 29807
 2c8:	77635f73 		r27, r3, r11
 2cc:	74617465 		r3, r1, r14
 2d0:	005f7763 		r2, r31, r14
 2d4:	746f6d62 		r3, r15, r13
 2d8:	5f737461 		r27, r19, r14
 2dc:	7465005f 		r3, r5, r0
 2e0:	5f746d5f 		r27, r20, r13
 2e4:	73656300 		r27, r5, r12
 2e8:	5f756275 		r27, r21, r12
 2ec:	66005f62 		r16, r0, r11
 2f0:	61736500 	muli	r11, r19, 25856
 2f4:	5f5f746d 		r26, r31, r14
 2f8:	5f686f75 		r27, r8, r13
 2fc:	72005f5f 		r16, r0, r11
 300:	7366005f 		r27, r6, r0
 304:	6f6e5f65 	tneaget	r27, rfsl5
 308:	7869745f 		r3, r9, r14
 30c:	61726773 	muli	r11, r18, 26483
 310:	005f636f 		r2, r31, r12
 314:	6f6b6965 	ncaget	r27, rfsl5
 318:	005f5f73 		r2, r31, r11
 31c:	676c7565 	bslli	r27, r12, 5
 320:	005f6d70 		r2, r31, r13
 324:	72656300 		r19, r5, r12
 328:	5f666c61 		r27, r6, r13
 32c:	6773005f 	bsrli	r27, r19, 31
 330:	69735f63 		r11, r19, r11
 334:	7861005f 		r3, r1, r0
 338:	626c6b73 	muli	r19, r12, 27507
 33c:	697a6500 		r11, r26, r12
 340:	5f637674 		r27, r3, r14
 344:	62756600 	muli	r19, r21, 26112
 348:	5f6f6666 		r27, r15, r12
 34c:	73657400 		r27, r5, r14
 350:	5f6d6273 		r27, r13, r12
 354:	72746f77 		r19, r20, r13
 358:	63735f73 	muli	r27, r19, 24435
 35c:	74617465 		r3, r1, r14
 360:	005f6d62 		r2, r31, r13
 364:	726c656e 		r19, r12, r12
 368:	5f737461 		r27, r19, r14
 36c:	7465005f 		r3, r5, r0
 370:	666e6172 	bsrli	r19, r14, 18
 374:	6773005f 	bsrli	r27, r19, 31
 378:	666e7300 	bsrai	r19, r14, 0
 37c:	5f736967 		r27, r19, r13
 380:	6e005f66 	tneaget	r16, rfsl6
 384:	6c6f636b 	ncget	r3, rfsl11
 388:	5f74005f 		r27, r20, r0
 38c:	42696769 		r19, r9, r12
 390:	6e74005f 	get	r19, rfsl15
 394:	72657375 		r19, r5, r14
 398:	6c745f6b 	tneaget	r3, rfsl11
 39c:	005f5f74 		r2, r31, r11
 3a0:	6d005f6f 	tneaget	r8, rfsl15
 3a4:	6e5f6578 	necget	r18, rfsl8
 3a8:	69745f61 		r11, r20, r11
 3ac:	7267735f 		r19, r7, r14
 3b0:	70747200 		r3, r20, r14
 3b4:	5f5f7763 		r26, r31, r14
 3b8:	6862005f 		r3, r2, r0
 3bc:	63757272 	muli	r27, r21, 29298
 3c0:	656e745f 	bslli	r11, r14, 31
 3c4:	63617465 	muli	r27, r1, 29797
 3c8:	676f7279 	bsrai	r27, r15, 25
 3cc:	005f6376 		r2, r31, r12
 3d0:	746c656e 		r3, r12, r12
 3d4:	005f7234 		r2, r31, r14
 3d8:	38005f6e 	addikc	r0, r0, 24430
 3dc:	696f6273 		r11, r15, r12
 3e0:	005f7369 		r2, r31, r14
 3e4:	676e616c 	bsrli	r27, r14, 12
 3e8:	5f627566 		r27, r2, r14
 3ec:	005f6173 		r2, r31, r12
 3f0:	6374696d 	muli	r27, r20, 26989
 3f4:	655f6275 	bsrai	r10, r31, 21
 3f8:	66005f72 		r16, r0, r11
 3fc:	6573756c 	bslli	r11, r19, 12
 400:	74005f5f 		r0, r0, r11
 404:	77636800 		r27, r3, r13
 408:	77696e74 		r27, r9, r13
 40c:	5f74005f 		r27, r20, r0
 410:	6c6f636b 	ncget	r3, rfsl11
 414:	005f666c 		r2, r31, r12
 418:	61677332 	muli	r11, r7, 29490
 41c:	005f5f74 		r2, r31, r11
 420:	6d5f7965 	tncaget	r10, rfsl5
 424:	6172005f 	muli	r11, r18, 95
 428:	6d697363 	tncget	r11, rfsl3
 42c:	005f5f74 		r2, r31, r11
 430:	6d5f6d6f 	necaget	r10, rfsl15
 434:	6e005f61 	tneaget	r16, rfsl1
 438:	74657869 		r3, r5, r15
 43c:	74005f5f 		r0, r0, r11
 440:	73646964 		r27, r4, r13
 444:	696e6974 		r11, r14, r13
 448:	005f6761 		r2, r31, r12
 44c:	6d6d615f 	ncget	r11, rfsl15
 450:	7369676e 		r27, r9, r12
 454:	67616d00 	bslli	r27, r1, 0
 458:	5f667265 		r27, r6, r14
 45c:	656c6973 	bsrli	r11, r12, 19
 460:	74005f4c 		r0, r0, r11
 464:	4f434b5f 	ncagetd	r26, r9
 468:	52454355 		r18, r5, r8
 46c:	52534956 		r18, r19, r9
 470:	455f5400 	bsll	r10, r31, r10
 474:	5f696f62 		r27, r9, r13
 478:	73005f5f 		r24, r0, r11
 47c:	746d5f79 		r3, r13, r11
 480:	64617900 	bsrli	r3, r1, 0
 484:	5f5f7362 		r26, r31, r14
 488:	7566005f 		r11, r6, r0
 48c:	5f46494c 		r26, r6, r9
 490:	45005f6d 		r8, r0, r11
 494:	62737461 	muli	r19, r19, 29793
 498:	74655f74 		r3, r5, r11
 49c:	005f5f73 		r2, r31, r11
 4a0:	46494c45 	bsll	r18, r9, r9
 4a4:	005f6d62 		r2, r31, r13
 4a8:	73746174 		r27, r20, r12
 4ac:	65005f72 		r8, r0, r11
 4b0:	616e645f 	muli	r11, r14, 25695
 4b4:	6e657874 	tncaget	r19, rfsl4
 4b8:	005f6d62 		r2, r31, r13
 4bc:	6c656e5f 	necaget	r3, rfsl15
 4c0:	73746174 		r27, r20, r12
 4c4:	65005f69 		r8, r0, r11
 4c8:	6e63005f 	get	r19, rfsl15
 4cc:	696e6400 		r11, r14, r12
 4d0:	5f637572 		r27, r3, r14
 4d4:	72656e74 		r19, r5, r13
 4d8:	5f6c6f63 		r27, r12, r13
 4dc:	616c6500 	muli	r11, r12, 25856
 4e0:	5f5f636c 		r26, r31, r12
 4e4:	65616e75 		r11, r1, r13
 4e8:	70005f6d 		r0, r0, r11
 4ec:	61787764 	muli	r11, r24, 30564
 4f0:	73005f73 		r24, r0, r11
 4f4:	65656400 	bslli	r11, r5, 0
 4f8:	5f5f636f 		r26, r31, r12
 4fc:	756e7400 		r11, r14, r14
 500:	5f5f7661 		r26, r31, r14
 504:	6c756500 	necget	r3, rfsl0
 508:	5f736565 		r27, r19, r12
 50c:	6b005f66 		r24, r0, r11
 510:	706f735f 		r3, r15, r14
 514:	74005f65 		r0, r0, r11
 518:	72726e6f 		r19, r18, r13
 51c:	005f5f74 		r2, r31, r11
 520:	6d5f6d69 	necaget	r10, rfsl9
 524:	6e005f6d 	tneaget	r16, rfsl13
 528:	756c7400 		r11, r12, r14
 52c:	5f737472 		r27, r19, r14
 530:	746f6b5f 		r3, r15, r13
 534:	6c617374 	tncget	r3, rfsl4
 538:	005f666e 		r2, r31, r12
 53c:	74797065 		r3, r25, r14
 540:	73005f6d 		r24, r0, r11
 544:	6973635f 		r11, r19, r12
 548:	7265656e 		r19, r5, r12
 54c:	74005f61 		r0, r0, r11
 550:	6464005f 	bsrli	r3, r4, 31
 554:	5f554c6f 		r26, r21, r9
 558:	6e67005f 	get	r19, rfsl15
 55c:	67657464 	bslli	r27, r5, 4
 560:	6174655f 	muli	r11, r20, 25951
 564:	65727200 	bsrai	r11, r18, 0
 568:	5f676c6f 		r27, r7, r13
 56c:	62616c5f 	muli	r19, r1, 27743
 570:	696d7075 		r11, r13, r14
 574:	72655f70 		r19, r5, r11
 578:	74720063 		r3, r18, r0
 57c:	6f646500 	necget	r27, rfsl0
 580:	5f66696c 		r27, r6, r13
 584:	65005f77 		r8, r0, r11
 588:	6473005f 	bsrli	r3, r19, 31
 58c:	5f746d5f 		r27, r20, r13
 590:	77646179 		r27, r4, r12
 594:	005f676c 		r2, r31, r12
 598:	7565005f 		r11, r5, r0
 59c:	6c363461 	tecget	r1, rfsl1
 5a0:	5f627566 		r27, r2, r14
 5a4:	005f7369 		r2, r31, r14
 5a8:	675f6675 		r26, r31, r12
 5ac:	6e63005f 	get	r19, rfsl15
 5b0:	6e627566 	tnecget	r19, rfsl6
 5b4:	005f5f74 		r2, r31, r11
 5b8:	6d5f6973 	ncaget	r10, rfsl3
 5bc:	64737400 	bslli	r3, r19, 0
 5c0:	5f6c6f63 		r27, r12, r13
 5c4:	616c7469 	muli	r11, r12, 29801
 5c8:	6d655f62 	tneaget	r11, rfsl2
 5cc:	7566005f 		r11, r6, r0
 5d0:	636c6f73 	muli	r27, r12, 28531
 5d4:	65005f6d 		r8, r0, r11
 5d8:	62746f77 	muli	r19, r20, 28535
 5dc:	635f7374 	muli	r26, r31, 29556
 5e0:	61746500 	muli	r11, r20, 25856
 5e4:	5f703573 		r27, r16, r6
 5e8:	005f5f74 		r2, r31, r11
 5ec:	6d5f6d64 	necaget	r10, rfsl4
 5f0:	61790069 	muli	r11, r25, 105
 5f4:	6d707572 	tnecget	r11, rfsl2
 5f8:	655f6461 	bslli	r10, r31, 1
 5fc:	7461005f 		r3, r1, r0
 600:	5f73665f 		r27, r19, r12
 604:	66616b65 	bsrai	r19, r1, 5
 608:	5f737464 		r27, r19, r14
 60c:	65727200 	bsrai	r11, r18, 0
 610:	5f5f7366 		r26, r31, r14
 614:	5f66616b 		r27, r6, r12
 618:	655f7374 	bsrai	r10, r31, 20
 61c:	64696e00 		r3, r9, r13
 620:	2f676e75 	rsubic	r27, r7, 28277
 624:	2f6d625f 	rsubic	r27, r13, 25183
 628:	676e752f 	bslli	r27, r14, 15
 62c:	2f737263 	rsubic	r27, r19, 29283
 630:	2f6e6577 	rsubic	r27, r14, 25975
 634:	6c69622f 	ncget	r3, rfsl15
 638:	6e65776c 	tnecget	r19, rfsl12
 63c:	69622f6c 		r11, r2, r5
 640:	6962632f 		r11, r2, r12
 644:	7265656e 		r19, r5, r12
 648:	742f696d 		r1, r15, r13
 64c:	70757265 		r3, r21, r14
 650:	2e63005f 	rsubic	r19, r3, 95
 654:	5f73665f 		r27, r19, r12
 658:	66616b65 	bsrai	r19, r1, 5
 65c:	5f737464 		r27, r19, r14
 660:	6f757400 	tnecget	r27, rfsl0
 664:	5f5f7346 		r26, r31, r14
 668:	494c455f 		r10, r12, r8
 66c:	66616b65 	bsrai	r19, r1, 5
 670:	005f5f63 		r2, r31, r11
 674:	616c6c5f 	muli	r11, r12, 27743
 678:	65786974 	bsrli	r11, r24, 20
 67c:	70726f63 		r3, r18, r13
 680:	73006c61 		r24, r0, r13
 684:	73747000 		r27, r20, r14
 688:	2f676e75 	rsubic	r27, r7, 28277
 68c:	2f6d625f 	rsubic	r27, r13, 25183
 690:	676e752f 	bslli	r27, r14, 15
 694:	2f737263 	rsubic	r27, r19, 29283
 698:	2f6e6577 	rsubic	r27, r14, 25975
 69c:	6c69622f 	ncget	r3, rfsl15
 6a0:	6e65776c 	tnecget	r19, rfsl12
 6a4:	69622f6c 		r11, r2, r5
 6a8:	6962632f 		r11, r2, r12
 6ac:	7374646c 		r27, r20, r12
 6b0:	69622f5f 		r11, r2, r5
 6b4:	5f63616c 		r27, r3, r12
 6b8:	6c5f6174 	ncget	r2, rfsl4
 6bc:	65786974 	bsrli	r11, r24, 20
 6c0:	2e630072 	rsubic	r19, r3, 114
 6c4:	65737461 	bslli	r11, r19, 1
 6c8:	Address 0x000006c8 is out of bounds.

