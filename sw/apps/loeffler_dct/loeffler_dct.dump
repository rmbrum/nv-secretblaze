
loeffler_dct.elf:     file format elf32-microblaze


Disassembly of section .vectors.reset:

10000000 <_start>:
10000000:	b0001000 	imm	4096
10000004:	b8080050 	brai	80	// 10000050 <_start1>

Disassembly of section .vectors.sw_exception:

10000008 <_vector_sw_exception>:
10000008:	b0001000 	imm	4096
1000000c:	b8081a34 	brai	6708	// 10001a34 <_exception_handler>

Disassembly of section .vectors.interrupt:

10000010 <_vector_interrupt>:
10000010:	b0001000 	imm	4096
10000014:	b8081a44 	brai	6724	// 10001a44 <_interrupt_handler>

Disassembly of section .vectors.hw_exception:

10000020 <_vector_hw_exception>:
10000020:	b0001000 	imm	4096
10000024:	b8081a3c 	brai	6716	// 10001a3c <_hw_exception_handler>

Disassembly of section .text:

10000050 <_start1>:
10000050:	b0001000 	imm	4096
10000054:	31a02188 	addik	r13, r0, 8584	// 10002188 <_SDA_BASE_>
10000058:	b0001000 	imm	4096
1000005c:	30402070 	addik	r2, r0, 8304	// 10002070 <_SDA2_BASE_>
10000060:	b0001000 	imm	4096
10000064:	30202398 	addik	r1, r0, 9112
10000068:	b9f4012c 	brlid	r15, 300	// 10000194 <_crtinit>
1000006c:	80000000 	or	r0, r0, r0
10000070:	b9f419ec 	brlid	r15, 6636	// 10001a5c <exit>
10000074:	30a30000 	addik	r5, r3, 0

10000078 <_exit>:
10000078:	b8000000 	bri	0	// 10000078 <_exit>

1000007c <__do_global_dtors_aux>:
1000007c:	b0001000 	imm	4096
10000080:	e0602188 	lbui	r3, r0, 8584	// 10002188 <_SDA_BASE_>
10000084:	3021ffdc 	addik	r1, r1, -36
10000088:	f9e10000 	swi	r15, r1, 0
1000008c:	fa61001c 	swi	r19, r1, 28
10000090:	be23008c 	bneid	r3, 140		// 1000011c
10000094:	fac10020 	swi	r22, r1, 32
10000098:	b0001000 	imm	4096
1000009c:	32c02178 	addik	r22, r0, 8568	// 10002178 <__CTOR_END__>
100000a0:	b0001000 	imm	4096
100000a4:	3260217c 	addik	r19, r0, 8572	// 1000217c <__DTOR_END__>
100000a8:	b0001000 	imm	4096
100000ac:	e860218c 	lwi	r3, r0, 8588	// 1000218c <dtor_idx.2340>
100000b0:	16769800 	rsubk	r19, r22, r19
100000b4:	66730202 	bsrai	r19, r19, 2
100000b8:	3273ffff 	addik	r19, r19, -1
100000bc:	14931803 	cmpu	r4, r19, r3
100000c0:	bea40034 	bgeid	r4, 52		// 100000f4
100000c4:	30630001 	addik	r3, r3, 1
100000c8:	64830402 	bslli	r4, r3, 2
100000cc:	c884b000 	lw	r4, r4, r22
100000d0:	b0001000 	imm	4096
100000d4:	f860218c 	swi	r3, r0, 8588	// 1000218c <dtor_idx.2340>
100000d8:	99fc2000 	brald	r15, r4
100000dc:	80000000 	or	r0, r0, r0
100000e0:	b0001000 	imm	4096
100000e4:	e860218c 	lwi	r3, r0, 8588	// 1000218c <dtor_idx.2340>
100000e8:	14931803 	cmpu	r4, r19, r3
100000ec:	be44ffdc 	bltid	r4, -36		// 100000c8
100000f0:	30630001 	addik	r3, r3, 1
100000f4:	b0000000 	imm	0
100000f8:	30600000 	addik	r3, r0, 0
100000fc:	bc030014 	beqi	r3, 20		// 10000110
10000100:	b0001000 	imm	4096
10000104:	30a02180 	addik	r5, r0, 8576	// 10002180 <__EH_FRAME_BEGIN__>
10000108:	99fc1800 	brald	r15, r3
1000010c:	80000000 	or	r0, r0, r0
10000110:	30600001 	addik	r3, r0, 1
10000114:	b0001000 	imm	4096
10000118:	f0602188 	sbi	r3, r0, 8584	// 10002188 <_SDA_BASE_>
1000011c:	e9e10000 	lwi	r15, r1, 0
10000120:	ea61001c 	lwi	r19, r1, 28
10000124:	eac10020 	lwi	r22, r1, 32
10000128:	b60f0008 	rtsd	r15, 8
1000012c:	30210024 	addik	r1, r1, 36

10000130 <frame_dummy>:
10000130:	b0000000 	imm	0
10000134:	30600000 	addik	r3, r0, 0
10000138:	3021ffe4 	addik	r1, r1, -28
1000013c:	be030020 	beqid	r3, 32		// 1000015c
10000140:	f9e10000 	swi	r15, r1, 0
10000144:	b0001000 	imm	4096
10000148:	30a02180 	addik	r5, r0, 8576	// 10002180 <__EH_FRAME_BEGIN__>
1000014c:	b0001000 	imm	4096
10000150:	30c02190 	addik	r6, r0, 8592	// 10002190 <object.2350>
10000154:	99fc1800 	brald	r15, r3
10000158:	80000000 	or	r0, r0, r0
1000015c:	b0001000 	imm	4096
10000160:	e8602184 	lwi	r3, r0, 8580	// 10002184 <__JCR_END__>
10000164:	be030028 	beqid	r3, 40		// 1000018c
10000168:	e9e10000 	lwi	r15, r1, 0
1000016c:	b0000000 	imm	0
10000170:	30600000 	addik	r3, r0, 0
10000174:	bc030018 	beqi	r3, 24		// 1000018c
10000178:	b0001000 	imm	4096
1000017c:	30a02184 	addik	r5, r0, 8580	// 10002184 <__JCR_END__>
10000180:	99fc1800 	brald	r15, r3
10000184:	80000000 	or	r0, r0, r0
10000188:	e9e10000 	lwi	r15, r1, 0
1000018c:	b60f0008 	rtsd	r15, 8
10000190:	3021001c 	addik	r1, r1, 28

10000194 <_crtinit>:
10000194:	2021ffec 	addi	r1, r1, -20
10000198:	f9e10000 	swi	r15, r1, 0
1000019c:	b0001000 	imm	4096
100001a0:	20c02188 	addi	r6, r0, 8584	// 10002188 <_SDA_BASE_>
100001a4:	b0001000 	imm	4096
100001a8:	20e02188 	addi	r7, r0, 8584	// 10002188 <_SDA_BASE_>
100001ac:	06463800 	rsub	r18, r6, r7
100001b0:	bc720014 	blei	r18, 20		// 100001c4
100001b4:	f8060000 	swi	r0, r6, 0
100001b8:	20c60004 	addi	r6, r6, 4
100001bc:	06463800 	rsub	r18, r6, r7
100001c0:	bc92fff4 	bgti	r18, -12		// 100001b4
100001c4:	b0001000 	imm	4096
100001c8:	20c02188 	addi	r6, r0, 8584	// 10002188 <_SDA_BASE_>
100001cc:	b0001000 	imm	4096
100001d0:	20e021a8 	addi	r7, r0, 8616	// 100021a8 <__bss_end>
100001d4:	06463800 	rsub	r18, r6, r7
100001d8:	bc720014 	blei	r18, 20		// 100001ec
100001dc:	f8060000 	swi	r0, r6, 0
100001e0:	20c60004 	addi	r6, r6, 4
100001e4:	06463800 	rsub	r18, r6, r7
100001e8:	bc92fff4 	bgti	r18, -12		// 100001dc
100001ec:	b9f41868 	brlid	r15, 6248	// 10001a54 <_program_init>
100001f0:	80000000 	or	r0, r0, r0
100001f4:	b9f41d58 	brlid	r15, 7512	// 10001f4c <__init>
100001f8:	80000000 	or	r0, r0, r0
100001fc:	20c00000 	addi	r6, r0, 0
10000200:	20e00000 	addi	r7, r0, 0
10000204:	b9f41be4 	brlid	r15, 7140	// 10001de8 <main>
10000208:	20a00000 	addi	r5, r0, 0
1000020c:	32630000 	addik	r19, r3, 0
10000210:	b9f41d78 	brlid	r15, 7544	// 10001f88 <__fini>
10000214:	80000000 	or	r0, r0, r0
10000218:	b9f41834 	brlid	r15, 6196	// 10001a4c <_program_clean>
1000021c:	80000000 	or	r0, r0, r0
10000220:	c9e10000 	lw	r15, r1, r0
10000224:	30730000 	addik	r3, r19, 0
10000228:	b60f0008 	rtsd	r15, 8
1000022c:	20210014 	addi	r1, r1, 20

10000230 <uart_put>:
 * \brief Write data to TX buffer
 * \param[in] data The data to write
 */
static __inline__ void uart_write(const sb_uint8_t data)
{
  WRITE_REG32(UART_DATA_TX_REG,data);
10000230:	b0002000 	imm	8192
10000234:	f8a0000c 	swi	r5, r0, 12
 * \fn void uart_send(void)
 * \brief Start a TX transfert
 */
static __inline__ void uart_send(void)
{
  WRITE_REG32(UART_CONTROL_REG,SEND_TX_BIT);
10000238:	30600001 	addik	r3, r0, 1
1000023c:	b0002000 	imm	8192
10000240:	f8600008 	swi	r3, r0, 8
 * \fn void uart_wait_tx_done(void)
 * \brief Poll the TX busy flag, return when TX transfert is finished.
 */
void uart_wait_tx_done(void)
{
  sb_uint32_t flag = (READ_REG32(UART_STATUS_REG) & TX_BUSY_FLAG_BIT);
10000244:	b0002000 	imm	8192
10000248:	e8600000 	lwi	r3, r0, 0
1000024c:	a4630002 	andi	r3, r3, 2
  while(flag == TX_BUSY_FLAG_BIT)
10000250:	bc23fff4 	bnei	r3, -12		// 10000244
10000254:	b60f0008 	rtsd	r15, 8
10000258:	80000000 	or	r0, r0, r0

1000025c <uart_get>:
 * \fn void uart_wait_rx_ready(void)
 * \brief Poll the RX ready flag, return when new RX data.
 */
void uart_wait_rx_ready(void)
{
  sb_uint32_t flag = (READ_REG32(UART_STATUS_REG) & RX_READY_FLAG_BIT);
1000025c:	b0002000 	imm	8192
10000260:	e8600000 	lwi	r3, r0, 0
10000264:	a4630001 	andi	r3, r3, 1
  while(flag != RX_READY_FLAG_BIT)
10000268:	a8630001 	xori	r3, r3, 1
1000026c:	bc23fff0 	bnei	r3, -16	// 1000025c <uart_get>
 * \brief Read data from RX buffer
 * \param[in,out] data The pointer to the data
 */
static __inline__ void uart_read(sb_uint8_t *const data)
{
  *data = (sb_uint8_t)READ_REG32(UART_DATA_RX_REG);
10000270:	b0002000 	imm	8192
10000274:	e8600004 	lwi	r3, r0, 4
 */
void uart_get(sb_uint8_t *const in)
{
  uart_wait_rx_ready();
  uart_read(in);
}
10000278:	b60f0008 	rtsd	r15, 8
1000027c:	f0650000 	sbi	r3, r5, 0

10000280 <uart_wait_rx_ready>:
 * \fn void uart_wait_rx_ready(void)
 * \brief Poll the RX ready flag, return when new RX data.
 */
void uart_wait_rx_ready(void)
{
  sb_uint32_t flag = (READ_REG32(UART_STATUS_REG) & RX_READY_FLAG_BIT);
10000280:	b0002000 	imm	8192
10000284:	e8600000 	lwi	r3, r0, 0
10000288:	a4630001 	andi	r3, r3, 1
  while(flag != RX_READY_FLAG_BIT)
1000028c:	a8630001 	xori	r3, r3, 1
10000290:	bc23fff0 	bnei	r3, -16	// 10000280 <uart_wait_rx_ready>
10000294:	b60f0008 	rtsd	r15, 8
10000298:	80000000 	or	r0, r0, r0

1000029c <uart_wait_tx_done>:
 * \fn void uart_wait_tx_done(void)
 * \brief Poll the TX busy flag, return when TX transfert is finished.
 */
void uart_wait_tx_done(void)
{
  sb_uint32_t flag = (READ_REG32(UART_STATUS_REG) & TX_BUSY_FLAG_BIT);
1000029c:	b0002000 	imm	8192
100002a0:	e8600000 	lwi	r3, r0, 0
100002a4:	a4630002 	andi	r3, r3, 2
  while(flag == TX_BUSY_FLAG_BIT)
100002a8:	bc23fff4 	bnei	r3, -12	// 1000029c <uart_wait_tx_done>
100002ac:	b60f0008 	rtsd	r15, 8
100002b0:	80000000 	or	r0, r0, r0

100002b4 <outbyte>:
  int *varg = (int *)((char **)&format);
  return print(&out,varg);
}

void outbyte(char **str, char c)
{
100002b4:	3021ffe4 	addik	r1, r1, -28
  if(str) 
100002b8:	be050028 	beqid	r5, 40		// 100002e0
100002bc:	f9e10000 	swi	r15, r1, 0
  {
    **str = c;
100002c0:	e8650000 	lwi	r3, r5, 0
100002c4:	f0c30000 	sbi	r6, r3, 0
    ++(*str);
100002c8:	e8650000 	lwi	r3, r5, 0
100002cc:	30630001 	addik	r3, r3, 1
100002d0:	f8650000 	swi	r3, r5, 0
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
  }
}
100002d4:	e9e10000 	lwi	r15, r1, 0
100002d8:	b60f0008 	rtsd	r15, 8
100002dc:	3021001c 	addik	r1, r1, 28
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
100002e0:	b9f4ff50 	brlid	r15, -176	// 10000230 <uart_put>
100002e4:	a4a600ff 	andi	r5, r6, 255
  }
}
100002e8:	e9e10000 	lwi	r15, r1, 0
100002ec:	b60f0008 	rtsd	r15, 8
100002f0:	3021001c 	addik	r1, r1, 28

100002f4 <prints>:

int prints(char **out, const char *string, int width, int pad)
{
100002f4:	3021ffcc 	addik	r1, r1, -52
100002f8:	fa610020 	swi	r19, r1, 32
100002fc:	fae10028 	swi	r23, r1, 40
10000300:	fb01002c 	swi	r24, r1, 44
10000304:	f9e10000 	swi	r15, r1, 0
10000308:	fac10024 	swi	r22, r1, 36
1000030c:	fb210030 	swi	r25, r1, 48
10000310:	13070000 	addk	r24, r7, r0
10000314:	12650000 	addk	r19, r5, r0
  int pc = 0, padchar = ' ';

  if(width > 0)  
10000318:	be670050 	bleid	r7, 80		// 10000368
1000031c:	32e00020 	addik	r23, r0, 32
  {
    int len = 0;
    const char *ptr;
    for (ptr = string; *ptr; ++ptr) ++len;
10000320:	e0860000 	lbui	r4, r6, 0
10000324:	90840060 	sext8	r4, r4
10000328:	be040110 	beqid	r4, 272		// 10000438
1000032c:	10660000 	addk	r3, r6, r0
10000330:	10800000 	addk	r4, r0, r0
10000334:	30630001 	addik	r3, r3, 1
10000338:	e0a30000 	lbui	r5, r3, 0
1000033c:	90a50060 	sext8	r5, r5
10000340:	be25fff4 	bneid	r5, -12		// 10000334
10000344:	30840001 	addik	r4, r4, 1
    if (len >= width) 
10000348:	14782001 	cmp	r3, r24, r4
1000034c:	be43000c 	bltid	r3, 12		// 10000358
10000350:	1704c000 	rsubk	r24, r4, r24
    {
      width = 0;
10000354:	13050000 	addk	r24, r5, r0
    }
    else 
    {
      width -= len;
    }
    if(pad & PAD_ZERO) 
10000358:	a4680002 	andi	r3, r8, 2
1000035c:	be03000c 	beqid	r3, 12		// 10000368
10000360:	32e00020 	addik	r23, r0, 32
10000364:	32e00030 	addik	r23, r0, 48
    {
      padchar = '0';
    }
  }
  
  if(!(pad & PAD_RIGHT)) 
10000368:	a5080001 	andi	r8, r8, 1
1000036c:	be28003c 	bneid	r8, 60		// 100003a8
10000370:	12c00000 	addk	r22, r0, r0
  {
    for(;width > 0;--width) 
10000374:	be780034 	bleid	r24, 52		// 100003a8
10000378:	12c80000 	addk	r22, r8, r0
1000037c:	be130104 	beqid	r19, 260		// 10000480
10000380:	10780000 	addk	r3, r24, r0
10000384:	e8930000 	lwi	r4, r19, 0

void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
10000388:	f2e40000 	sbi	r23, r4, 0
    ++(*str);
1000038c:	e8930000 	lwi	r4, r19, 0
    }
  }
  
  if(!(pad & PAD_RIGHT)) 
  {
    for(;width > 0;--width) 
10000390:	3063ffff 	addik	r3, r3, -1
void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
    ++(*str);
10000394:	30840001 	addik	r4, r4, 1
    }
  }
  
  if(!(pad & PAD_RIGHT)) 
  {
    for(;width > 0;--width) 
10000398:	be23fff0 	bneid	r3, -16		// 10000388
1000039c:	f8930000 	swi	r4, r19, 0
100003a0:	12d80000 	addk	r22, r24, r0
100003a4:	13000000 	addk	r24, r0, r0
      outbyte(out,padchar);
      ++pc;
    }
  }
  
  for(;*string;++string) 
100003a8:	e0a60000 	lbui	r5, r6, 0
100003ac:	90a50060 	sext8	r5, r5
100003b0:	bc050034 	beqi	r5, 52		// 100003e4
100003b4:	be1300ac 	beqid	r19, 172		// 10000460
100003b8:	13260000 	addk	r25, r6, r0
100003bc:	e8930000 	lwi	r4, r19, 0

void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
100003c0:	f0a40000 	sbi	r5, r4, 0
    ++(*str);
100003c4:	e8930000 	lwi	r4, r19, 0
  }
  
  for(;*string;++string) 
  {
    outbyte(out,*string);
    ++pc;
100003c8:	30c60001 	addik	r6, r6, 1
void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
    ++(*str);
100003cc:	30840001 	addik	r4, r4, 1
100003d0:	f8930000 	swi	r4, r19, 0
      outbyte(out,padchar);
      ++pc;
    }
  }
  
  for(;*string;++string) 
100003d4:	e0a60000 	lbui	r5, r6, 0
100003d8:	90a50060 	sext8	r5, r5
100003dc:	be25ffe4 	bneid	r5, -28		// 100003c0
100003e0:	32d60001 	addik	r22, r22, 1
  {
    outbyte(out,*string);
    ++pc;
   }
   
  for(;width > 0;--width) 
100003e4:	be780034 	bleid	r24, 52		// 10000418
100003e8:	10760000 	addk	r3, r22, r0
100003ec:	be130054 	beqid	r19, 84		// 10000440
100003f0:	10780000 	addk	r3, r24, r0
100003f4:	e8930000 	lwi	r4, r19, 0

void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
100003f8:	f2e40000 	sbi	r23, r4, 0
    ++(*str);
100003fc:	e8930000 	lwi	r4, r19, 0
  {
    outbyte(out,*string);
    ++pc;
   }
   
  for(;width > 0;--width) 
10000400:	3063ffff 	addik	r3, r3, -1
void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
    ++(*str);
10000404:	30840001 	addik	r4, r4, 1
  {
    outbyte(out,*string);
    ++pc;
   }
   
  for(;width > 0;--width) 
10000408:	be23fff0 	bneid	r3, -16		// 100003f8
1000040c:	f8930000 	swi	r4, r19, 0
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
  }
}

int prints(char **out, const char *string, int width, int pad)
10000410:	12d6c000 	addk	r22, r22, r24
    outbyte(out,padchar);
    ++pc;
  }

  return pc;
}
10000414:	10760000 	addk	r3, r22, r0
10000418:	e9e10000 	lwi	r15, r1, 0
1000041c:	ea610020 	lwi	r19, r1, 32
10000420:	eac10024 	lwi	r22, r1, 36
10000424:	eae10028 	lwi	r23, r1, 40
10000428:	eb01002c 	lwi	r24, r1, 44
1000042c:	eb210030 	lwi	r25, r1, 48
10000430:	b60f0008 	rtsd	r15, 8
10000434:	30210034 	addik	r1, r1, 52
    {
      width = 0;
    }
    else 
    {
      width -= len;
10000438:	b810ff20 	brid	-224		// 10000358
1000043c:	1704c000 	rsubk	r24, r4, r24
  {
    outbyte(out,*string);
    ++pc;
   }
   
  for(;width > 0;--width) 
10000440:	12780000 	addk	r19, r24, r0
10000444:	a73700ff 	andi	r25, r23, 255
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
10000448:	10b90000 	addk	r5, r25, r0
1000044c:	b9f4fde4 	brlid	r15, -540	// 10000230 <uart_put>
10000450:	3273ffff 	addik	r19, r19, -1
  {
    outbyte(out,*string);
    ++pc;
   }
   
  for(;width > 0;--width) 
10000454:	bc33fff4 	bnei	r19, -12		// 10000448
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
  }
}

int prints(char **out, const char *string, int width, int pad)
10000458:	b810ffbc 	brid	-68		// 10000414
1000045c:	12d6c000 	addk	r22, r22, r24
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
10000460:	a4a500ff 	andi	r5, r5, 255
10000464:	b9f4fdcc 	brlid	r15, -564	// 10000230 <uart_put>
10000468:	33390001 	addik	r25, r25, 1
      outbyte(out,padchar);
      ++pc;
    }
  }
  
  for(;*string;++string) 
1000046c:	e0b90000 	lbui	r5, r25, 0
10000470:	90a50060 	sext8	r5, r5
10000474:	be25ffec 	bneid	r5, -20		// 10000460
10000478:	32d60001 	addik	r22, r22, 1
1000047c:	b800ff68 	bri	-152		// 100003e4
    }
  }
  
  if(!(pad & PAD_RIGHT)) 
  {
    for(;width > 0;--width) 
10000480:	12d80000 	addk	r22, r24, r0
10000484:	a73700ff 	andi	r25, r23, 255
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
10000488:	10b90000 	addk	r5, r25, r0
1000048c:	f8c1001c 	swi	r6, r1, 28
10000490:	b9f4fda0 	brlid	r15, -608	// 10000230 <uart_put>
10000494:	32d6ffff 	addik	r22, r22, -1
    }
  }
  
  if(!(pad & PAD_RIGHT)) 
  {
    for(;width > 0;--width) 
10000498:	be36fff0 	bneid	r22, -16		// 10000488
1000049c:	e8c1001c 	lwi	r6, r1, 28
100004a0:	b810ff04 	brid	-252		// 100003a4
100004a4:	12d80000 	addk	r22, r24, r0

100004a8 <printi>:

  return pc;
}

int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
100004a8:	3021ffbc 	addik	r1, r1, -68
100004ac:	fae10040 	swi	r23, r1, 64
100004b0:	f9e10000 	swi	r15, r1, 0
100004b4:	fa610038 	swi	r19, r1, 56
100004b8:	fac1003c 	swi	r22, r1, 60
100004bc:	10660000 	addk	r3, r6, r0
100004c0:	12e50000 	addk	r23, r5, r0
  char print_buf[PRINT_BUF_LEN];
  char *s;
  int t, neg = 0, pc = 0;
  unsigned int u = i;

  if(i == 0) 
100004c4:	be060108 	beqid	r6, 264		// 100005cc
100004c8:	10860000 	addk	r4, r6, r0
    print_buf[0] = '0';
    print_buf[1] = '\0';
    return prints(out,print_buf,width,pad);
  }

  if(sg && b == 10 && i < 0) 
100004cc:	be2800d4 	bneid	r8, 212		// 100005a0
100004d0:	10a00000 	addk	r5, r0, r0
    neg = 1;
    u = -i;
  }

  s = print_buf + PRINT_BUF_LEN-1;
  *s = '\0';
100004d4:	f001002b 	sbi	r0, r1, 43

  while(u) 
100004d8:	be040058 	beqid	r4, 88		// 10000530
100004dc:	30c1002b 	addik	r6, r1, 43
100004e0:	eac10060 	lwi	r22, r1, 96
    t = u % b;
    if(t >= 10)
    {
      t += letbase - '0' - 10;
    }
    *--s = t + '0';
100004e4:	32600009 	addik	r19, r0, 9
100004e8:	b8100014 	brid	20		// 100004fc
100004ec:	32d6ffc6 	addik	r22, r22, -58
100004f0:	318c0030 	addik	r12, r12, 48
  }

  s = print_buf + PRINT_BUF_LEN-1;
  *s = '\0';

  while(u) 
100004f4:	be04003c 	beqid	r4, 60		// 10000530
100004f8:	f1860000 	sbi	r12, r6, 0
  {
    t = u % b;
100004fc:	49872002 	idivu	r12, r7, r4
    if(t >= 10)
    {
      t += letbase - '0' - 10;
    }
    *--s = t + '0';
10000500:	30c6ffff 	addik	r6, r6, -1
  s = print_buf + PRINT_BUF_LEN-1;
  *s = '\0';

  while(u) 
  {
    t = u % b;
10000504:	416c3800 	mul	r11, r12, r7
10000508:	156b2000 	rsubk	r11, r11, r4
    if(t >= 10)
    {
      t += letbase - '0' - 10;
    }
    *--s = t + '0';
1000050c:	146b9801 	cmp	r3, r11, r19
    u /= b;
10000510:	108c0000 	addk	r4, r12, r0
    t = u % b;
    if(t >= 10)
    {
      t += letbase - '0' - 10;
    }
    *--s = t + '0';
10000514:	118b0000 	addk	r12, r11, r0
10000518:	bea3ffd8 	bgeid	r3, -40		// 100004f0
1000051c:	11765800 	addk	r11, r22, r11
10000520:	118b0000 	addk	r12, r11, r0
10000524:	318c0030 	addik	r12, r12, 48
  }

  s = print_buf + PRINT_BUF_LEN-1;
  *s = '\0';

  while(u) 
10000528:	be24ffd4 	bneid	r4, -44		// 100004fc
1000052c:	f1860000 	sbi	r12, r6, 0
    }
    *--s = t + '0';
    u /= b;
  }

  if(neg) 
10000530:	be250034 	bneid	r5, 52		// 10000564
10000534:	12650000 	addk	r19, r5, r0
    {
      *--s = '-';
    }
  }

	return pc + prints(out,s,width,pad);
10000538:	10b70000 	addk	r5, r23, r0
1000053c:	10e90000 	addk	r7, r9, r0
10000540:	b9f4fdb4 	brlid	r15, -588	// 100002f4 <prints>
10000544:	110a0000 	addk	r8, r10, r0
10000548:	10639800 	addk	r3, r3, r19
}
1000054c:	e9e10000 	lwi	r15, r1, 0
10000550:	ea610038 	lwi	r19, r1, 56
10000554:	eac1003c 	lwi	r22, r1, 60
10000558:	eae10040 	lwi	r23, r1, 64
1000055c:	b60f0008 	rtsd	r15, 8
10000560:	30210044 	addik	r1, r1, 68
    u /= b;
  }

  if(neg) 
  {
    if(width && (pad & PAD_ZERO)) 
10000564:	be090058 	beqid	r9, 88		// 100005bc
10000568:	3060002d 	addik	r3, r0, 45
1000056c:	a46a0002 	andi	r3, r10, 2
10000570:	be03004c 	beqid	r3, 76		// 100005bc
10000574:	3060002d 	addik	r3, r0, 45
  return print(&out,varg);
}

void outbyte(char **str, char c)
{
  if(str) 
10000578:	be170088 	beqid	r23, 136		// 10000600
1000057c:	3080002d 	addik	r4, r0, 45
  {
    **str = c;
10000580:	e8770000 	lwi	r3, r23, 0
10000584:	f0830000 	sbi	r4, r3, 0
    ++(*str);
10000588:	e8770000 	lwi	r3, r23, 0
1000058c:	30630001 	addik	r3, r3, 1
10000590:	f8770000 	swi	r3, r23, 0
  {
    if(width && (pad & PAD_ZERO)) 
    {
      outbyte(out, '-');
      ++pc;
     --width;
10000594:	3129ffff 	addik	r9, r9, -1
10000598:	b810ffa0 	brid	-96		// 10000538
1000059c:	32600001 	addik	r19, r0, 1
    print_buf[0] = '0';
    print_buf[1] = '\0';
    return prints(out,print_buf,width,pad);
  }

  if(sg && b == 10 && i < 0) 
100005a0:	3060000a 	addik	r3, r0, 10
100005a4:	88671c00 	pcmpeq	r3, r7, r3
100005a8:	bc03ff2c 	beqi	r3, -212		// 100004d4
100005ac:	bca6ff28 	bgei	r6, -216		// 100004d4
  {
    neg = 1;
    u = -i;
100005b0:	14860000 	rsubk	r4, r6, r0
    return prints(out,print_buf,width,pad);
  }

  if(sg && b == 10 && i < 0) 
  {
    neg = 1;
100005b4:	b810ff20 	brid	-224		// 100004d4
100005b8:	30a00001 	addik	r5, r0, 1
      ++pc;
     --width;
    }
    else 
    {
      *--s = '-';
100005bc:	f066ffff 	sbi	r3, r6, -1

int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
  char print_buf[PRINT_BUF_LEN];
  char *s;
  int t, neg = 0, pc = 0;
100005c0:	12600000 	addk	r19, r0, r0
      ++pc;
     --width;
    }
    else 
    {
      *--s = '-';
100005c4:	b810ff74 	brid	-140		// 10000538
100005c8:	30c6ffff 	addik	r6, r6, -1

  if(i == 0) 
  {
    print_buf[0] = '0';
    print_buf[1] = '\0';
    return prints(out,print_buf,width,pad);
100005cc:	10e90000 	addk	r7, r9, r0
100005d0:	110a0000 	addk	r8, r10, r0
  int t, neg = 0, pc = 0;
  unsigned int u = i;

  if(i == 0) 
  {
    print_buf[0] = '0';
100005d4:	30800030 	addik	r4, r0, 48
    print_buf[1] = '\0';
    return prints(out,print_buf,width,pad);
100005d8:	30c1001c 	addik	r6, r1, 28
  int t, neg = 0, pc = 0;
  unsigned int u = i;

  if(i == 0) 
  {
    print_buf[0] = '0';
100005dc:	f081001c 	sbi	r4, r1, 28
    print_buf[1] = '\0';
    return prints(out,print_buf,width,pad);
100005e0:	b9f4fd14 	brlid	r15, -748	// 100002f4 <prints>
100005e4:	f061001d 	sbi	r3, r1, 29
      *--s = '-';
    }
  }

	return pc + prints(out,s,width,pad);
}
100005e8:	e9e10000 	lwi	r15, r1, 0
100005ec:	ea610038 	lwi	r19, r1, 56
100005f0:	eac1003c 	lwi	r22, r1, 60
100005f4:	eae10040 	lwi	r23, r1, 64
100005f8:	b60f0008 	rtsd	r15, 8
100005fc:	30210044 	addik	r1, r1, 68
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
10000600:	30a0002d 	addik	r5, r0, 45
10000604:	f8c1002c 	swi	r6, r1, 44
10000608:	f9210030 	swi	r9, r1, 48
1000060c:	b9f4fc24 	brlid	r15, -988	// 10000230 <uart_put>
10000610:	f9410034 	swi	r10, r1, 52
10000614:	e9410034 	lwi	r10, r1, 52
10000618:	e9210030 	lwi	r9, r1, 48
1000061c:	b810ff78 	brid	-136		// 10000594
10000620:	e8c1002c 	lwi	r6, r1, 44

10000624 <print>:

	return pc + prints(out,s,width,pad);
}

int print(char **out, int *varg)
{
10000624:	3021ffbc 	addik	r1, r1, -68
10000628:	fac10028 	swi	r22, r1, 40
1000062c:	fb010030 	swi	r24, r1, 48
10000630:	f9e10000 	swi	r15, r1, 0
10000634:	fa610024 	swi	r19, r1, 36
10000638:	fae1002c 	swi	r23, r1, 44
1000063c:	fb210034 	swi	r25, r1, 52
10000640:	fb410038 	swi	r26, r1, 56
10000644:	fb61003c 	swi	r27, r1, 60
10000648:	fb810040 	swi	r28, r1, 64
  int width, pad;
  int pc = 0;
  char *format = (char *)(*varg++);
1000064c:	eae60000 	lwi	r23, r6, 0

	return pc + prints(out,s,width,pad);
}

int print(char **out, int *varg)
{
10000650:	12c50000 	addk	r22, r5, r0
  int width, pad;
  int pc = 0;
  char *format = (char *)(*varg++);
  char scr[2];

  for(;*format != 0;++format) 
10000654:	e0b70000 	lbui	r5, r23, 0
10000658:	90a50060 	sext8	r5, r5
1000065c:	be050108 	beqid	r5, 264		// 10000764
10000660:	13050000 	addk	r24, r5, r0

int print(char **out, int *varg)
{
  int width, pad;
  int pc = 0;
  char *format = (char *)(*varg++);
10000664:	33460004 	addik	r26, r6, 4
}

int print(char **out, int *varg)
{
  int width, pad;
  int pc = 0;
10000668:	13000000 	addk	r24, r0, r0
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
1000066c:	33200009 	addik	r25, r0, 9
        pc += printi (out,*varg++,16,0,width,pad,'A');
        continue;
      }
      if( *format == 'u' ) 
      {
        pc += printi(out,*varg++,10,0,width,pad,'a');
10000670:	33600061 	addik	r27, r0, 97
        pc += printi(out,*varg++,16,0,width,pad,'a');
        continue;
      } 
      if(*format == 'X') 
      {
        pc += printi (out,*varg++,16,0,width,pad,'A');
10000674:	33800041 	addik	r28, r0, 65
  char *format = (char *)(*varg++);
  char scr[2];

  for(;*format != 0;++format) 
  {
    if(*format == '%') 
10000678:	a9450025 	xori	r10, r5, 37
1000067c:	bc2a012c 	bnei	r10, 300		// 100007a8
    {
      ++format;
      width = pad = 0;
      if(*format == '\0') 
10000680:	e0970001 	lbui	r4, r23, 1
10000684:	90840060 	sext8	r4, r4
10000688:	be0400dc 	beqid	r4, 220		// 10000764
1000068c:	a8640025 	xori	r3, r4, 37
      {
        break;
      }
      if(*format == '%') 
10000690:	be030114 	beqid	r3, 276		// 100007a4
10000694:	32770001 	addik	r19, r23, 1
      {
        goto out;
      }
      if(*format == '-') 
10000698:	a864002d 	xori	r3, r4, 45
1000069c:	bc030150 	beqi	r3, 336		// 100007ec
      {
        ++format;
        pad = PAD_RIGHT;
      }
      while (*format == '0') 
100006a0:	a8640030 	xori	r3, r4, 48
100006a4:	be230024 	bneid	r3, 36		// 100006c8
100006a8:	10d30000 	addk	r6, r19, r0
  }

	return pc + prints(out,s,width,pad);
}

int print(char **out, int *varg)
100006ac:	30c60001 	addik	r6, r6, 1
      if(*format == '-') 
      {
        ++format;
        pad = PAD_RIGHT;
      }
      while (*format == '0') 
100006b0:	e0860000 	lbui	r4, r6, 0
      {
        ++format;
        pad |= PAD_ZERO;
100006b4:	a14a0002 	ori	r10, r10, 2
      if(*format == '-') 
      {
        ++format;
        pad = PAD_RIGHT;
      }
      while (*format == '0') 
100006b8:	90840060 	sext8	r4, r4
100006bc:	a8a40030 	xori	r5, r4, 48
100006c0:	be05ffec 	beqid	r5, -20		// 100006ac
100006c4:	12660000 	addk	r19, r6, r0
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
100006c8:	3104ffd0 	addik	r8, r4, -48
100006cc:	a46800ff 	andi	r3, r8, 255
100006d0:	1463c803 	cmpu	r3, r3, r25
100006d4:	10e00000 	addk	r7, r0, r0
100006d8:	bea30014 	bgeid	r3, 20		// 100006ec
100006dc:	10d30000 	addk	r6, r19, r0
      {
        width *= 10;
        width += *format - '0';
      }
      if(*format == 's') 
100006e0:	b8100040 	brid	64		// 10000720
100006e4:	a8640073 	xori	r3, r4, 115
100006e8:	3104ffd0 	addik	r8, r4, -48
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
100006ec:	e0860001 	lbui	r4, r6, 1
      {
        width *= 10;
100006f0:	65270402 	bslli	r9, r7, 2
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
100006f4:	30a4ffd0 	addik	r5, r4, -48
      {
        width *= 10;
100006f8:	10e93800 	addk	r7, r9, r7
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
100006fc:	a4a500ff 	andi	r5, r5, 255
  }

	return pc + prints(out,s,width,pad);
}

int print(char **out, int *varg)
10000700:	32660001 	addik	r19, r6, 1
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
      {
        width *= 10;
10000704:	10e73800 	addk	r7, r7, r7
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
10000708:	14a5c803 	cmpu	r5, r5, r25
1000070c:	10d30000 	addk	r6, r19, r0
      {
        width *= 10;
        width += *format - '0';
10000710:	10e83800 	addk	r7, r8, r7
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
10000714:	bea5ffd4 	bgeid	r5, -44		// 100006e8
10000718:	90840060 	sext8	r4, r4
      {
        width *= 10;
        width += *format - '0';
      }
      if(*format == 's') 
1000071c:	a8640073 	xori	r3, r4, 115
10000720:	be0300ac 	beqid	r3, 172		// 100007cc
10000724:	a8640064 	xori	r3, r4, 100
      {
        char *s = *((char **)varg++);
        pc += prints(out, s?s:"(null)",width,pad);
        continue;
      }  
      if(*format == 'd') 
10000728:	be0300e8 	beqid	r3, 232		// 10000810
1000072c:	11270000 	addk	r9, r7, r0
      {
        pc += printi(out,*varg++,10,1,width,pad,'a');
        continue;
      }
      if(*format == 'x') 
10000730:	a9040078 	xori	r8, r4, 120
10000734:	be080100 	beqid	r8, 256		// 10000834
10000738:	10b60000 	addk	r5, r22, r0
      {
        pc += printi(out,*varg++,16,0,width,pad,'a');
        continue;
      } 
      if(*format == 'X') 
1000073c:	a9040058 	xori	r8, r4, 88
10000740:	bc080110 	beqi	r8, 272		// 10000850
      {
        pc += printi (out,*varg++,16,0,width,pad,'A');
        continue;
      }
      if( *format == 'u' ) 
10000744:	a9040075 	xori	r8, r4, 117
10000748:	bc080124 	beqi	r8, 292		// 1000086c
      {
        pc += printi(out,*varg++,10,0,width,pad,'a');
        continue;
      }
      if(*format == 'c') 
1000074c:	a8840063 	xori	r4, r4, 99
10000750:	bc040138 	beqi	r4, 312		// 10000888
  int width, pad;
  int pc = 0;
  char *format = (char *)(*varg++);
  char scr[2];

  for(;*format != 0;++format) 
10000754:	e0b30001 	lbui	r5, r19, 1
10000758:	90a50060 	sext8	r5, r5
1000075c:	be25ff1c 	bneid	r5, -228		// 10000678
10000760:	32f30001 	addik	r23, r19, 1
       outbyte(out,*format);
       ++pc;
     }
   }
   
   if(out) 
10000764:	be160014 	beqid	r22, 20		// 10000778
10000768:	10780000 	addk	r3, r24, r0
   {
     **out = '\0';
1000076c:	e8760000 	lwi	r3, r22, 0
10000770:	f0030000 	sbi	r0, r3, 0
   }
   
   return pc;
}
10000774:	10780000 	addk	r3, r24, r0
10000778:	e9e10000 	lwi	r15, r1, 0
1000077c:	ea610024 	lwi	r19, r1, 36
10000780:	eac10028 	lwi	r22, r1, 40
10000784:	eae1002c 	lwi	r23, r1, 44
10000788:	eb010030 	lwi	r24, r1, 48
1000078c:	eb210034 	lwi	r25, r1, 52
10000790:	eb410038 	lwi	r26, r1, 56
10000794:	eb61003c 	lwi	r27, r1, 60
10000798:	eb810040 	lwi	r28, r1, 64
1000079c:	b60f0008 	rtsd	r15, 8
100007a0:	30210044 	addik	r1, r1, 68

  for(;*format != 0;++format) 
  {
    if(*format == '%') 
    {
      ++format;
100007a4:	12f30000 	addk	r23, r19, r0
  return print(&out,varg);
}

void outbyte(char **str, char c)
{
  if(str) 
100007a8:	bc160058 	beqi	r22, 88		// 10000800
  {
    **str = c;
100007ac:	e8760000 	lwi	r3, r22, 0
100007b0:	f0a30000 	sbi	r5, r3, 0
    ++(*str);
100007b4:	e8760000 	lwi	r3, r22, 0
100007b8:	30630001 	addik	r3, r3, 1
100007bc:	f8760000 	swi	r3, r22, 0
     }
     else 
     {
       out:
       outbyte(out,*format);
       ++pc;
100007c0:	12770000 	addk	r19, r23, r0
100007c4:	b810ff90 	brid	-112		// 10000754
100007c8:	33180001 	addik	r24, r24, 1
        width *= 10;
        width += *format - '0';
      }
      if(*format == 's') 
      {
        char *s = *((char **)varg++);
100007cc:	e8da0000 	lwi	r6, r26, 0
        pc += prints(out, s?s:"(null)",width,pad);
100007d0:	be0600dc 	beqid	r6, 220		// 100008ac
100007d4:	335a0004 	addik	r26, r26, 4
100007d8:	10b60000 	addk	r5, r22, r0
100007dc:	b9f4fb18 	brlid	r15, -1256	// 100002f4 <prints>
100007e0:	110a0000 	addk	r8, r10, r0
        continue;
100007e4:	b810ff70 	brid	-144		// 10000754
100007e8:	13181800 	addk	r24, r24, r3
      {
        goto out;
      }
      if(*format == '-') 
      {
        ++format;
100007ec:	e0970002 	lbui	r4, r23, 2
100007f0:	32770002 	addik	r19, r23, 2
        pad = PAD_RIGHT;
100007f4:	31400001 	addik	r10, r0, 1
      {
        goto out;
      }
      if(*format == '-') 
      {
        ++format;
100007f8:	b810fea8 	brid	-344		// 100006a0
100007fc:	90840060 	sext8	r4, r4
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
10000800:	b9f4fa30 	brlid	r15, -1488	// 10000230 <uart_put>
10000804:	a4a500ff 	andi	r5, r5, 255
     }
     else 
     {
       out:
       outbyte(out,*format);
       ++pc;
10000808:	b810ffbc 	brid	-68		// 100007c4
1000080c:	12770000 	addk	r19, r23, r0
        pc += prints(out, s?s:"(null)",width,pad);
        continue;
      }  
      if(*format == 'd') 
      {
        pc += printi(out,*varg++,10,1,width,pad,'a');
10000810:	e8da0000 	lwi	r6, r26, 0
10000814:	10b60000 	addk	r5, r22, r0
10000818:	30e0000a 	addik	r7, r0, 10
1000081c:	31000001 	addik	r8, r0, 1
10000820:	b9f4fc88 	brlid	r15, -888	// 100004a8 <printi>
10000824:	fb61001c 	swi	r27, r1, 28
10000828:	335a0004 	addik	r26, r26, 4
        continue;
1000082c:	b810ff28 	brid	-216		// 10000754
10000830:	13181800 	addk	r24, r24, r3
      }
      if(*format == 'x') 
      {
        pc += printi(out,*varg++,16,0,width,pad,'a');
10000834:	e8da0000 	lwi	r6, r26, 0
10000838:	30e00010 	addik	r7, r0, 16
1000083c:	b9f4fc6c 	brlid	r15, -916	// 100004a8 <printi>
10000840:	fb61001c 	swi	r27, r1, 28
10000844:	335a0004 	addik	r26, r26, 4
        continue;
10000848:	b810ff0c 	brid	-244		// 10000754
1000084c:	13181800 	addk	r24, r24, r3
      } 
      if(*format == 'X') 
      {
        pc += printi (out,*varg++,16,0,width,pad,'A');
10000850:	e8da0000 	lwi	r6, r26, 0
10000854:	30e00010 	addik	r7, r0, 16
10000858:	b9f4fc50 	brlid	r15, -944	// 100004a8 <printi>
1000085c:	fb81001c 	swi	r28, r1, 28
10000860:	335a0004 	addik	r26, r26, 4
        continue;
10000864:	b810fef0 	brid	-272		// 10000754
10000868:	13181800 	addk	r24, r24, r3
      }
      if( *format == 'u' ) 
      {
        pc += printi(out,*varg++,10,0,width,pad,'a');
1000086c:	e8da0000 	lwi	r6, r26, 0
10000870:	30e0000a 	addik	r7, r0, 10
10000874:	b9f4fc34 	brlid	r15, -972	// 100004a8 <printi>
10000878:	fb61001c 	swi	r27, r1, 28
1000087c:	335a0004 	addik	r26, r26, 4
        continue;
10000880:	b810fed4 	brid	-300		// 10000754
10000884:	13181800 	addk	r24, r24, r3
      }
      if(*format == 'c') 
      {
        scr[0] = *varg++;
10000888:	e07a0003 	lbui	r3, r26, 3
        scr[1] = '\0';
        pc += prints(out,scr,width,pad);
1000088c:	110a0000 	addk	r8, r10, r0
10000890:	30c10020 	addik	r6, r1, 32
        pc += printi(out,*varg++,10,0,width,pad,'a');
        continue;
      }
      if(*format == 'c') 
      {
        scr[0] = *varg++;
10000894:	f0610020 	sbi	r3, r1, 32
        scr[1] = '\0';
        pc += prints(out,scr,width,pad);
10000898:	b9f4fa5c 	brlid	r15, -1444	// 100002f4 <prints>
1000089c:	f0810021 	sbi	r4, r1, 33
        pc += printi(out,*varg++,10,0,width,pad,'a');
        continue;
      }
      if(*format == 'c') 
      {
        scr[0] = *varg++;
100008a0:	335a0004 	addik	r26, r26, 4
        scr[1] = '\0';
        pc += prints(out,scr,width,pad);
        continue;
100008a4:	b810feb0 	brid	-336		// 10000754
100008a8:	13181800 	addk	r24, r24, r3
        width += *format - '0';
      }
      if(*format == 's') 
      {
        char *s = *((char **)varg++);
        pc += prints(out, s?s:"(null)",width,pad);
100008ac:	b0001000 	imm	4096
100008b0:	30c01fa4 	addik	r6, r0, 8100	// 10001fa4 <__rodata_start>
100008b4:	b810ff28 	brid	-216		// 100007dc
100008b8:	10b60000 	addk	r5, r22, r0

100008bc <e_sprintf>:
  int *varg = (int *)((char **)&format);
  return print(0,varg);
}

int e_sprintf(char *out, const char *format, ...)
{
100008bc:	f8c10008 	swi	r6, r1, 8
100008c0:	f8e1000c 	swi	r7, r1, 12
100008c4:	f9010010 	swi	r8, r1, 16
100008c8:	f9210014 	swi	r9, r1, 20
100008cc:	f9410018 	swi	r10, r1, 24
100008d0:	3021ffe4 	addik	r1, r1, -28
100008d4:	f8a10020 	swi	r5, r1, 32
100008d8:	f8c10024 	swi	r6, r1, 36
  int *varg = (int *)((char **)&format);
  return print(&out,varg);
100008dc:	30a10020 	addik	r5, r1, 32
  int *varg = (int *)((char **)&format);
  return print(0,varg);
}

int e_sprintf(char *out, const char *format, ...)
{
100008e0:	f9e10000 	swi	r15, r1, 0
  int *varg = (int *)((char **)&format);
  return print(&out,varg);
100008e4:	b9f4fd40 	brlid	r15, -704	// 10000624 <print>
100008e8:	30c10024 	addik	r6, r1, 36
}
100008ec:	e9e10000 	lwi	r15, r1, 0
100008f0:	b60f0008 	rtsd	r15, 8
100008f4:	3021001c 	addik	r1, r1, 28

100008f8 <e_printf>:
 */

#include "e_printf.h"

int e_printf(const char *format, ...)
{ 
100008f8:	f8a10004 	swi	r5, r1, 4
100008fc:	f8c10008 	swi	r6, r1, 8
10000900:	f8e1000c 	swi	r7, r1, 12
10000904:	f9010010 	swi	r8, r1, 16
10000908:	f9210014 	swi	r9, r1, 20
1000090c:	f9410018 	swi	r10, r1, 24
10000910:	3021ffe4 	addik	r1, r1, -28
10000914:	f8a10020 	swi	r5, r1, 32
  int *varg = (int *)((char **)&format);
  return print(0,varg);
10000918:	30c10020 	addik	r6, r1, 32
 */

#include "e_printf.h"

int e_printf(const char *format, ...)
{ 
1000091c:	f9e10000 	swi	r15, r1, 0
  int *varg = (int *)((char **)&format);
  return print(0,varg);
10000920:	b9f4fd04 	brlid	r15, -764	// 10000624 <print>
10000924:	10a00000 	addk	r5, r0, r0
}
10000928:	e9e10000 	lwi	r15, r1, 0
1000092c:	b60f0008 	rtsd	r15, 8
10000930:	3021001c 	addik	r1, r1, 28

10000934 <loeffler_8x8_dct>:
 * This function computes the DCT of a 8x8 data block
 * using the Loeffler's algorithm.
 *   
 */
void loeffler_8x8_dct(sb_int16_t *const block)
{
10000934:	3021ff58 	addik	r1, r1, -168
10000938:	fb410090 	swi	r26, r1, 144
1000093c:	fb610094 	swi	r27, r1, 148
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000940:	e745000e 	lhui	r26, r5, 14
10000944:	e7650000 	lhui	r27, r5, 0
 * This function computes the DCT of a 8x8 data block
 * using the Loeffler's algorithm.
 *   
 */
void loeffler_8x8_dct(sb_int16_t *const block)
{
10000948:	fac10080 	swi	r22, r1, 128
1000094c:	fae10084 	swi	r23, r1, 132
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000950:	e6c5000a 	lhui	r22, r5, 10
10000954:	e6e50004 	lhui	r23, r5, 4
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000958:	e5650010 	lhui	r11, r5, 16
1000095c:	e545001e 	lhui	r10, r5, 30
10000960:	937b0061 	sext16	r27, r27
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000964:	e5250012 	lhui	r9, r5, 18
10000968:	e505001c 	lhui	r8, r5, 28
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
1000096c:	935a0061 	sext16	r26, r26
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000970:	92f70061 	sext16	r23, r23
 * This function computes the DCT of a 8x8 data block
 * using the Loeffler's algorithm.
 *   
 */
void loeffler_8x8_dct(sb_int16_t *const block)
{
10000974:	fb010088 	swi	r24, r1, 136
10000978:	fb21008c 	swi	r25, r1, 140
1000097c:	fb810098 	swi	r28, r1, 152
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000980:	e7250002 	lhui	r25, r5, 2
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
10000984:	179ad800 	rsubk	r28, r26, r27
    tmp1 = dataptr[1] + dataptr[6];
10000988:	e705000c 	lhui	r24, r5, 12
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
1000098c:	e4e50014 	lhui	r7, r5, 20
10000990:	e4c5001a 	lhui	r6, r5, 26
10000994:	92d60061 	sext16	r22, r22
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000998:	916b0061 	sext16	r11, r11
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
1000099c:	e4850016 	lhui	r4, r5, 22
100009a0:	e4650018 	lhui	r3, r5, 24
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
100009a4:	914a0061 	sext16	r10, r10
    tmp7 = dataptr[0] - dataptr[7];
100009a8:	fb810004 	swi	r28, r1, 4
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
100009ac:	1796b800 	rsubk	r28, r22, r23
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
100009b0:	91290061 	sext16	r9, r9
100009b4:	91080061 	sext16	r8, r8
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
100009b8:	fb81000c 	swi	r28, r1, 12
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
100009bc:	178a5800 	rsubk	r28, r10, r11
    tmp1 = dataptr[1] + dataptr[6];
100009c0:	93390061 	sext16	r25, r25
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
100009c4:	90e70061 	sext16	r7, r7
 * This function computes the DCT of a 8x8 data block
 * using the Loeffler's algorithm.
 *   
 */
void loeffler_8x8_dct(sb_int16_t *const block)
{
100009c8:	fa61007c 	swi	r19, r1, 124
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
100009cc:	e5850008 	lhui	r12, r5, 8
100009d0:	e6650006 	lhui	r19, r5, 6
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
100009d4:	93180061 	sext16	r24, r24
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
100009d8:	90c60061 	sext16	r6, r6
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
100009dc:	fb810010 	swi	r28, r1, 16
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
100009e0:	17884800 	rsubk	r28, r8, r9
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
100009e4:	90840061 	sext16	r4, r4
 * This function computes the DCT of a 8x8 data block
 * using the Loeffler's algorithm.
 *   
 */
void loeffler_8x8_dct(sb_int16_t *const block)
{
100009e8:	fbe100a4 	swi	r31, r1, 164
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
100009ec:	90630061 	sext16	r3, r3
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
100009f0:	17f8c800 	rsubk	r31, r24, r25
100009f4:	fb810014 	swi	r28, r1, 20
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
100009f8:	17863800 	rsubk	r28, r6, r7
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
100009fc:	1319c000 	addk	r24, r25, r24
 * This function computes the DCT of a 8x8 data block
 * using the Loeffler's algorithm.
 *   
 */
void loeffler_8x8_dct(sb_int16_t *const block)
{
10000a00:	fba1009c 	swi	r29, r1, 156
10000a04:	fbc100a0 	swi	r30, r1, 160
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
10000a08:	fbe10008 	swi	r31, r1, 8
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
10000a0c:	fb810018 	swi	r28, r1, 24
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
10000a10:	17832000 	rsubk	r28, r3, r4
10000a14:	fb81001c 	swi	r28, r1, 28
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000a18:	92730061 	sext16	r19, r19
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000a1c:	fb01002c 	swi	r24, r1, 44
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000a20:	918c0061 	sext16	r12, r12
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
10000a24:	eb010014 	lwi	r24, r1, 20
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
10000a28:	17ec9800 	rsubk	r31, r12, r19
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000a2c:	135bd000 	addk	r26, r27, r26
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000a30:	12d7b000 	addk	r22, r23, r22
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000a34:	11936000 	addk	r12, r19, r12
10000a38:	10641800 	addk	r3, r4, r3
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000a3c:	fb410028 	swi	r26, r1, 40
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000a40:	fac10020 	swi	r22, r1, 32
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000a44:	f9810048 	swi	r12, r1, 72
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000a48:	11094000 	addk	r8, r9, r8
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000a4c:	10c73000 	addk	r6, r7, r6
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000a50:	f8610038 	swi	r3, r1, 56
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
10000a54:	109cc000 	addk	r4, r28, r24
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000a58:	f9010034 	swi	r8, r1, 52
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000a5c:	f8c10054 	swi	r6, r1, 84
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000a60:	eb810048 	lwi	r28, r1, 72
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000a64:	e8e10020 	lwi	r7, r1, 32
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000a68:	eb610028 	lwi	r27, r1, 40
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000a6c:	e8c1002c 	lwi	r6, r1, 44
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000a70:	e9010038 	lwi	r8, r1, 56
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
10000a74:	e9810008 	lwi	r12, r1, 8
    z4 = tmp5 + tmp7;
10000a78:	ea61000c 	lwi	r19, r1, 12
10000a7c:	eae10004 	lwi	r23, r1, 4
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000a80:	114b5000 	addk	r10, r11, r10
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000a84:	177cd800 	rsubk	r27, r28, r27
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000a88:	14c73000 	rsubk	r6, r7, r6
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000a8c:	15085000 	rsubk	r8, r8, r10
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000a90:	f9410050 	swi	r10, r1, 80

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000a94:	e9210034 	lwi	r9, r1, 52
10000a98:	e9410054 	lwi	r10, r1, 84
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
10000a9c:	12df6000 	addk	r22, r31, r12
    z4 = tmp5 + tmp7;
10000aa0:	13d3b800 	addk	r30, r19, r23
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000aa4:	fb610024 	swi	r27, r1, 36
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000aa8:	f8c10030 	swi	r6, r1, 48

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
10000aac:	eb210018 	lwi	r25, r1, 24
10000ab0:	eb410010 	lwi	r26, r1, 16
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
10000ab4:	13bfb800 	addk	r29, r31, r23
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
10000ab8:	10d6f000 	addk	r6, r22, r30
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
10000abc:	e961001c 	lwi	r11, r1, 28
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
10000ac0:	60f6c13b 	muli	r7, r22, -16069
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10000ac4:	eae10024 	lwi	r23, r1, 36
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
10000ac8:	63bde333 	muli	r29, r29, -7373
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10000acc:	eac10030 	lwi	r22, r1, 48
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
10000ad0:	60c625a1 	muli	r6, r6, 9633

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000ad4:	152a4800 	rsubk	r9, r10, r9
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
10000ad8:	63def384 	muli	r30, r30, -3196
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000adc:	f901003c 	swi	r8, r1, 60
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000ae0:	f9210058 	swi	r9, r1, 88
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
10000ae4:	11136000 	addk	r8, r19, r12
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000ae8:	e7650020 	lhui	r27, r5, 32

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
10000aec:	1079d000 	addk	r3, r25, r26
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
10000af0:	112bd000 	addk	r9, r11, r26
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
10000af4:	6268adfd 	muli	r19, r8, -20995
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
10000af8:	1159c000 	addk	r10, r25, r24
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
10000afc:	633f098e 	muli	r25, r31, 2446
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10000b00:	1176b800 	addk	r11, r22, r23
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
10000b04:	6189e333 	muli	r12, r9, -7373
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
10000b08:	eb41000c 	lwi	r26, r1, 12
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
10000b0c:	614aadfd 	muli	r10, r10, -20995
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10000b10:	ebe10058 	lwi	r31, r1, 88
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
10000b14:	631a41b3 	muli	r24, r26, 16819
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10000b18:	e901003c 	lwi	r8, r1, 60
10000b1c:	616b1151 	muli	r11, r11, 4433
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
10000b20:	eac10008 	lwi	r22, r1, 8
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
10000b24:	13841800 	addk	r28, r4, r3
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
10000b28:	fba1004c 	swi	r29, r1, 76
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000b2c:	937b0061 	sext16	r27, r27
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10000b30:	135f4000 	addk	r26, r31, r8
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
10000b34:	12e73000 	addk	r23, r7, r6
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
10000b38:	639c25a1 	muli	r28, r28, 9633
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
10000b3c:	e8e10004 	lwi	r7, r1, 4
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
10000b40:	63f66254 	muli	r31, r22, 25172
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000b44:	e5250028 	lhui	r9, r5, 40
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
10000b48:	6084c13b 	muli	r4, r4, -16069
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000b4c:	fb61000c 	swi	r27, r1, 12
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
10000b50:	6063f384 	muli	r3, r3, -3196
    z3 += z5;	
    z4 += z5;
10000b54:	12de3000 	addk	r22, r30, r6
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
10000b58:	63a7300b 	muli	r29, r7, 12299
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000b5c:	e4c50022 	lhui	r6, r5, 34
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
10000b60:	1084e000 	addk	r4, r4, r28
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000b64:	90c60061 	sext16	r6, r6
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
10000b68:	eb61001c 	lwi	r27, r1, 28
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;
10000b6c:	1063e000 	addk	r3, r3, r28
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
10000b70:	f8810004 	swi	r4, r1, 4
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
10000b74:	e8810014 	lwi	r4, r1, 20
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000b78:	f8c10014 	swi	r6, r1, 20
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000b7c:	e4c50024 	lhui	r6, r5, 36
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;
10000b80:	f8610008 	swi	r3, r1, 8
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000b84:	e465002e 	lhui	r3, r5, 46
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
10000b88:	611b098e 	muli	r8, r27, 2446
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000b8c:	90c60061 	sext16	r6, r6
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
10000b90:	63646254 	muli	r27, r4, 25172
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000b94:	e485002c 	lhui	r4, r5, 44
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000b98:	90630061 	sext16	r3, r3
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000b9c:	f8c10040 	swi	r6, r1, 64
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10000ba0:	e8c10024 	lwi	r6, r1, 36
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
10000ba4:	eb810018 	lwi	r28, r1, 24
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000ba8:	f8610018 	swi	r3, r1, 24
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
10000bac:	e8610010 	lwi	r3, r1, 16
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000bb0:	90840061 	sext16	r4, r4
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000bb4:	91290061 	sext16	r9, r9
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000bb8:	f8810010 	swi	r4, r1, 16
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10000bbc:	6086187e 	muli	r4, r6, 6270
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10000bc0:	e8c10030 	lwi	r6, r1, 48
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
10000bc4:	60fc41b3 	muli	r7, r28, 16819
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000bc8:	f9210030 	swi	r9, r1, 48
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
10000bcc:	6383300b 	muli	r28, r3, 12299
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10000bd0:	e921003c 	lwi	r9, r1, 60
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10000bd4:	607a1151 	muli	r3, r26, 4433
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000bd8:	e745002a 	lhui	r26, r5, 42
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10000bdc:	6129187e 	muli	r9, r9, 6270

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10000be0:	139c6000 	addk	r28, r28, r12
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000be4:	935a0061 	sext16	r26, r26
10000be8:	fb410044 	swi	r26, r1, 68
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000bec:	e7450026 	lhui	r26, r5, 38
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10000bf0:	f921005c 	swi	r9, r1, 92
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10000bf4:	e9210058 	lwi	r9, r1, 88
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000bf8:	935a0061 	sext16	r26, r26
10000bfc:	fb410024 	swi	r26, r1, 36
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10000c00:	6129c4df 	muli	r9, r9, -15137
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10000c04:	11086000 	addk	r8, r8, r12
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10000c08:	6346c4df 	muli	r26, r6, -15137
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10000c0c:	e8c1004c 	lwi	r6, r1, 76
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10000c10:	e9810048 	lwi	r12, r1, 72

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10000c14:	13bd3000 	addk	r29, r29, r6
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10000c18:	13393000 	addk	r25, r25, r6
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10000c1c:	f921003c 	swi	r9, r1, 60
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10000c20:	10db5000 	addk	r6, r27, r10
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
10000c24:	e9210020 	lwi	r9, r1, 32
10000c28:	eb61002c 	lwi	r27, r1, 44
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10000c2c:	10e75000 	addk	r7, r7, r10
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10000c30:	e9410028 	lwi	r10, r1, 40
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10000c34:	13ff9800 	addk	r31, r31, r19
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10000c38:	13189800 	addk	r24, r24, r19
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10000c3c:	126a6000 	addk	r19, r10, r12
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
10000c40:	119b4800 	addk	r12, r27, r9
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10000c44:	e9410050 	lwi	r10, r1, 80
10000c48:	eb610038 	lwi	r27, r1, 56
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
10000c4c:	e9210034 	lwi	r9, r1, 52
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10000c50:	1339b800 	addk	r25, r25, r23
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10000c54:	13cad800 	addk	r30, r10, r27
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
10000c58:	eb610054 	lwi	r27, r1, 84
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10000c5c:	12ffb800 	addk	r23, r31, r23
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10000c60:	135a5800 	addk	r26, r26, r11
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
10000c64:	1149d800 	addk	r10, r9, r27
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000c68:	eb610018 	lwi	r27, r1, 24
10000c6c:	e921000c 	lwi	r9, r1, 12
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10000c70:	1318b000 	addk	r24, r24, r22
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10000c74:	12ddb000 	addk	r22, r29, r22
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000c78:	1129d800 	addk	r9, r9, r27
10000c7c:	f921001c 	swi	r9, r1, 28
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000c80:	eb610010 	lwi	r27, r1, 16
10000c84:	e9210014 	lwi	r9, r1, 20
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10000c88:	ebe1005c 	lwi	r31, r1, 92
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10000c8c:	32f70400 	addik	r23, r23, 1024
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000c90:	1129d800 	addk	r9, r9, r27
10000c94:	f9210028 	swi	r9, r1, 40
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000c98:	eb610044 	lwi	r27, r1, 68
10000c9c:	e9210040 	lwi	r9, r1, 64

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10000ca0:	32d60400 	addik	r22, r22, 1024
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10000ca4:	335a0400 	addik	r26, r26, 1024
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000ca8:	1129d800 	addk	r9, r9, r27
10000cac:	f921002c 	swi	r9, r1, 44
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000cb0:	eb610030 	lwi	r27, r1, 48
10000cb4:	e9210024 	lwi	r9, r1, 36
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10000cb8:	33390400 	addik	r25, r25, 1024
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10000cbc:	33180400 	addik	r24, r24, 1024
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000cc0:	1129d800 	addk	r9, r9, r27
10000cc4:	f9210020 	swi	r9, r1, 32
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10000cc8:	13645800 	addk	r27, r4, r11
10000ccc:	113f1800 	addk	r9, r31, r3
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10000cd0:	e9610004 	lwi	r11, r1, 4
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10000cd4:	ebe10008 	lwi	r31, r1, 8
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10000cd8:	e881003c 	lwi	r4, r1, 60
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10000cdc:	11085800 	addk	r8, r8, r11
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10000ce0:	10c65800 	addk	r6, r6, r11
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10000ce4:	10641800 	addk	r3, r4, r3
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10000ce8:	e961001c 	lwi	r11, r1, 28

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10000cec:	109cf800 	addk	r4, r28, r31
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10000cf0:	eb810020 	lwi	r28, r1, 32
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10000cf4:	10e7f800 	addk	r7, r7, r31
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
10000cf8:	ebe10028 	lwi	r31, r1, 40
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10000cfc:	116be000 	addk	r11, r11, r28
10000d00:	f9610048 	swi	r11, r1, 72
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
10000d04:	e961002c 	lwi	r11, r1, 44
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10000d08:	13936000 	addk	r28, r19, r12
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10000d0c:	30630400 	addik	r3, r3, 1024
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
10000d10:	13ff5800 	addk	r31, r31, r11
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10000d14:	158c9800 	rsubk	r12, r12, r19
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10000d18:	117e5000 	addk	r11, r30, r10
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10000d1c:	337b0400 	addik	r27, r27, 1024
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10000d20:	154af000 	rsubk	r10, r10, r30
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10000d24:	31290400 	addik	r9, r9, 1024
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
10000d28:	fbe1004c 	swi	r31, r1, 76

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10000d2c:	67b6020b 	bsrai	r29, r22, 11
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10000d30:	67f7020b 	bsrai	r31, r23, 11
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10000d34:	6663020b 	bsrai	r19, r3, 11
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10000d38:	679c0402 	bslli	r28, r28, 2
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10000d3c:	658c0402 	bslli	r12, r12, 2
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10000d40:	677b020b 	bsrai	r27, r27, 11
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10000d44:	675a020b 	bsrai	r26, r26, 11
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10000d48:	6739020b 	bsrai	r25, r25, 11
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10000d4c:	6718020b 	bsrai	r24, r24, 11
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10000d50:	656b0402 	bslli	r11, r11, 2
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10000d54:	654a0402 	bslli	r10, r10, 2
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10000d58:	6529020b 	bsrai	r9, r9, 11
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10000d5c:	31080400 	addik	r8, r8, 1024
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10000d60:	eac10048 	lwi	r22, r1, 72
10000d64:	eae1004c 	lwi	r23, r1, 76
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10000d68:	6508020b 	bsrai	r8, r8, 11
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10000d6c:	f7850000 	shi	r28, r5, 0
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10000d70:	f5850008 	shi	r12, r5, 8
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10000d74:	f7650004 	shi	r27, r5, 4
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10000d78:	f745000c 	shi	r26, r5, 12
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10000d7c:	f725000e 	shi	r25, r5, 14
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10000d80:	f705000a 	shi	r24, r5, 10
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10000d84:	f7e50006 	shi	r31, r5, 6
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10000d88:	f7a50002 	shi	r29, r5, 2
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10000d8c:	f5650010 	shi	r11, r5, 16
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10000d90:	f5450018 	shi	r10, r5, 24
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10000d94:	f5250014 	shi	r9, r5, 20
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10000d98:	f665001c 	shi	r19, r5, 28
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10000d9c:	f505001e 	shi	r8, r5, 30
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
10000da0:	eb01000c 	lwi	r24, r1, 12
10000da4:	eb210018 	lwi	r25, r1, 24
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
10000da8:	ea610014 	lwi	r19, r1, 20
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10000dac:	1076b800 	addk	r3, r22, r23
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
10000db0:	eac10010 	lwi	r22, r1, 16
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
10000db4:	1719c000 	rsubk	r24, r25, r24
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000db8:	e5650034 	lhui	r11, r5, 52
10000dbc:	e545003a 	lhui	r10, r5, 58
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
10000dc0:	15969800 	rsubk	r12, r22, r19
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
10000dc4:	eb210024 	lwi	r25, r1, 36
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
10000dc8:	fb010004 	swi	r24, r1, 4
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
10000dcc:	eae10040 	lwi	r23, r1, 64
10000dd0:	eb010044 	lwi	r24, r1, 68
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
10000dd4:	ea610030 	lwi	r19, r1, 48

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10000dd8:	30840400 	addik	r4, r4, 1024
10000ddc:	6484020b 	bsrai	r4, r4, 11
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10000de0:	64630402 	bslli	r3, r3, 2
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000de4:	916b0061 	sext16	r11, r11
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000de8:	e7a50030 	lhui	r29, r5, 48
10000dec:	e785003e 	lhui	r28, r5, 62
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000df0:	914a0061 	sext16	r10, r10
    tmp5 = dataptr[2] - dataptr[5];
10000df4:	16d8b800 	rsubk	r22, r24, r23

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10000df8:	f4850012 	shi	r4, r5, 18
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
10000dfc:	16f3c800 	rsubk	r23, r19, r25
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10000e00:	f4650020 	shi	r3, r5, 32
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
10000e04:	166a5800 	rsubk	r19, r10, r11
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000e08:	e7650032 	lhui	r27, r5, 50
10000e0c:	e745003c 	lhui	r26, r5, 60
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000e10:	e4850036 	lhui	r4, r5, 54
10000e14:	e4650038 	lhui	r3, r5, 56
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
10000e18:	fa610010 	swi	r19, r1, 16

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
10000e1c:	ea610004 	lwi	r19, r1, 4
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000e20:	93bd0061 	sext16	r29, r29
10000e24:	939c0061 	sext16	r28, r28
    tmp7 = dataptr[0] - dataptr[7];
10000e28:	171ce800 	rsubk	r24, r28, r29
    tmp1 = dataptr[1] + dataptr[6];
10000e2c:	937b0061 	sext16	r27, r27
10000e30:	935a0061 	sext16	r26, r26
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000e34:	90630061 	sext16	r3, r3
10000e38:	90840061 	sext16	r4, r4
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10000e3c:	30c60400 	addik	r6, r6, 1024
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
10000e40:	173ad800 	rsubk	r25, r26, r27
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
10000e44:	fb010008 	swi	r24, r1, 8

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
10000e48:	12769800 	addk	r19, r22, r19
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
10000e4c:	17032000 	rsubk	r24, r3, r4
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10000e50:	64c6020b 	bsrai	r6, r6, 11
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
10000e54:	fb21000c 	swi	r25, r1, 12
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
10000e58:	fb010014 	swi	r24, r1, 20
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000e5c:	10841800 	addk	r4, r4, r3

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
10000e60:	fa610024 	swi	r19, r1, 36
10000e64:	e8610008 	lwi	r3, r1, 8
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000e68:	127de000 	addk	r19, r29, r28
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10000e6c:	30e70400 	addik	r7, r7, 1024

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
10000e70:	eb810010 	lwi	r28, r1, 16
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000e74:	131bd000 	addk	r24, r27, r26
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10000e78:	64e7020b 	bsrai	r7, r7, 11
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
10000e7c:	eb410014 	lwi	r26, r1, 20
10000e80:	eb61000c 	lwi	r27, r1, 12
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10000e84:	f4c50016 	shi	r6, r5, 22
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000e88:	e4c50046 	lhui	r6, r5, 70

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
10000e8c:	139c1800 	addk	r28, r28, r3
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10000e90:	f4e5001a 	shi	r7, r5, 26
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000e94:	e5250042 	lhui	r9, r5, 66
10000e98:	e7e5004c 	lhui	r31, r5, 76
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000e9c:	114b5000 	addk	r10, r11, r10
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000ea0:	e7c5004e 	lhui	r30, r5, 78
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
10000ea4:	117ad800 	addk	r11, r26, r27
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000ea8:	e5050044 	lhui	r8, r5, 68
10000eac:	e4e5004a 	lhui	r7, r5, 74
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000eb0:	90c60061 	sext16	r6, r6

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
10000eb4:	fb810050 	swi	r28, r1, 80
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000eb8:	e7450040 	lhui	r26, r5, 64
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000ebc:	e7650048 	lhui	r27, r5, 72
10000ec0:	f8c10064 	swi	r6, r1, 100

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000ec4:	e8610028 	lwi	r3, r1, 40
10000ec8:	e8c1002c 	lwi	r6, r1, 44
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000ecc:	91290061 	sext16	r9, r9
10000ed0:	93ff0061 	sext16	r31, r31
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000ed4:	935a0061 	sext16	r26, r26
10000ed8:	93de0061 	sext16	r30, r30
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000edc:	f921003c 	swi	r9, r1, 60
10000ee0:	fbe10058 	swi	r31, r1, 88
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000ee4:	937b0061 	sext16	r27, r27
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000ee8:	113af000 	addk	r9, r26, r30
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000eec:	fb610068 	swi	r27, r1, 104
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000ef0:	eb81001c 	lwi	r28, r1, 28
10000ef4:	ebe10020 	lwi	r31, r1, 32
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000ef8:	14661800 	rsubk	r3, r6, r3
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000efc:	eb610058 	lwi	r27, r1, 88
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000f00:	fb410034 	swi	r26, r1, 52
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000f04:	eb41003c 	lwi	r26, r1, 60
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000f08:	e8c10068 	lwi	r6, r1, 104
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000f0c:	91080061 	sext16	r8, r8

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000f10:	f861001c 	swi	r3, r1, 28
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000f14:	e8610064 	lwi	r3, r1, 100
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000f18:	f9010044 	swi	r8, r1, 68
10000f1c:	90e70061 	sext16	r7, r7

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000f20:	150ac000 	rsubk	r8, r10, r24
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000f24:	f8e1005c 	swi	r7, r1, 92
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000f28:	179fe000 	rsubk	r28, r31, r28
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000f2c:	f9210038 	swi	r9, r1, 56
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000f30:	135ad800 	addk	r26, r26, r27
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
10000f34:	e9210014 	lwi	r9, r1, 20
10000f38:	eb610008 	lwi	r27, r1, 8

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000f3c:	f9010030 	swi	r8, r1, 48
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
10000f40:	e9010024 	lwi	r8, r1, 36
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000f44:	ebe1005c 	lwi	r31, r1, 92
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000f48:	10633000 	addk	r3, r3, r6
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000f4c:	fb810018 	swi	r28, r1, 24
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000f50:	eb810044 	lwi	r28, r1, 68
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
10000f54:	13376000 	addk	r25, r23, r12
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000f58:	14e49800 	rsubk	r7, r4, r19
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10000f5c:	f861006c 	swi	r3, r1, 108
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10000f60:	fbc10054 	swi	r30, r1, 84
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000f64:	f8e1002c 	swi	r7, r1, 44
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
10000f68:	13c9d800 	addk	r30, r9, r27
10000f6c:	e8e10004 	lwi	r7, r1, 4
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000f70:	e921006c 	lwi	r9, r1, 108
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10000f74:	fb410040 	swi	r26, r1, 64
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
10000f78:	13594000 	addk	r26, r25, r8
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000f7c:	e9010038 	lwi	r8, r1, 56
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000f80:	139cf800 	addk	r28, r28, r31
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
10000f84:	e861000c 	lwi	r3, r1, 12
10000f88:	ebe10010 	lwi	r31, r1, 16
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000f8c:	15094000 	rsubk	r8, r9, r8
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10000f90:	fb810060 	swi	r28, r1, 96
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
10000f94:	13973800 	addk	r28, r23, r7
    z2 = tmp5 + tmp6;
10000f98:	10df1800 	addk	r6, r31, r3
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
10000f9c:	613ce333 	muli	r9, r28, -7373
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
10000fa0:	e8e10050 	lwi	r7, r1, 80
10000fa4:	63fa25a1 	muli	r31, r26, 9633
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10000fa8:	f9010070 	swi	r8, r1, 112
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
10000fac:	62f7098e 	muli	r23, r23, 2446

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000fb0:	eb810060 	lwi	r28, r1, 96
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
10000fb4:	6339c13b 	muli	r25, r25, -16069

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000fb8:	eb410040 	lwi	r26, r1, 64
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10000fbc:	e861001c 	lwi	r3, r1, 28
10000fc0:	e9010018 	lwi	r8, r1, 24
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
10000fc4:	136b3800 	addk	r27, r11, r7

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000fc8:	175cd000 	rsubk	r26, r28, r26
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
10000fcc:	13b66000 	addk	r29, r22, r12

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10000fd0:	fb410074 	swi	r26, r1, 116
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10000fd4:	eb81002c 	lwi	r28, r1, 44
10000fd8:	13434000 	addk	r26, r3, r8
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
10000fdc:	611b25a1 	muli	r8, r27, 9633
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10000fe0:	eb610030 	lwi	r27, r1, 48
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
10000fe4:	60fdadfd 	muli	r7, r29, -20995
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10000fe8:	10932000 	addk	r4, r19, r4
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
10000fec:	62d641b3 	muli	r22, r22, 16819
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10000ff0:	13bbe000 	addk	r29, r27, r28
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
10000ff4:	626c6254 	muli	r19, r12, 25172
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10000ff8:	eb810070 	lwi	r28, r1, 112
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
10000ffc:	607ee333 	muli	r3, r30, -7373
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10001000:	eb610074 	lwi	r27, r1, 116
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
10001004:	63c6adfd 	muli	r30, r6, -20995
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001008:	12d63800 	addk	r22, r22, r7
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
1000100c:	616bc13b 	muli	r11, r11, -16069
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
10001010:	e8c10004 	lwi	r6, r1, 4
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10001014:	635a1151 	muli	r26, r26, 4433
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10001018:	12733800 	addk	r19, r19, r7
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
1000101c:	6186300b 	muli	r12, r6, 12299
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
10001020:	e8e10050 	lwi	r7, r1, 80
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10001024:	63bd1151 	muli	r29, r29, 4433
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10001028:	f8810028 	swi	r4, r1, 40
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
1000102c:	e8810024 	lwi	r4, r1, 36
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10001030:	137be000 	addk	r27, r27, r28
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
10001034:	11585000 	addk	r10, r24, r10
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10001038:	fb610078 	swi	r27, r1, 120
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
1000103c:	eb810010 	lwi	r28, r1, 16
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
10001040:	eb610014 	lwi	r27, r1, 20
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
10001044:	f9410020 	swi	r10, r1, 32
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
10001048:	6147f384 	muli	r10, r7, -3196
    z3 += z5;	
1000104c:	116b4000 	addk	r11, r11, r8
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
10001050:	6304f384 	muli	r24, r4, -3196
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
10001054:	e8810008 	lwi	r4, r1, 8
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;
10001058:	114a4000 	addk	r10, r10, r8

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
1000105c:	12f74800 	addk	r23, r23, r9
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10001060:	118c4800 	addk	r12, r12, r9
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
10001064:	611c41b3 	muli	r8, r28, 16819
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10001068:	eb81006c 	lwi	r28, r1, 108
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
1000106c:	613b098e 	muli	r9, r27, 2446
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10001070:	eb610038 	lwi	r27, r1, 56
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
10001074:	60c4300b 	muli	r6, r4, 12299
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
10001078:	1339f800 	addk	r25, r25, r31
    z4 += z5;
1000107c:	1318f800 	addk	r24, r24, r31
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
10001080:	ebe1000c 	lwi	r31, r1, 12
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10001084:	137be000 	addk	r27, r27, r28
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10001088:	11291800 	addk	r9, r9, r3
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
1000108c:	eb81001c 	lwi	r28, r1, 28
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
10001090:	60ff6254 	muli	r7, r31, 25172

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10001094:	10c61800 	addk	r6, r6, r3
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001098:	ebe10018 	lwi	r31, r1, 24
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
1000109c:	e8610040 	lwi	r3, r1, 64
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
100010a0:	fb610004 	swi	r27, r1, 4
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
100010a4:	eb610060 	lwi	r27, r1, 96
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
100010a8:	609f187e 	muli	r4, r31, 6270
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
100010ac:	1273c800 	addk	r19, r19, r25
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
100010b0:	13e3d800 	addk	r31, r3, r27
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
100010b4:	607cc4df 	muli	r3, r28, -15137
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
100010b8:	1084d000 	addk	r4, r4, r26
100010bc:	eb61002c 	lwi	r27, r1, 44
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
100010c0:	1063d000 	addk	r3, r3, r26
100010c4:	eb410030 	lwi	r26, r1, 48
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
100010c8:	639b187e 	muli	r28, r27, 6270
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
100010cc:	12f7c800 	addk	r23, r23, r25
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
100010d0:	637ac4df 	muli	r27, r26, -15137
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
100010d4:	eb410078 	lwi	r26, r1, 120
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
100010d8:	eb210074 	lwi	r25, r1, 116
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
100010dc:	635a1151 	muli	r26, r26, 4433
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
100010e0:	10e7f000 	addk	r7, r7, r30
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
100010e4:	6339c4df 	muli	r25, r25, -15137
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
100010e8:	fb410024 	swi	r26, r1, 36
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
100010ec:	eb410070 	lwi	r26, r1, 112
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
100010f0:	11295800 	addk	r9, r9, r11
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
100010f4:	10e75800 	addk	r7, r7, r11
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
100010f8:	635a187e 	muli	r26, r26, 6270
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
100010fc:	137be800 	addk	r27, r27, r29
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001100:	fb410008 	swi	r26, r1, 8
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10001104:	fb21006c 	swi	r25, r1, 108
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10001108:	e9610028 	lwi	r11, r1, 40
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
1000110c:	33330400 	addik	r25, r19, 1024
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10001110:	ea610020 	lwi	r19, r1, 32
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001114:	1108f000 	addk	r8, r8, r30
10001118:	11085000 	addk	r8, r8, r10
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
1000111c:	10c65000 	addk	r6, r6, r10
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10001120:	eb410048 	lwi	r26, r1, 72
10001124:	e941004c 	lwi	r10, r1, 76
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001128:	12d6c000 	addk	r22, r22, r24
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
1000112c:	118cc000 	addk	r12, r12, r24
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10001130:	130b9800 	addk	r24, r11, r19
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10001134:	16735800 	rsubk	r19, r19, r11
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10001138:	317b0400 	addik	r11, r27, 1024
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
1000113c:	eb610004 	lwi	r27, r1, 4
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10001140:	17cad000 	rsubk	r30, r10, r26
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001144:	139ce800 	addk	r28, r28, r29
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10001148:	31490400 	addik	r10, r9, 1024
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
1000114c:	33a40400 	addik	r29, r4, 1024
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001150:	31280400 	addik	r9, r8, 1024
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10001154:	149fd800 	rsubk	r4, r31, r27
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10001158:	31070400 	addik	r8, r7, 1024
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
1000115c:	30e60400 	addik	r7, r6, 1024
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10001160:	10dbf800 	addk	r6, r27, r31
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001164:	ebe10008 	lwi	r31, r1, 8
10001168:	eb610024 	lwi	r27, r1, 36
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
1000116c:	32f70400 	addik	r23, r23, 1024
10001170:	66f7020b 	bsrai	r23, r23, 11
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10001174:	67de0402 	bslli	r30, r30, 2
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001178:	67bd020b 	bsrai	r29, r29, 11
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
1000117c:	6739020b 	bsrai	r25, r25, 11
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10001180:	67180402 	bslli	r24, r24, 2
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10001184:	66730402 	bslli	r19, r19, 2
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10001188:	656b020b 	bsrai	r11, r11, 11
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
1000118c:	654a020b 	bsrai	r10, r10, 11
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001190:	6529020b 	bsrai	r9, r9, 11
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10001194:	6508020b 	bsrai	r8, r8, 11
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10001198:	64e7020b 	bsrai	r7, r7, 11
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
1000119c:	64c60402 	bslli	r6, r6, 2
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
100011a0:	64840402 	bslli	r4, r4, 2
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
100011a4:	33430400 	addik	r26, r3, 1024
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
100011a8:	32d60400 	addik	r22, r22, 1024
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
100011ac:	107fd800 	addk	r3, r31, r27

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
100011b0:	318c0400 	addik	r12, r12, 1024
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
100011b4:	67f6020b 	bsrai	r31, r22, 11
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
100011b8:	676c020b 	bsrai	r27, r12, 11
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
100011bc:	675a020b 	bsrai	r26, r26, 11
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
100011c0:	339c0400 	addik	r28, r28, 1024
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
100011c4:	f6e5002e 	shi	r23, r5, 46
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
100011c8:	eac10034 	lwi	r22, r1, 52
100011cc:	eae10054 	lwi	r23, r1, 84
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
100011d0:	30630400 	addik	r3, r3, 1024
100011d4:	659c020b 	bsrai	r12, r28, 11
100011d8:	6463020b 	bsrai	r3, r3, 11
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
100011dc:	16d7b000 	rsubk	r22, r23, r22
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
100011e0:	f7c50028 	shi	r30, r5, 40
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
100011e4:	f7a50024 	shi	r29, r5, 36
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
100011e8:	f745002c 	shi	r26, r5, 44
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
100011ec:	f7e5002a 	shi	r31, r5, 42
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
100011f0:	f7250026 	shi	r25, r5, 38
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
100011f4:	f7650022 	shi	r27, r5, 34
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
100011f8:	f7050030 	shi	r24, r5, 48
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
100011fc:	f6650038 	shi	r19, r5, 56
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001200:	f5850034 	shi	r12, r5, 52
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10001204:	f565003c 	shi	r11, r5, 60
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10001208:	f545003e 	shi	r10, r5, 62
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
1000120c:	f525003a 	shi	r9, r5, 58
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10001210:	f5050036 	shi	r8, r5, 54
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10001214:	f4e50032 	shi	r7, r5, 50
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10001218:	f4c50040 	shi	r6, r5, 64
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
1000121c:	f4850048 	shi	r4, r5, 72
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001220:	f4650044 	shi	r3, r5, 68
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10001224:	e4850050 	lhui	r4, r5, 80
10001228:	e4e5005e 	lhui	r7, r5, 94
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
1000122c:	e5050052 	lhui	r8, r5, 82
10001230:	e565005c 	lhui	r11, r5, 92
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10001234:	e6650054 	lhui	r19, r5, 84
10001238:	e585005a 	lhui	r12, r5, 90
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
1000123c:	e5450056 	lhui	r10, r5, 86
10001240:	e5250058 	lhui	r9, r5, 88
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10001244:	e4c50060 	lhui	r6, r5, 96
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10001248:	e7a5006c 	lhui	r29, r5, 108
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
1000124c:	e7850064 	lhui	r28, r5, 100
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10001250:	e4650068 	lhui	r3, r5, 104
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10001254:	e7e5006e 	lhui	r31, r5, 110
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10001258:	e7c50062 	lhui	r30, r5, 98
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
1000125c:	e745006a 	lhui	r26, r5, 106
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10001260:	e7250066 	lhui	r25, r5, 102
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
10001264:	fac10004 	swi	r22, r1, 4
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
10001268:	eb610058 	lwi	r27, r1, 88
1000126c:	eb01003c 	lwi	r24, r1, 60
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
10001270:	eac10044 	lwi	r22, r1, 68
10001274:	eae1005c 	lwi	r23, r1, 92
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
10001278:	171bc000 	rsubk	r24, r27, r24
1000127c:	fb010008 	swi	r24, r1, 8
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
10001280:	1777b000 	rsubk	r27, r23, r22
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
10001284:	eb010064 	lwi	r24, r1, 100
10001288:	eae10068 	lwi	r23, r1, 104
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
1000128c:	916b0061 	sext16	r11, r11
10001290:	91080061 	sext16	r8, r8
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
10001294:	16d7c000 	rsubk	r22, r23, r24
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10001298:	91290061 	sext16	r9, r9
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
1000129c:	16eb4000 	rsubk	r23, r11, r8
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
100012a0:	914a0061 	sext16	r10, r10
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
100012a4:	fae10010 	swi	r23, r1, 16
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
100012a8:	93de0061 	sext16	r30, r30
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
100012ac:	16e95000 	rsubk	r23, r9, r10
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
100012b0:	93bd0061 	sext16	r29, r29
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
100012b4:	90840061 	sext16	r4, r4
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
100012b8:	fae10018 	swi	r23, r1, 24
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
100012bc:	93390061 	sext16	r25, r25
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
100012c0:	16fdf000 	rsubk	r23, r29, r30
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
100012c4:	90e70061 	sext16	r7, r7
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
100012c8:	90630061 	sext16	r3, r3
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
100012cc:	17072000 	rsubk	r24, r7, r4
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
100012d0:	918c0061 	sext16	r12, r12
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
100012d4:	fae10028 	swi	r23, r1, 40
    tmp2 = dataptr[2] + dataptr[5];
100012d8:	92730061 	sext16	r19, r19
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
100012dc:	16e3c800 	rsubk	r23, r3, r25
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
100012e0:	fb01000c 	swi	r24, r1, 12
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
100012e4:	93ff0061 	sext16	r31, r31
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
100012e8:	170c9800 	rsubk	r24, r12, r19
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
100012ec:	fae10020 	swi	r23, r1, 32
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
100012f0:	90c60061 	sext16	r6, r6
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
100012f4:	eae10008 	lwi	r23, r1, 8
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
100012f8:	fb010014 	swi	r24, r1, 20
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
100012fc:	939c0061 	sext16	r28, r28
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
10001300:	171f3000 	rsubk	r24, r31, r6
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10001304:	935a0061 	sext16	r26, r26
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
10001308:	fb01001c 	swi	r24, r1, 28
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
1000130c:	171ae000 	rsubk	r24, r26, r28
10001310:	fb01002c 	swi	r24, r1, 44
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
10001314:	1316b800 	addk	r24, r22, r23
    z4 = tmp5 + tmp7;
10001318:	eae10004 	lwi	r23, r1, 4
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
1000131c:	10e43800 	addk	r7, r4, r7
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10001320:	11085800 	addk	r8, r8, r11

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
10001324:	12fbb800 	addk	r23, r27, r23
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10001328:	12736000 	addk	r19, r19, r12
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
1000132c:	e8810018 	lwi	r4, r1, 24
10001330:	e9610010 	lwi	r11, r1, 16
    z4 = tmp5 + tmp7;
10001334:	fae10074 	swi	r23, r1, 116
10001338:	e9810014 	lwi	r12, r1, 20
1000133c:	eae1000c 	lwi	r23, r1, 12
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10001340:	135cd000 	addk	r26, r28, r26
10001344:	fb410038 	swi	r26, r1, 56
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10001348:	10c6f800 	addk	r6, r6, r31
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
1000134c:	114a4800 	addk	r10, r10, r9

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
10001350:	118cb800 	addk	r12, r12, r23
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
10001354:	11245800 	addk	r9, r4, r11

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10001358:	ebe10038 	lwi	r31, r1, 56
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
1000135c:	e9610028 	lwi	r11, r1, 40
10001360:	e8810020 	lwi	r4, r1, 32
    z4 = tmp5 + tmp7;
10001364:	eae1001c 	lwi	r23, r1, 28
10001368:	f9810034 	swi	r12, r1, 52
1000136c:	e981002c 	lwi	r12, r1, 44
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10001370:	13bee800 	addk	r29, r30, r29
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10001374:	10791800 	addk	r3, r25, r3

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10001378:	17534000 	rsubk	r26, r19, r8
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
1000137c:	172a3800 	rsubk	r25, r10, r7
10001380:	17833000 	rsubk	r28, r3, r6
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10001384:	17ffe800 	rsubk	r31, r31, r29
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
10001388:	10845800 	addk	r4, r4, r11
    z4 = tmp5 + tmp7;
1000138c:	118cb800 	addk	r12, r12, r23
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
10001390:	fba10054 	swi	r29, r1, 84
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10001394:	fb210030 	swi	r25, r1, 48
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10001398:	fb410050 	swi	r26, r1, 80
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
1000139c:	fb810058 	swi	r28, r1, 88
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
100013a0:	fbe10040 	swi	r31, r1, 64
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
100013a4:	f8810044 	swi	r4, r1, 68
    z4 = tmp5 + tmp7;
100013a8:	f981005c 	swi	r12, r1, 92
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
100013ac:	e8810018 	lwi	r4, r1, 24
100013b0:	e961000c 	lwi	r11, r1, 12
100013b4:	eb210004 	lwi	r25, r1, 4
    z2 = tmp5 + tmp6;
100013b8:	eb410008 	lwi	r26, r1, 8
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
100013bc:	ebe10074 	lwi	r31, r1, 116
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
100013c0:	13c45800 	addk	r30, r4, r11
    z2 = tmp5 + tmp6;
100013c4:	e9810014 	lwi	r12, r1, 20
100013c8:	eae10010 	lwi	r23, r1, 16
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
100013cc:	e8810034 	lwi	r4, r1, 52
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
100013d0:	1396c800 	addk	r28, r22, r25
    z2 = tmp5 + tmp6;
100013d4:	13bbd000 	addk	r29, r27, r26
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
100013d8:	1338f800 	addk	r25, r24, r31
100013dc:	13492000 	addk	r26, r9, r4
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
100013e0:	13ecb800 	addk	r31, r12, r23
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
100013e4:	e8810058 	lwi	r4, r1, 88
100013e8:	e9810030 	lwi	r12, r1, 48
100013ec:	e9610050 	lwi	r11, r1, 80
100013f0:	eae10040 	lwi	r23, r1, 64
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
100013f4:	10661800 	addk	r3, r6, r3
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
100013f8:	116b6000 	addk	r11, r11, r12
100013fc:	12f72000 	addk	r23, r23, r4
10001400:	f9610064 	swi	r11, r1, 100
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
10001404:	609a25a1 	muli	r4, r26, 9633
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10001408:	fae10068 	swi	r23, r1, 104
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
1000140c:	633925a1 	muli	r25, r25, 9633
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
10001410:	e981001c 	lwi	r12, r1, 28
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
10001414:	639ce333 	muli	r28, r28, -7373
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
10001418:	eb41005c 	lwi	r26, r1, 92
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
1000141c:	63bdadfd 	muli	r29, r29, -20995
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
10001420:	e9610020 	lwi	r11, r1, 32
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
10001424:	6318c13b 	muli	r24, r24, -16069
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
10001428:	eae10044 	lwi	r23, r1, 68
    tmp4 *= FIX_0_298631336; 
1000142c:	62d6098e 	muli	r22, r22, 2446
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10001430:	11475000 	addk	r10, r7, r10
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
10001434:	63dee333 	muli	r30, r30, -7373
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
10001438:	e8e10004 	lwi	r7, r1, 4
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
1000143c:	63ffadfd 	muli	r31, r31, -20995
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10001440:	f861003c 	swi	r3, r1, 60
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
10001444:	e8610074 	lwi	r3, r1, 116
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
10001448:	116b6000 	addk	r11, r11, r12
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
1000144c:	12f7d000 	addk	r23, r23, r26
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
10001450:	12689800 	addk	r19, r8, r19
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
10001454:	f9610060 	swi	r11, r1, 96
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
10001458:	fae10070 	swi	r23, r1, 112
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
1000145c:	f9410048 	swi	r10, r1, 72
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
10001460:	fa61004c 	swi	r19, r1, 76
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
10001464:	6149c13b 	muli	r10, r9, -16069
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
10001468:	1318c800 	addk	r24, r24, r25
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
1000146c:	627b41b3 	muli	r19, r27, 16819
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10001470:	12d6e000 	addk	r22, r22, r28
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
10001474:	62e3f384 	muli	r23, r3, -3196
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
10001478:	e8c10008 	lwi	r6, r1, 8
    tmp7 *= FIX_1_501321110;
1000147c:	6167300b 	muli	r11, r7, 12299
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;
10001480:	12f7c800 	addk	r23, r23, r25
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
10001484:	61866254 	muli	r12, r6, 25172
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001488:	1073e800 	addk	r3, r19, r29
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
1000148c:	116be000 	addk	r11, r11, r28
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
10001490:	e9010034 	lwi	r8, r1, 52
    z3 += z5;	
10001494:	138a2000 	addk	r28, r10, r4
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
10001498:	ea610014 	lwi	r19, r1, 20
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
1000149c:	e9410018 	lwi	r10, r1, 24
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
100014a0:	eb210010 	lwi	r25, r1, 16
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
100014a4:	6128f384 	muli	r9, r8, -3196
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
100014a8:	eb41000c 	lwi	r26, r1, 12
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
100014ac:	60f341b3 	muli	r7, r19, 16819
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
100014b0:	ea610054 	lwi	r19, r1, 84
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
100014b4:	610a098e 	muli	r8, r10, 2446
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;
100014b8:	13692000 	addk	r27, r9, r4
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
100014bc:	60d96254 	muli	r6, r25, 25172
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
100014c0:	eb210038 	lwi	r25, r1, 56
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
100014c4:	609a300b 	muli	r4, r26, 12299
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
100014c8:	1148f000 	addk	r10, r8, r30
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
100014cc:	10c6f800 	addk	r6, r6, r31
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
100014d0:	1107f800 	addk	r8, r7, r31
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
100014d4:	ebe10064 	lwi	r31, r1, 100
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
100014d8:	1273c800 	addk	r19, r19, r25
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
100014dc:	e8e10068 	lwi	r7, r1, 104
100014e0:	635f1151 	muli	r26, r31, 4433
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
100014e4:	fa610004 	swi	r19, r1, 4
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
100014e8:	61271151 	muli	r9, r7, 4433
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
100014ec:	ebe10070 	lwi	r31, r1, 112
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
100014f0:	eb210024 	lwi	r25, r1, 36
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
100014f4:	63ff25a1 	muli	r31, r31, 9633
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
100014f8:	e8e1006c 	lwi	r7, r1, 108
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
100014fc:	fbe10008 	swi	r31, r1, 8
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
10001500:	ebe10060 	lwi	r31, r1, 96
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10001504:	1267c800 	addk	r19, r7, r25
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001508:	e8e10030 	lwi	r7, r1, 48
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
1000150c:	63ffe333 	muli	r31, r31, -7373
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001510:	1063b800 	addk	r3, r3, r23
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001514:	6327187e 	muli	r25, r7, 6270
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
10001518:	fbe1000c 	swi	r31, r1, 12
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
1000151c:	ebe10050 	lwi	r31, r1, 80
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10001520:	118ce800 	addk	r12, r12, r29
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001524:	f8610018 	swi	r3, r1, 24
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10001528:	13b6c000 	addk	r29, r22, r24
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
1000152c:	e8610058 	lwi	r3, r1, 88
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10001530:	62dfc4df 	muli	r22, r31, -15137

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10001534:	13ebb800 	addk	r31, r11, r23
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
10001538:	e9610044 	lwi	r11, r1, 68
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
1000153c:	e8e10040 	lwi	r7, r1, 64
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
10001540:	eae10008 	lwi	r23, r1, 8

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10001544:	1084f000 	addk	r4, r4, r30
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10001548:	13ccc000 	addk	r30, r12, r24
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
1000154c:	6303187e 	muli	r24, r3, 6270
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001550:	1108d800 	addk	r8, r8, r27
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
10001554:	606bc13b 	muli	r3, r11, -16069

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10001558:	1084d800 	addk	r4, r4, r27
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
1000155c:	6187c4df 	muli	r12, r7, -15137
10001560:	10f6d000 	addk	r7, r22, r26
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
10001564:	eac10020 	lwi	r22, r1, 32
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
10001568:	1063b800 	addk	r3, r3, r23
1000156c:	f8610010 	swi	r3, r1, 16
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
10001570:	6176098e 	muli	r11, r22, 2446
    tmp5 *= FIX_2_053119869;
10001574:	e861002c 	lwi	r3, r1, 44
    tmp6 *= FIX_3_072711026;	
10001578:	eac10028 	lwi	r22, r1, 40
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
1000157c:	13784800 	addk	r27, r24, r9
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
10001580:	eae1001c 	lwi	r23, r1, 28
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10001584:	eb01000c 	lwi	r24, r1, 12
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001588:	1339d000 	addk	r25, r25, r26
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
1000158c:	606341b3 	muli	r3, r3, 16819
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
10001590:	eb41005c 	lwi	r26, r1, 92
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
10001594:	62d66254 	muli	r22, r22, 25172
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10001598:	114ae000 	addk	r10, r10, r28
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
1000159c:	635af384 	muli	r26, r26, -3196
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
100015a0:	10c6e000 	addk	r6, r6, r28
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
100015a4:	62f7300b 	muli	r23, r23, 12299
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
100015a8:	eb810018 	lwi	r28, r1, 24
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
100015ac:	f8610020 	swi	r3, r1, 32
    tmp6 *= FIX_3_072711026;	
100015b0:	fac10024 	swi	r22, r1, 36
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
100015b4:	106bc000 	addk	r3, r11, r24
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
100015b8:	12cc4800 	addk	r22, r12, r9
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
100015bc:	e961004c 	lwi	r11, r1, 76
100015c0:	e9210048 	lwi	r9, r1, 72
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
100015c4:	fb410014 	swi	r26, r1, 20
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
100015c8:	fae1001c 	swi	r23, r1, 28
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
100015cc:	335c0400 	addik	r26, r28, 1024
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
100015d0:	32fe0400 	addik	r23, r30, 1024
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
100015d4:	178b4800 	rsubk	r28, r11, r9
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
100015d8:	13c95800 	addk	r30, r9, r11
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
100015dc:	318a0400 	addik	r12, r10, 1024
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
100015e0:	31240400 	addik	r9, r4, 1024
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
100015e4:	31460400 	addik	r10, r6, 1024
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
100015e8:	e881003c 	lwi	r4, r1, 60
100015ec:	e8c10004 	lwi	r6, r1, 4
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
100015f0:	32730400 	addik	r19, r19, 1024
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
100015f4:	33bd0400 	addik	r29, r29, 1024
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
100015f8:	33070400 	addik	r24, r7, 1024
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
100015fc:	31680400 	addik	r11, r8, 1024
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10001600:	14e62000 	rsubk	r7, r6, r4
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10001604:	11043000 	addk	r8, r4, r6
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10001608:	6673020b 	bsrai	r19, r19, 11
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
1000160c:	67bd020b 	bsrai	r29, r29, 11
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001610:	675a020b 	bsrai	r26, r26, 11
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10001614:	66f7020b 	bsrai	r23, r23, 11
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10001618:	64e70402 	bslli	r7, r7, 2
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
1000161c:	656b020b 	bsrai	r11, r11, 11
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10001620:	654a020b 	bsrai	r10, r10, 11
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10001624:	6529020b 	bsrai	r9, r9, 11
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10001628:	65080402 	bslli	r8, r8, 2
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
1000162c:	679c0402 	bslli	r28, r28, 2
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10001630:	658c020b 	bsrai	r12, r12, 11
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10001634:	67de0402 	bslli	r30, r30, 2
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10001638:	6718020b 	bsrai	r24, r24, 11
1000163c:	30960400 	addik	r4, r22, 1024
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10001640:	eac10010 	lwi	r22, r1, 16
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10001644:	6484020b 	bsrai	r4, r4, 11
10001648:	f665004c 	shi	r19, r5, 76
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
1000164c:	f7a5004e 	shi	r29, r5, 78
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001650:	f745004a 	shi	r26, r5, 74
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10001654:	f6e50046 	shi	r23, r5, 70
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001658:	30db0400 	addik	r6, r27, 1024
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
1000165c:	1063b000 	addk	r3, r3, r22
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10001660:	f485006c 	shi	r4, r5, 108
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10001664:	e6650070 	lhui	r19, r5, 112
10001668:	e485007e 	lhui	r4, r5, 126
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
1000166c:	64c6020b 	bsrai	r6, r6, 11
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10001670:	30630400 	addik	r3, r3, 1024
10001674:	6463020b 	bsrai	r3, r3, 11
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
10001678:	92730061 	sext16	r19, r19
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
1000167c:	f4e50068 	shi	r7, r5, 104
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001680:	f4c50064 	shi	r6, r5, 100
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
10001684:	e4e50076 	lhui	r7, r5, 118
10001688:	e4c50078 	lhui	r6, r5, 120
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
1000168c:	90840061 	sext16	r4, r4
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001690:	f565005a 	shi	r11, r5, 90
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10001694:	f5450056 	shi	r10, r5, 86
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
10001698:	15649800 	rsubk	r11, r4, r19

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
1000169c:	f5250052 	shi	r9, r5, 82
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
100016a0:	10932000 	addk	r4, r19, r4
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
100016a4:	f5050060 	shi	r8, r5, 96
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
100016a8:	f465006e 	shi	r3, r5, 110
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
100016ac:	e5450072 	lhui	r10, r5, 114
100016b0:	e465007c 	lhui	r3, r5, 124
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
100016b4:	e5250074 	lhui	r9, r5, 116
100016b8:	e505007a 	lhui	r8, r5, 122
  /* ROW PROCESS */
  dataptr = block;
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
100016bc:	f8810004 	swi	r4, r1, 4

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
100016c0:	33ff0400 	addik	r31, r31, 1024
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
100016c4:	33390400 	addik	r25, r25, 1024
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
100016c8:	90e70061 	sext16	r7, r7
100016cc:	90c60061 	sext16	r6, r6
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
100016d0:	eae10004 	lwi	r23, r1, 4

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
100016d4:	67ff020b 	bsrai	r31, r31, 11
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
100016d8:	6739020b 	bsrai	r25, r25, 11
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
100016dc:	10873000 	addk	r4, r7, r6
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
100016e0:	914a0061 	sext16	r10, r10
100016e4:	90630061 	sext16	r3, r3
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
100016e8:	91290061 	sext16	r9, r9
100016ec:	91080061 	sext16	r8, r8
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
100016f0:	f7850058 	shi	r28, r5, 88
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
100016f4:	f585005e 	shi	r12, r5, 94
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
100016f8:	eb81002c 	lwi	r28, r1, 44
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
100016fc:	15863800 	rsubk	r12, r6, r7
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
10001700:	e8c10028 	lwi	r6, r1, 40

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10001704:	f7e50042 	shi	r31, r5, 66
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10001708:	f7c50050 	shi	r30, r5, 80
  for (i=N;i>0;i--) 
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
1000170c:	13ea1800 	addk	r31, r10, r3
    tmp6 = dataptr[1] - dataptr[6];
10001710:	17c35000 	rsubk	r30, r3, r10
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001714:	f7250054 	shi	r25, r5, 84
    /* first stage */
    tmp0 = dataptr[0] + dataptr[7];	
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
10001718:	10694000 	addk	r3, r9, r8
    tmp5 = dataptr[2] - dataptr[5];
1000171c:	17284800 	rsubk	r25, r8, r9

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
10001720:	13595800 	addk	r26, r25, r11
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10001724:	1544b800 	rsubk	r10, r4, r23
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
10001728:	1523f800 	rsubk	r9, r3, r31
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
1000172c:	f705005c 	shi	r24, r5, 92

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
10001730:	130cf000 	addk	r24, r12, r30
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
10001734:	137c3000 	addk	r27, r28, r6
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
10001738:	12f8d000 	addk	r23, r24, r26
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
1000173c:	10e95000 	addk	r7, r9, r10
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
10001740:	63bbadfd 	muli	r29, r27, -20995
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
10001744:	f8e10018 	swi	r7, r1, 24
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
10001748:	60d725a1 	muli	r6, r23, 9633
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;
1000174c:	e9010014 	lwi	r8, r1, 20
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
10001750:	635af384 	muli	r26, r26, -3196
    z3 += z5;	
    z4 += z5;
10001754:	eae10008 	lwi	r23, r1, 8
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
10001758:	6318c13b 	muli	r24, r24, -16069
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
1000175c:	eb610020 	lwi	r27, r1, 32
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001760:	614a187e 	muli	r10, r10, 6270
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10001764:	e8e10024 	lwi	r7, r1, 36
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10001768:	6129c4df 	muli	r9, r9, -15137
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;
1000176c:	1268b800 	addk	r19, r8, r23

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001770:	12fbe800 	addk	r23, r27, r29
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10001774:	e901001c 	lwi	r8, r1, 28
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10001778:	13a7e800 	addk	r29, r7, r29
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
1000177c:	e8e1000c 	lwi	r7, r1, 12
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
10001780:	1399f000 	addk	r28, r25, r30
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);

    /* third stage */
    z1 = tmp4 + tmp7; 
10001784:	12cc5800 	addk	r22, r12, r11
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
10001788:	639cadfd 	muli	r28, r28, -20995

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
1000178c:	13683800 	addk	r27, r8, r7
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
10001790:	633941b3 	muli	r25, r25, 16819
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
10001794:	13183000 	addk	r24, r24, r6
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
10001798:	610c098e 	muli	r8, r12, 2446
    z1 *= -FIX_0_899976223;	
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;
1000179c:	10da3000 	addk	r6, r26, r6
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
100017a0:	619e6254 	muli	r12, r30, 25172
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
100017a4:	eb410018 	lwi	r26, r1, 24
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
    z1 *= -FIX_0_899976223;	
100017a8:	62d6e333 	muli	r22, r22, -7373
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
100017ac:	107f1800 	addk	r3, r31, r3
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336; 
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;
100017b0:	616b300b 	muli	r11, r11, 12299
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
100017b4:	118ce000 	addk	r12, r12, r28
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
100017b8:	60fa1151 	muli	r7, r26, 4433
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
100017bc:	1339e000 	addk	r25, r25, r28
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
100017c0:	ebe10010 	lwi	r31, r1, 16
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
100017c4:	eb810004 	lwi	r28, r1, 4
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
100017c8:	1108b000 	addk	r8, r8, r22
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
100017cc:	116bb000 	addk	r11, r11, r22
100017d0:	116b3000 	addk	r11, r11, r6
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
100017d4:	109c2000 	addk	r4, r28, r4
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
100017d8:	12f79800 	addk	r23, r23, r19
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
100017dc:	12ddf800 	addk	r22, r29, r31
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
100017e0:	114a3800 	addk	r10, r10, r7
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
100017e4:	11293800 	addk	r9, r9, r7
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
100017e8:	1108c000 	addk	r8, r8, r24
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
100017ec:	10f93000 	addk	r7, r25, r6
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
100017f0:	130cc000 	addk	r24, r12, r24
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
100017f4:	127b9800 	addk	r19, r27, r19
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
100017f8:	11841800 	addk	r12, r4, r3
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
100017fc:	32f70400 	addik	r23, r23, 1024
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10001800:	14832000 	rsubk	r4, r3, r4
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10001804:	32d60400 	addik	r22, r22, 1024
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10001808:	306b0400 	addik	r3, r11, 1024
1000180c:	32730400 	addik	r19, r19, 1024
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001810:	314a0400 	addik	r10, r10, 1024
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10001814:	31290400 	addik	r9, r9, 1024
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10001818:	31080400 	addik	r8, r8, 1024
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
1000181c:	30e70400 	addik	r7, r7, 1024
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10001820:	30d80400 	addik	r6, r24, 1024
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10001824:	65640402 	bslli	r11, r4, 2
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001828:	66f7020b 	bsrai	r23, r23, 11
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
1000182c:	66d6020b 	bsrai	r22, r22, 11
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10001830:	6673020b 	bsrai	r19, r19, 11
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10001834:	658c0402 	bslli	r12, r12, 2
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
10001838:	654a020b 	bsrai	r10, r10, 11
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
1000183c:	6529020b 	bsrai	r9, r9, 11
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10001840:	6508020b 	bsrai	r8, r8, 11
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001844:	64e7020b 	bsrai	r7, r7, 11
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
10001848:	64c6020b 	bsrai	r6, r6, 11
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
1000184c:	6463020b 	bsrai	r3, r3, 11
 *
 * This function computes the DCT of a 8x8 data block
 * using the Loeffler's algorithm.
 *   
 */
void loeffler_8x8_dct(sb_int16_t *const block)
10001850:	10850000 	addk	r4, r5, r0
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001854:	f6e5006a 	shi	r23, r5, 106
 *
 * This function computes the DCT of a 8x8 data block
 * using the Loeffler's algorithm.
 *   
 */
void loeffler_8x8_dct(sb_int16_t *const block)
10001858:	33a50010 	addik	r29, r5, 16
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
1000185c:	f6c50066 	shi	r22, r5, 102
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10001860:	f6650062 	shi	r19, r5, 98
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] = (tmp10 + tmp11) << PASS1_BITS;
10001864:	f5850070 	shi	r12, r5, 112
    dataptr[4] = (tmp10 - tmp11) << PASS1_BITS;
10001868:	f5650078 	shi	r11, r5, 120
    z1 = (tmp12 + tmp13) * FIX_0_541196100;		
    dataptr[2] = DESCALE(z1 + tmp13 * FIX_0_765366865,MULT_SCALE);
1000186c:	f5450074 	shi	r10, r5, 116
    dataptr[6] = DESCALE(z1 + tmp12 * (-FIX_1_847759065),MULT_SCALE);
10001870:	f525007c 	shi	r9, r5, 124
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[7] = DESCALE(tmp4 + z1 + z3, MULT_SCALE);
10001874:	f505007e 	shi	r8, r5, 126
    dataptr[5] = DESCALE(tmp5 + z2 + z4, MULT_SCALE);
10001878:	f4e5007a 	shi	r7, r5, 122
    dataptr[3] = DESCALE(tmp6 + z2 + z3, MULT_SCALE);
1000187c:	f4c50076 	shi	r6, r5, 118
    dataptr[1] = DESCALE(tmp7 + z1 + z4, MULT_SCALE);
10001880:	f4650072 	shi	r3, r5, 114
  /* COLUMN PROCESS */
  dataptr = block;
  for (i=N;i>0;i--)  
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[56];
10001884:	e7840000 	lhui	r28, r4, 0
10001888:	e5840070 	lhui	r12, r4, 112
    tmp7 = dataptr[0] - dataptr[56];
    tmp1 = dataptr[8] + dataptr[48];
1000188c:	e6640010 	lhui	r19, r4, 16
10001890:	e5640060 	lhui	r11, r4, 96
    tmp6 = dataptr[8] - dataptr[48];
    tmp2 = dataptr[16] + dataptr[40];
10001894:	e7640020 	lhui	r27, r4, 32
10001898:	e5440050 	lhui	r10, r4, 80
    tmp5 = dataptr[16] - dataptr[40];
    tmp3 = dataptr[24] + dataptr[32];
1000189c:	e6c40030 	lhui	r22, r4, 48
100018a0:	e5240040 	lhui	r9, r4, 64
  /* COLUMN PROCESS */
  dataptr = block;
  for (i=N;i>0;i--)  
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[56];
100018a4:	918c0061 	sext16	r12, r12
    tmp7 = dataptr[0] - dataptr[56];
    tmp1 = dataptr[8] + dataptr[48];
100018a8:	916b0061 	sext16	r11, r11
    tmp6 = dataptr[8] - dataptr[48];
    tmp2 = dataptr[16] + dataptr[40];
100018ac:	914a0061 	sext16	r10, r10
    tmp5 = dataptr[16] - dataptr[40];
    tmp3 = dataptr[24] + dataptr[32];
100018b0:	91290061 	sext16	r9, r9
  /* COLUMN PROCESS */
  dataptr = block;
  for (i=N;i>0;i--)  
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[56];
100018b4:	939c0061 	sext16	r28, r28
    tmp7 = dataptr[0] - dataptr[56];
    tmp1 = dataptr[8] + dataptr[48];
100018b8:	92730061 	sext16	r19, r19
    tmp6 = dataptr[8] - dataptr[48];
    tmp2 = dataptr[16] + dataptr[40];
100018bc:	937b0061 	sext16	r27, r27
    tmp5 = dataptr[16] - dataptr[40];
    tmp3 = dataptr[24] + dataptr[32];
100018c0:	92d60061 	sext16	r22, r22
  dataptr = block;
  for (i=N;i>0;i--)  
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[56];
    tmp7 = dataptr[0] - dataptr[56];
100018c4:	146ce000 	rsubk	r3, r12, r28
    tmp1 = dataptr[8] + dataptr[48];
    tmp6 = dataptr[8] - dataptr[48];
100018c8:	14cb9800 	rsubk	r6, r11, r19
    tmp2 = dataptr[16] + dataptr[40];
    tmp5 = dataptr[16] - dataptr[40];
100018cc:	14ead800 	rsubk	r7, r10, r27
    tmp3 = dataptr[24] + dataptr[32];
    tmp4 = dataptr[24] - dataptr[32];
100018d0:	1509b000 	rsubk	r8, r9, r22
    /* first stage */
    tmp0 = dataptr[0] + dataptr[56];
    tmp7 = dataptr[0] - dataptr[56];
    tmp1 = dataptr[8] + dataptr[48];
    tmp6 = dataptr[8] - dataptr[48];
    tmp2 = dataptr[16] + dataptr[40];
100018d4:	137b5000 	addk	r27, r27, r10
    tmp5 = dataptr[16] - dataptr[40];
    tmp3 = dataptr[24] + dataptr[32];
100018d8:	12d64800 	addk	r22, r22, r9
    dataptr[48] = DESCALE(z1 + tmp12 * (-FIX_1_847759065), MULT_SCALE_2);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
100018dc:	11483000 	addk	r10, r8, r6
    z4 = tmp5 + tmp7;
100018e0:	11271800 	addk	r9, r7, r3
    dataptr[16] =	DESCALE(z1 + tmp13 * FIX_0_765366865, MULT_SCALE_2);
    dataptr[48] = DESCALE(z1 + tmp12 * (-FIX_1_847759065), MULT_SCALE_2);

    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
100018e4:	13273000 	addk	r25, r7, r6
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
100018e8:	134a4800 	addk	r26, r10, r9
  /* COLUMN PROCESS */
  dataptr = block;
  for (i=N;i>0;i--)  
  {
    /* first stage */
    tmp0 = dataptr[0] + dataptr[56];
100018ec:	139c6000 	addk	r28, r28, r12
    tmp7 = dataptr[0] - dataptr[56];
    tmp1 = dataptr[8] + dataptr[48];
100018f0:	12735800 	addk	r19, r19, r11
    /* third stage */
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
100018f4:	635a25a1 	muli	r26, r26, 9633

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
100018f8:	159b9800 	rsubk	r12, r27, r19
    tmp4 *= FIX_0_298631336;
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;	
    z1 *= -FIX_0_899976223;
    z2 *= -FIX_2_562915447;	
100018fc:	6339adfd 	muli	r25, r25, -20995
    tmp3 = dataptr[24] + dataptr[32];
    tmp4 = dataptr[24] - dataptr[32];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
10001900:	16f6e000 	rsubk	r23, r22, r28
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336;
    tmp5 *= FIX_2_053119869;
10001904:	60e741b3 	muli	r7, r7, 16819
    z1 = (tmp12 + tmp13) * FIX_0_541196100;							
    dataptr[16] =	DESCALE(z1 + tmp13 * FIX_0_765366865, MULT_SCALE_2);
    dataptr[48] = DESCALE(z1 + tmp12 * (-FIX_1_847759065), MULT_SCALE_2);

    /* third stage */
    z1 = tmp4 + tmp7; 
10001908:	13081800 	addk	r24, r8, r3
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;	
    z1 *= -FIX_0_899976223;
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
1000190c:	614ac13b 	muli	r10, r10, -16069
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] =  DESCALE((tmp10 + tmp11),PASS1_BITS);
    dataptr[32] = DESCALE((tmp10 - tmp11),PASS1_BITS);
    z1 = (tmp12 + tmp13) * FIX_0_541196100;							
10001910:	116cb800 	addk	r11, r12, r23
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;	
    z1 *= -FIX_0_899976223;
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
10001914:	6129f384 	muli	r9, r9, -3196
    z3 += z5;	
10001918:	114ad000 	addk	r10, r10, r26
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336;
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;	
    z1 *= -FIX_0_899976223;
1000191c:	6318e333 	muli	r24, r24, -7373
    z2 *= -FIX_2_562915447;	
    z3 *= -FIX_1_961570560;	
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;
10001920:	1129d000 	addk	r9, r9, r26
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336;
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
10001924:	60c66254 	muli	r6, r6, 25172
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[56] = DESCALE(tmp4 + z1 + z3, MULT_SCALE_2);
    dataptr[40] = DESCALE(tmp5 + z2 + z4, MULT_SCALE_2);
10001928:	1347c800 	addk	r26, r7, r25
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336;
    tmp5 *= FIX_2_053119869;
    tmp6 *= FIX_3_072711026;	
    tmp7 *= FIX_1_501321110;	
1000192c:	6063300b 	muli	r3, r3, 12299
    tmp5 = dataptr[16] - dataptr[40];
    tmp3 = dataptr[24] + dataptr[32];
    tmp4 = dataptr[24] - dataptr[32];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
10001930:	12dcb000 	addk	r22, r28, r22
    z1 = tmp4 + tmp7; 
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = (z3 + z4) * FIX_1_175875602;	
    tmp4 *= FIX_0_298631336;
10001934:	6108098e 	muli	r8, r8, 2446
    tmp4 = dataptr[24] - dataptr[32];

    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
10001938:	1273d800 	addk	r19, r19, r27
    tmp12 = tmp1 - tmp2;
    dataptr[0] =  DESCALE((tmp10 + tmp11),PASS1_BITS);
    dataptr[32] = DESCALE((tmp10 - tmp11),PASS1_BITS);
    z1 = (tmp12 + tmp13) * FIX_0_541196100;							
1000193c:	616b1151 	muli	r11, r11, 4433
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[56] = DESCALE(tmp4 + z1 + z3, MULT_SCALE_2);
10001940:	1108c000 	addk	r8, r8, r24
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] =  DESCALE((tmp10 + tmp11),PASS1_BITS);
    dataptr[32] = DESCALE((tmp10 - tmp11),PASS1_BITS);
    z1 = (tmp12 + tmp13) * FIX_0_541196100;							
    dataptr[16] =	DESCALE(z1 + tmp13 * FIX_0_765366865, MULT_SCALE_2);
10001944:	60f7187e 	muli	r7, r23, 6270
    z4 += z5;

    /* fourth stage */
    dataptr[56] = DESCALE(tmp4 + z1 + z3, MULT_SCALE_2);
    dataptr[40] = DESCALE(tmp5 + z2 + z4, MULT_SCALE_2);
    dataptr[24] = DESCALE(tmp6 + z2 + z3, MULT_SCALE_2);
10001948:	1326c800 	addk	r25, r6, r25
    tmp12 = tmp1 - tmp2;
    dataptr[0] =  DESCALE((tmp10 + tmp11),PASS1_BITS);
    dataptr[32] = DESCALE((tmp10 - tmp11),PASS1_BITS);
    z1 = (tmp12 + tmp13) * FIX_0_541196100;							
    dataptr[16] =	DESCALE(z1 + tmp13 * FIX_0_765366865, MULT_SCALE_2);
    dataptr[48] = DESCALE(z1 + tmp12 * (-FIX_1_847759065), MULT_SCALE_2);
1000194c:	618cc4df 	muli	r12, r12, -15137

    /* fourth stage */
    dataptr[56] = DESCALE(tmp4 + z1 + z3, MULT_SCALE_2);
    dataptr[40] = DESCALE(tmp5 + z2 + z4, MULT_SCALE_2);
    dataptr[24] = DESCALE(tmp6 + z2 + z3, MULT_SCALE_2);
    dataptr[8] = DESCALE(tmp7 + z1 + z4, MULT_SCALE_2);
10001950:	1303c000 	addk	r24, r3, r24
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[56] = DESCALE(tmp4 + z1 + z3, MULT_SCALE_2);
10001954:	10c85000 	addk	r6, r8, r10
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] =  DESCALE((tmp10 + tmp11),PASS1_BITS);
10001958:	13769800 	addk	r27, r22, r19
    dataptr[32] = DESCALE((tmp10 - tmp11),PASS1_BITS);
    z1 = (tmp12 + tmp13) * FIX_0_541196100;							
    dataptr[16] =	DESCALE(z1 + tmp13 * FIX_0_765366865, MULT_SCALE_2);
1000195c:	10e75800 	addk	r7, r7, r11
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[56] = DESCALE(tmp4 + z1 + z3, MULT_SCALE_2);
    dataptr[40] = DESCALE(tmp5 + z2 + z4, MULT_SCALE_2);
10001960:	107a4800 	addk	r3, r26, r9
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] =  DESCALE((tmp10 + tmp11),PASS1_BITS);
    dataptr[32] = DESCALE((tmp10 - tmp11),PASS1_BITS);
10001964:	1673b000 	rsubk	r19, r19, r22
    z1 = (tmp12 + tmp13) * FIX_0_541196100;							
    dataptr[16] =	DESCALE(z1 + tmp13 * FIX_0_765366865, MULT_SCALE_2);
    dataptr[48] = DESCALE(z1 + tmp12 * (-FIX_1_847759065), MULT_SCALE_2);
10001968:	116c5800 	addk	r11, r12, r11
    z4 += z5;

    /* fourth stage */
    dataptr[56] = DESCALE(tmp4 + z1 + z3, MULT_SCALE_2);
    dataptr[40] = DESCALE(tmp5 + z2 + z4, MULT_SCALE_2);
    dataptr[24] = DESCALE(tmp6 + z2 + z3, MULT_SCALE_2);
1000196c:	11595000 	addk	r10, r25, r10
    dataptr[8] = DESCALE(tmp7 + z1 + z4, MULT_SCALE_2);
10001970:	11384800 	addk	r9, r24, r9
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] =  DESCALE((tmp10 + tmp11),PASS1_BITS);
10001974:	311b0002 	addik	r8, r27, 2
    dataptr[32] = DESCALE((tmp10 - tmp11),PASS1_BITS);
10001978:	32730002 	addik	r19, r19, 2
    z1 = (tmp12 + tmp13) * FIX_0_541196100;							
    dataptr[16] =	DESCALE(z1 + tmp13 * FIX_0_765366865, MULT_SCALE_2);
1000197c:	30e74000 	addik	r7, r7, 16384
    dataptr[48] = DESCALE(z1 + tmp12 * (-FIX_1_847759065), MULT_SCALE_2);
10001980:	316b4000 	addik	r11, r11, 16384
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[56] = DESCALE(tmp4 + z1 + z3, MULT_SCALE_2);
10001984:	30c64000 	addik	r6, r6, 16384
    dataptr[40] = DESCALE(tmp5 + z2 + z4, MULT_SCALE_2);
10001988:	30634000 	addik	r3, r3, 16384
    dataptr[24] = DESCALE(tmp6 + z2 + z3, MULT_SCALE_2);
1000198c:	314a4000 	addik	r10, r10, 16384
    dataptr[8] = DESCALE(tmp7 + z1 + z4, MULT_SCALE_2);
10001990:	31294000 	addik	r9, r9, 16384
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[56] = DESCALE(tmp4 + z1 + z3, MULT_SCALE_2);
    dataptr[40] = DESCALE(tmp5 + z2 + z4, MULT_SCALE_2);
10001994:	6463020f 	bsrai	r3, r3, 15
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] =  DESCALE((tmp10 + tmp11),PASS1_BITS);
10001998:	65080202 	bsrai	r8, r8, 2
    dataptr[32] = DESCALE((tmp10 - tmp11),PASS1_BITS);
1000199c:	66730202 	bsrai	r19, r19, 2
    z1 = (tmp12 + tmp13) * FIX_0_541196100;							
    dataptr[16] =	DESCALE(z1 + tmp13 * FIX_0_765366865, MULT_SCALE_2);
100019a0:	64e7020f 	bsrai	r7, r7, 15
    dataptr[48] = DESCALE(z1 + tmp12 * (-FIX_1_847759065), MULT_SCALE_2);
100019a4:	656b020f 	bsrai	r11, r11, 15
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[56] = DESCALE(tmp4 + z1 + z3, MULT_SCALE_2);
100019a8:	64c6020f 	bsrai	r6, r6, 15
    dataptr[40] = DESCALE(tmp5 + z2 + z4, MULT_SCALE_2);
    dataptr[24] = DESCALE(tmp6 + z2 + z3, MULT_SCALE_2);
100019ac:	654a020f 	bsrai	r10, r10, 15
    dataptr[8] = DESCALE(tmp7 + z1 + z4, MULT_SCALE_2);
100019b0:	6529020f 	bsrai	r9, r9, 15
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[56] = DESCALE(tmp4 + z1 + z3, MULT_SCALE_2);
    dataptr[40] = DESCALE(tmp5 + z2 + z4, MULT_SCALE_2);
100019b4:	f4640050 	shi	r3, r4, 80
    /* second stage */
    tmp10 = tmp0 + tmp3;	
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    dataptr[0] =  DESCALE((tmp10 + tmp11),PASS1_BITS);
100019b8:	f5040000 	shi	r8, r4, 0
    dataptr[32] = DESCALE((tmp10 - tmp11),PASS1_BITS);
100019bc:	f6640040 	shi	r19, r4, 64
    z1 = (tmp12 + tmp13) * FIX_0_541196100;							
    dataptr[16] =	DESCALE(z1 + tmp13 * FIX_0_765366865, MULT_SCALE_2);
100019c0:	f4e40020 	shi	r7, r4, 32
    dataptr[48] = DESCALE(z1 + tmp12 * (-FIX_1_847759065), MULT_SCALE_2);
100019c4:	f5640060 	shi	r11, r4, 96
    z4 *= -FIX_0_390180644;	
    z3 += z5;	
    z4 += z5;

    /* fourth stage */
    dataptr[56] = DESCALE(tmp4 + z1 + z3, MULT_SCALE_2);
100019c8:	f4c40070 	shi	r6, r4, 112
    dataptr[40] = DESCALE(tmp5 + z2 + z4, MULT_SCALE_2);
    dataptr[24] = DESCALE(tmp6 + z2 + z3, MULT_SCALE_2);
100019cc:	f5440030 	shi	r10, r4, 48
    dataptr[8] = DESCALE(tmp7 + z1 + z4, MULT_SCALE_2);
100019d0:	f5240010 	shi	r9, r4, 16

    ++dataptr;	
100019d4:	30840002 	addik	r4, r4, 2
    dataptr += 8;		
  }

  /* COLUMN PROCESS */
  dataptr = block;
  for (i=N;i>0;i--)  
100019d8:	8864e800 	xor	r3, r4, r29
100019dc:	bc23fea8 	bnei	r3, -344		// 10001884
  }

  /* normalise results */
  for (i = 0; i < M; i++)
  {
    block[i] = (sb_int16_t)DESCALE(block[i], 3);
100019e0:	c4832800 	lhu	r4, r3, r5
100019e4:	90840061 	sext16	r4, r4
100019e8:	30840004 	addik	r4, r4, 4
100019ec:	64840203 	bsrai	r4, r4, 3
100019f0:	d4832800 	sh	r4, r3, r5
100019f4:	30630002 	addik	r3, r3, 2

    ++dataptr;	
  }

  /* normalise results */
  for (i = 0; i < M; i++)
100019f8:	a8830080 	xori	r4, r3, 128
100019fc:	bc24ffe4 	bnei	r4, -28		// 100019e0
  {
    block[i] = (sb_int16_t)DESCALE(block[i], 3);
  }
}
10001a00:	ea61007c 	lwi	r19, r1, 124
10001a04:	eac10080 	lwi	r22, r1, 128
10001a08:	eae10084 	lwi	r23, r1, 132
10001a0c:	eb010088 	lwi	r24, r1, 136
10001a10:	eb21008c 	lwi	r25, r1, 140
10001a14:	eb410090 	lwi	r26, r1, 144
10001a18:	eb610094 	lwi	r27, r1, 148
10001a1c:	eb810098 	lwi	r28, r1, 152
10001a20:	eba1009c 	lwi	r29, r1, 156
10001a24:	ebc100a0 	lwi	r30, r1, 160
10001a28:	ebe100a4 	lwi	r31, r1, 164
10001a2c:	b60f0008 	rtsd	r15, 8
10001a30:	302100a8 	addik	r1, r1, 168

10001a34 <_exception_handler>:
10001a34:	b6110000 	rtsd	r17, 0
10001a38:	80000000 	or	r0, r0, r0

10001a3c <_hw_exception_handler>:
10001a3c:	b6910000 	rted	r17, 0
10001a40:	80000000 	or	r0, r0, r0

10001a44 <_interrupt_handler>:
10001a44:	b62e0000 	rtid	r14, 0
10001a48:	80000000 	or	r0, r0, r0

10001a4c <_program_clean>:
10001a4c:	b60f0008 	rtsd	r15, 8
10001a50:	80000000 	or	r0, r0, r0

10001a54 <_program_init>:
10001a54:	b60f0008 	rtsd	r15, 8
10001a58:	80000000 	or	r0, r0, r0

10001a5c <exit>:
10001a5c:	3021ffe0 	addik	r1, r1, -32
10001a60:	10c00000 	addk	r6, r0, r0
10001a64:	fa61001c 	swi	r19, r1, 28
10001a68:	f9e10000 	swi	r15, r1, 0
10001a6c:	b9f40028 	brlid	r15, 40	// 10001a94 <__call_exitprocs>
10001a70:	12650000 	addk	r19, r5, r0
10001a74:	b0001000 	imm	4096
10001a78:	e8802068 	lwi	r4, r0, 8296	// 10002068 <_global_impure_ptr>
10001a7c:	e8640028 	lwi	r3, r4, 40
10001a80:	bc03000c 	beqi	r3, 12		// 10001a8c
10001a84:	99fc1800 	brald	r15, r3
10001a88:	10a40000 	addk	r5, r4, r0
10001a8c:	b9f4e5ec 	brlid	r15, -6676	// 10000078 <_exit>
10001a90:	10b30000 	addk	r5, r19, r0

10001a94 <__call_exitprocs>:
10001a94:	3021ffb8 	addik	r1, r1, -72
10001a98:	fbc10040 	swi	r30, r1, 64
10001a9c:	b0001000 	imm	4096
10001aa0:	ebc02068 	lwi	r30, r0, 8296	// 10002068 <_global_impure_ptr>
10001aa4:	fb610034 	swi	r27, r1, 52
10001aa8:	13660000 	addk	r27, r6, r0
10001aac:	fba1003c 	swi	r29, r1, 60
10001ab0:	fbe10044 	swi	r31, r1, 68
10001ab4:	f9e10000 	swi	r15, r1, 0
10001ab8:	fa61001c 	swi	r19, r1, 28
10001abc:	fac10020 	swi	r22, r1, 32
10001ac0:	fae10024 	swi	r23, r1, 36
10001ac4:	fb010028 	swi	r24, r1, 40
10001ac8:	fb21002c 	swi	r25, r1, 44
10001acc:	fb410030 	swi	r26, r1, 48
10001ad0:	fb810038 	swi	r28, r1, 56
10001ad4:	f8a1004c 	swi	r5, r1, 76
10001ad8:	33fe0048 	addik	r31, r30, 72
10001adc:	33a00001 	addik	r29, r0, 1
10001ae0:	eafe0048 	lwi	r23, r30, 72
10001ae4:	be1700d8 	beqid	r23, 216		// 10001bbc
10001ae8:	139f0000 	addk	r28, r31, r0
10001aec:	e8770004 	lwi	r3, r23, 4
10001af0:	3263ffff 	addik	r19, r3, -1
10001af4:	be5300bc 	bltid	r19, 188		// 10001bb0
10001af8:	eb370088 	lwi	r25, r23, 136
10001afc:	be1b0124 	beqid	r27, 292		// 10001c20
10001b00:	32c30001 	addik	r22, r3, 1
10001b04:	bc1900ac 	beqi	r25, 172		// 10001bb0
10001b08:	33030001 	addik	r24, r3, 1
10001b0c:	66d30402 	bslli	r22, r19, 2
10001b10:	67180402 	bslli	r24, r24, 2
10001b14:	12d9b000 	addk	r22, r25, r22
10001b18:	b810001c 	brid	28		// 10001b34
10001b1c:	1317c000 	addk	r24, r23, r24
10001b20:	3273ffff 	addik	r19, r19, -1
10001b24:	a873ffff 	xori	r3, r19, -1
10001b28:	32d6fffc 	addik	r22, r22, -4
10001b2c:	be030084 	beqid	r3, 132		// 10001bb0
10001b30:	3318fffc 	addik	r24, r24, -4
10001b34:	e8760080 	lwi	r3, r22, 128
10001b38:	8863d800 	xor	r3, r3, r27
10001b3c:	bc23ffe4 	bnei	r3, -28		// 10001b20
10001b40:	eb570004 	lwi	r26, r23, 4
10001b44:	30daffff 	addik	r6, r26, -1
10001b48:	88e69800 	xor	r7, r6, r19
10001b4c:	be0700b8 	beqid	r7, 184		// 10001c04
10001b50:	e8980000 	lwi	r4, r24, 0
10001b54:	f8780000 	swi	r3, r24, 0
10001b58:	be04ffc8 	beqid	r4, -56		// 10001b20
10001b5c:	447d9c00 	bsll	r3, r29, r19
10001b60:	e8d90100 	lwi	r6, r25, 256
10001b64:	84c33000 	and	r6, r3, r6
10001b68:	bc06008c 	beqi	r6, 140		// 10001bf4
10001b6c:	e8b90104 	lwi	r5, r25, 260
10001b70:	84632800 	and	r3, r3, r5
10001b74:	be03009c 	beqid	r3, 156		// 10001c10
10001b78:	e8a1004c 	lwi	r5, r1, 76
10001b7c:	99fc2000 	brald	r15, r4
10001b80:	e8b60000 	lwi	r5, r22, 0
10001b84:	e8770004 	lwi	r3, r23, 4
10001b88:	8b43d000 	xor	r26, r3, r26
10001b8c:	bc3aff54 	bnei	r26, -172		// 10001ae0
10001b90:	e87c0000 	lwi	r3, r28, 0
10001b94:	8863b800 	xor	r3, r3, r23
10001b98:	be23ff48 	bneid	r3, -184		// 10001ae0
10001b9c:	3273ffff 	addik	r19, r19, -1
10001ba0:	a873ffff 	xori	r3, r19, -1
10001ba4:	32d6fffc 	addik	r22, r22, -4
10001ba8:	be23ff8c 	bneid	r3, -116		// 10001b34
10001bac:	3318fffc 	addik	r24, r24, -4
10001bb0:	b0000000 	imm	0
10001bb4:	30600000 	addik	r3, r0, 0
10001bb8:	bc230194 	bnei	r3, 404		// 10001d4c
10001bbc:	e9e10000 	lwi	r15, r1, 0
10001bc0:	ea61001c 	lwi	r19, r1, 28
10001bc4:	eac10020 	lwi	r22, r1, 32
10001bc8:	eae10024 	lwi	r23, r1, 36
10001bcc:	eb010028 	lwi	r24, r1, 40
10001bd0:	eb21002c 	lwi	r25, r1, 44
10001bd4:	eb410030 	lwi	r26, r1, 48
10001bd8:	eb610034 	lwi	r27, r1, 52
10001bdc:	eb810038 	lwi	r28, r1, 56
10001be0:	eba1003c 	lwi	r29, r1, 60
10001be4:	ebc10040 	lwi	r30, r1, 64
10001be8:	ebe10044 	lwi	r31, r1, 68
10001bec:	b60f0008 	rtsd	r15, 8
10001bf0:	30210048 	addik	r1, r1, 72
10001bf4:	99fc2000 	brald	r15, r4
10001bf8:	80000000 	or	r0, r0, r0
10001bfc:	b810ff8c 	brid	-116		// 10001b88
10001c00:	e8770004 	lwi	r3, r23, 4
10001c04:	f8d70004 	swi	r6, r23, 4
10001c08:	b810ff50 	brid	-176		// 10001b58
10001c0c:	13460000 	addk	r26, r6, r0
10001c10:	99fc2000 	brald	r15, r4
10001c14:	e8d60000 	lwi	r6, r22, 0
10001c18:	b810ff70 	brid	-144		// 10001b88
10001c1c:	e8770004 	lwi	r3, r23, 4
10001c20:	be1900c8 	beqid	r25, 200		// 10001ce8
10001c24:	66d60402 	bslli	r22, r22, 2
10001c28:	67530402 	bslli	r26, r19, 2
10001c2c:	13030000 	addk	r24, r3, r0
10001c30:	3063ffff 	addik	r3, r3, -1
10001c34:	12d7b000 	addk	r22, r23, r22
10001c38:	88c39800 	xor	r6, r3, r19
10001c3c:	1359d000 	addk	r26, r25, r26
10001c40:	be06007c 	beqid	r6, 124		// 10001cbc
10001c44:	e8960000 	lwi	r4, r22, 0
10001c48:	f8160000 	swi	r0, r22, 0
10001c4c:	be040044 	beqid	r4, 68		// 10001c90
10001c50:	447d9c00 	bsll	r3, r29, r19
10001c54:	e8b90100 	lwi	r5, r25, 256
10001c58:	84a32800 	and	r5, r3, r5
10001c5c:	bc05006c 	beqi	r5, 108		// 10001cc8
10001c60:	e8b90104 	lwi	r5, r25, 260
10001c64:	84632800 	and	r3, r3, r5
10001c68:	be230070 	bneid	r3, 112		// 10001cd8
10001c6c:	e8a1004c 	lwi	r5, r1, 76
10001c70:	99fc2000 	brald	r15, r4
10001c74:	e8da0000 	lwi	r6, r26, 0
10001c78:	e8770004 	lwi	r3, r23, 4
10001c7c:	8863c000 	xor	r3, r3, r24
10001c80:	bc23fe60 	bnei	r3, -416		// 10001ae0
10001c84:	e87c0000 	lwi	r3, r28, 0
10001c88:	8863b800 	xor	r3, r3, r23
10001c8c:	bc23fe54 	bnei	r3, -428		// 10001ae0
10001c90:	3273ffff 	addik	r19, r19, -1
10001c94:	a873ffff 	xori	r3, r19, -1
10001c98:	32d6fffc 	addik	r22, r22, -4
10001c9c:	be03ff14 	beqid	r3, -236		// 10001bb0
10001ca0:	335afffc 	addik	r26, r26, -4
10001ca4:	e8770004 	lwi	r3, r23, 4
10001ca8:	13030000 	addk	r24, r3, r0
10001cac:	3063ffff 	addik	r3, r3, -1
10001cb0:	88c39800 	xor	r6, r3, r19
10001cb4:	be26ff94 	bneid	r6, -108		// 10001c48
10001cb8:	e8960000 	lwi	r4, r22, 0
10001cbc:	f8770004 	swi	r3, r23, 4
10001cc0:	b810ff8c 	brid	-116		// 10001c4c
10001cc4:	13030000 	addk	r24, r3, r0
10001cc8:	99fc2000 	brald	r15, r4
10001ccc:	80000000 	or	r0, r0, r0
10001cd0:	b810ffac 	brid	-84		// 10001c7c
10001cd4:	e8770004 	lwi	r3, r23, 4
10001cd8:	99fc2000 	brald	r15, r4
10001cdc:	e8ba0000 	lwi	r5, r26, 0
10001ce0:	b810ff9c 	brid	-100		// 10001c7c
10001ce4:	e8770004 	lwi	r3, r23, 4
10001ce8:	12d7b000 	addk	r22, r23, r22
10001cec:	13030000 	addk	r24, r3, r0
10001cf0:	3063ffff 	addik	r3, r3, -1
10001cf4:	88839800 	xor	r4, r3, r19
10001cf8:	be040048 	beqid	r4, 72		// 10001d40
10001cfc:	e8b60000 	lwi	r5, r22, 0
10001d00:	f8160000 	swi	r0, r22, 0
10001d04:	bc050024 	beqi	r5, 36		// 10001d28
10001d08:	99fc2800 	brald	r15, r5
10001d0c:	80000000 	or	r0, r0, r0
10001d10:	e8770004 	lwi	r3, r23, 4
10001d14:	8863c000 	xor	r3, r3, r24
10001d18:	bc23fdc8 	bnei	r3, -568		// 10001ae0
10001d1c:	e87c0000 	lwi	r3, r28, 0
10001d20:	8863b800 	xor	r3, r3, r23
10001d24:	bc23fdbc 	bnei	r3, -580		// 10001ae0
10001d28:	3273ffff 	addik	r19, r19, -1
10001d2c:	a873ffff 	xori	r3, r19, -1
10001d30:	be03fe80 	beqid	r3, -384		// 10001bb0
10001d34:	32d6fffc 	addik	r22, r22, -4
10001d38:	b810ffb4 	brid	-76		// 10001cec
10001d3c:	e8770004 	lwi	r3, r23, 4
10001d40:	f8770004 	swi	r3, r23, 4
10001d44:	b810ffc0 	brid	-64		// 10001d04
10001d48:	13030000 	addk	r24, r3, r0
10001d4c:	e8770004 	lwi	r3, r23, 4
10001d50:	bc230040 	bnei	r3, 64		// 10001d90
10001d54:	e8770000 	lwi	r3, r23, 0
10001d58:	bc03003c 	beqi	r3, 60		// 10001d94
10001d5c:	be190014 	beqid	r25, 20		// 10001d70
10001d60:	f87c0000 	swi	r3, r28, 0
10001d64:	b000efff 	imm	-4097
10001d68:	b9f4e298 	brlid	r15, -7528
10001d6c:	10b90000 	addk	r5, r25, r0
10001d70:	b000efff 	imm	-4097
10001d74:	b9f4e28c 	brlid	r15, -7540
10001d78:	10b70000 	addk	r5, r23, r0
10001d7c:	eafc0000 	lwi	r23, r28, 0
10001d80:	be37fd6c 	bneid	r23, -660		// 10001aec
10001d84:	e9e10000 	lwi	r15, r1, 0
10001d88:	b810fe3c 	brid	-452		// 10001bc4
10001d8c:	ea61001c 	lwi	r19, r1, 28
10001d90:	e8770000 	lwi	r3, r23, 0
10001d94:	13970000 	addk	r28, r23, r0
10001d98:	b810ffe8 	brid	-24		// 10001d80
10001d9c:	12e30000 	addk	r23, r3, r0

10001da0 <__do_global_ctors_aux>:
10001da0:	b0001000 	imm	4096
10001da4:	e8602170 	lwi	r3, r0, 8560	// 10002170 <__data_end>
10001da8:	3021ffe0 	addik	r1, r1, -32
10001dac:	f9e10000 	swi	r15, r1, 0
10001db0:	a883ffff 	xori	r4, r3, -1
10001db4:	be040024 	beqid	r4, 36		// 10001dd8
10001db8:	fa61001c 	swi	r19, r1, 28
10001dbc:	b0001000 	imm	4096
10001dc0:	32602170 	addik	r19, r0, 8560	// 10002170 <__data_end>
10001dc4:	99fc1800 	brald	r15, r3
10001dc8:	3273fffc 	addik	r19, r19, -4
10001dcc:	e8730000 	lwi	r3, r19, 0
10001dd0:	a883ffff 	xori	r4, r3, -1
10001dd4:	bc24fff0 	bnei	r4, -16		// 10001dc4
10001dd8:	e9e10000 	lwi	r15, r1, 0
10001ddc:	ea61001c 	lwi	r19, r1, 28
10001de0:	b60f0008 	rtsd	r15, 8
10001de4:	30210020 	addik	r1, r1, 32

10001de8 <main>:
  0,255,0,255,0,255,0,255,
  255,0,255,0,255,0,255,0	
};

int main(void)
{
10001de8:	3021ff40 	addik	r1, r1, -192
10001dec:	fb0100ac 	swi	r24, r1, 172
10001df0:	fb4100b4 	swi	r26, r1, 180
10001df4:	fb6100b8 	swi	r27, r1, 184
10001df8:	fb8100bc 	swi	r28, r1, 188
10001dfc:	f9e10000 	swi	r15, r1, 0
10001e00:	fa6100a0 	swi	r19, r1, 160
10001e04:	fac100a4 	swi	r22, r1, 164
10001e08:	fae100a8 	swi	r23, r1, 168
10001e0c:	fb2100b0 	swi	r25, r1, 176
10001e10:	3301001e 	addik	r24, r1, 30
 * \fn void timer_1_reset(void)
 * \brief Force reset timer 1
 */
static __inline__ void timer_1_reset(void)
{
  WRITE_REG32(TIMER_1_CONTROL_REG,TIMER_RESET_BIT);
10001e14:	33400002 	addik	r26, r0, 2
 * \param[in] threshold Threshold value
 */
static __inline__ void timer_1_init(const sb_uint32_t threshold)
{
  WRITE_REG32(TIMER_1_CONTROL_REG,TIMER_RESET_BIT);
  WRITE_REG32(TIMER_1_THRESHOLD_REG,threshold);
10001e18:	3380ffff 	addik	r28, r0, -1
 * \fn void timer_1_enable(void)
 * \brief Enable timer 1
 */
static __inline__ void timer_1_enable(void)
{
  WRITE_REG32(TIMER_1_CONTROL_REG,TIMER_ENABLE_BIT);
10001e1c:	33600001 	addik	r27, r0, 1

  while(sb_true)
  {

    /* DISPLAY INPUT MATRIX */
    e_printf("\nInput = {\n  ");
10001e20:	b0001000 	imm	4096
10001e24:	30a01fac 	addik	r5, r0, 8108
10001e28:	12600000 	addk	r19, r0, r0
10001e2c:	b9f4eacc 	brlid	r15, -5428	// 100008f8 <e_printf>
10001e30:	12d30000 	addk	r22, r19, r0
      if(i%8 == 0 && i != 0)
      {
        e_printf("\n  ");
      }

      e_printf("%d ",test_case[i]);
10001e34:	b0001000 	imm	4096
10001e38:	e7331fe8 	lhui	r25, r19, 8168
10001e3c:	b0001000 	imm	4096
10001e40:	30a01fc0 	addik	r5, r0, 8128
  while(sb_true)
  {

    /* DISPLAY INPUT MATRIX */
    e_printf("\nInput = {\n  ");
    for(i=0;i<64;i++)
10001e44:	32d60001 	addik	r22, r22, 1
      if(i%8 == 0 && i != 0)
      {
        e_printf("\n  ");
      }

      e_printf("%d ",test_case[i]);
10001e48:	b9f4eab0 	brlid	r15, -5456	// 100008f8 <e_printf>
10001e4c:	90d90061 	sext16	r6, r25
  while(sb_true)
  {

    /* DISPLAY INPUT MATRIX */
    e_printf("\nInput = {\n  ");
    for(i=0;i<64;i++)
10001e50:	aaf3007e 	xori	r23, r19, 126
        e_printf("\n  ");
      }

      e_printf("%d ",test_case[i]);

      buf[i] = test_case[i];
10001e54:	d733c000 	sh	r25, r19, r24
  while(sb_true)
  {

    /* DISPLAY INPUT MATRIX */
    e_printf("\nInput = {\n  ");
    for(i=0;i<64;i++)
10001e58:	be170028 	beqid	r23, 40		// 10001e80
10001e5c:	a4760007 	andi	r3, r22, 7
    {
      if(i%8 == 0 && i != 0)
10001e60:	bc03000c 	beqi	r3, 12		// 10001e6c
      {
        e_printf("\n  ");
10001e64:	b810ffd0 	brid	-48		// 10001e34
10001e68:	32730002 	addik	r19, r19, 2
10001e6c:	b0001000 	imm	4096
10001e70:	30a01fbc 	addik	r5, r0, 8124
10001e74:	b9f4ea84 	brlid	r15, -5500	// 100008f8 <e_printf>
10001e78:	32730002 	addik	r19, r19, 2
10001e7c:	b800ffb8 	bri	-72		// 10001e34

      e_printf("%d ",test_case[i]);

      buf[i] = test_case[i];
    }
    e_printf("\n}\n\n");
10001e80:	b0001000 	imm	4096
10001e84:	30a01fc4 	addik	r5, r0, 8132
10001e88:	b9f4ea70 	brlid	r15, -5520	// 100008f8 <e_printf>
10001e8c:	12770000 	addk	r19, r23, r0
    timer_1_reset();
    timer_1_init(TIMER_MAX_VALUE);
    timer_1_enable();

    /* DCT */
    loeffler_8x8_dct(buf);
10001e90:	10b80000 	addk	r5, r24, r0
 * \fn void timer_1_reset(void)
 * \brief Force reset timer 1
 */
static __inline__ void timer_1_reset(void)
{
  WRITE_REG32(TIMER_1_CONTROL_REG,TIMER_RESET_BIT);
10001e94:	b0005000 	imm	20480
10001e98:	fb400000 	swi	r26, r0, 0
 * \brief Timer 1 initialization
 * \param[in] threshold Threshold value
 */
static __inline__ void timer_1_init(const sb_uint32_t threshold)
{
  WRITE_REG32(TIMER_1_CONTROL_REG,TIMER_RESET_BIT);
10001e9c:	b0005000 	imm	20480
10001ea0:	fb400000 	swi	r26, r0, 0
  WRITE_REG32(TIMER_1_THRESHOLD_REG,threshold);
10001ea4:	b0005000 	imm	20480
10001ea8:	fb800004 	swi	r28, r0, 4
 * \fn void timer_1_enable(void)
 * \brief Enable timer 1
 */
static __inline__ void timer_1_enable(void)
{
  WRITE_REG32(TIMER_1_CONTROL_REG,TIMER_ENABLE_BIT);
10001eac:	b0005000 	imm	20480
10001eb0:	fb600000 	swi	r27, r0, 0
10001eb4:	b9f4ea80 	brlid	r15, -5504	// 10000934 <loeffler_8x8_dct>
10001eb8:	80000000 	or	r0, r0, r0
    /* END BENCH */
    end_time = timer_1_getval();
    timer_1_disable();

    /* DISPLAY OUTPUT MATRIX */
    e_printf("Output = {\n  ");
10001ebc:	b0001000 	imm	4096
10001ec0:	30a01fcc 	addik	r5, r0, 8140
 * \brief This function returns the value of the first timer's counter
 * \return Counter value
 */
static __inline__ sb_uint32_t timer_1_getval(void)
{
  return READ_REG32(TIMER_1_COUNTER_REG);
10001ec4:	b0005000 	imm	20480
10001ec8:	eac00008 	lwi	r22, r0, 8
 * \fn void timer_1_disable(void)
 * \brief Disable timer 1
 */
static __inline__ void timer_1_disable(void)
{
  WRITE_REG32(TIMER_1_CONTROL_REG,0x0);
10001ecc:	b0005000 	imm	20480
10001ed0:	fae00000 	swi	r23, r0, 0
10001ed4:	b9f4ea24 	brlid	r15, -5596	// 100008f8 <e_printf>
10001ed8:	80000000 	or	r0, r0, r0
  255,0,255,0,255,0,255,0,
  0,255,0,255,0,255,0,255,
  255,0,255,0,255,0,255,0	
};

int main(void)
10001edc:	10739800 	addk	r3, r19, r19
      if(i%8 == 0 && i != 0)
      {
        e_printf("\n  ");
      }

      e_printf("%d ",buf[i]);
10001ee0:	c4c3c000 	lhu	r6, r3, r24
10001ee4:	b0001000 	imm	4096
10001ee8:	30a01fc0 	addik	r5, r0, 8128
    end_time = timer_1_getval();
    timer_1_disable();

    /* DISPLAY OUTPUT MATRIX */
    e_printf("Output = {\n  ");
    for(i=0;i<64;i++)
10001eec:	32730001 	addik	r19, r19, 1
      if(i%8 == 0 && i != 0)
      {
        e_printf("\n  ");
      }

      e_printf("%d ",buf[i]);
10001ef0:	b9f4ea08 	brlid	r15, -5624	// 100008f8 <e_printf>
10001ef4:	90c60061 	sext16	r6, r6
    end_time = timer_1_getval();
    timer_1_disable();

    /* DISPLAY OUTPUT MATRIX */
    e_printf("Output = {\n  ");
    for(i=0;i<64;i++)
10001ef8:	a8730040 	xori	r3, r19, 64
10001efc:	be030024 	beqid	r3, 36		// 10001f20
10001f00:	a4930007 	andi	r4, r19, 7
    {
      if(i%8 == 0 && i != 0)
10001f04:	bc24ffd8 	bnei	r4, -40		// 10001edc
      {
        e_printf("\n  ");
10001f08:	b0001000 	imm	4096
10001f0c:	30a01fbc 	addik	r5, r0, 8124
10001f10:	b9f4e9e8 	brlid	r15, -5656	// 100008f8 <e_printf>
10001f14:	80000000 	or	r0, r0, r0
  255,0,255,0,255,0,255,0,
  0,255,0,255,0,255,0,255,
  255,0,255,0,255,0,255,0	
};

int main(void)
10001f18:	b810ffc8 	brid	-56		// 10001ee0
10001f1c:	10739800 	addk	r3, r19, r19
        e_printf("\n  ");
      }

      e_printf("%d ",buf[i]);
    }
    e_printf("\n}\n\n");
10001f20:	b0001000 	imm	4096
10001f24:	30a01fc4 	addik	r5, r0, 8132
10001f28:	b9f4e9d0 	brlid	r15, -5680	// 100008f8 <e_printf>
10001f2c:	80000000 	or	r0, r0, r0

     /* DISPLAY BENCH RESULT */
    e_printf("%d ticks\n",end_time*C_S_CLK_DIV);
10001f30:	b0001000 	imm	4096
10001f34:	30a01fdc 	addik	r5, r0, 8156
10001f38:	b9f4e9c0 	brlid	r15, -5696	// 100008f8 <e_printf>
10001f3c:	10d6b000 	addk	r6, r22, r22

    uart_get(&dummy);
10001f40:	b9f4e31c 	brlid	r15, -7396	// 1000025c <uart_get>
10001f44:	30a1001c 	addik	r5, r1, 28

  }
10001f48:	b800fed8 	bri	-296		// 10001e20

Disassembly of section .init:

10001f4c <__init>:
10001f4c:	3021fff8 	addik	r1, r1, -8
10001f50:	d9e00800 	sw	r15, r0, r1
10001f54:	b0001000 	imm	4096
10001f58:	31602398 	addik	r11, r0, 9112
10001f5c:	940bc802 	mts	rshr, r11
10001f60:	b0001000 	imm	4096
10001f64:	316022ac 	addik	r11, r0, 8876
10001f68:	940bc800 	mts	rslr, r11
10001f6c:	b9f4e1c4 	brlid	r15, -7740	// 10000130 <frame_dummy>
10001f70:	80000000 	or	r0, r0, r0
10001f74:	b9f4fe2c 	brlid	r15, -468	// 10001da0 <__do_global_ctors_aux>
10001f78:	80000000 	or	r0, r0, r0
10001f7c:	c9e00800 	lw	r15, r0, r1
10001f80:	b60f0008 	rtsd	r15, 8
10001f84:	30210008 	addik	r1, r1, 8

Disassembly of section .fini:

10001f88 <__fini>:
10001f88:	3021fff8 	addik	r1, r1, -8
10001f8c:	d9e00800 	sw	r15, r0, r1
10001f90:	b9f4e0ec 	brlid	r15, -7956	// 1000007c <__do_global_dtors_aux>
10001f94:	80000000 	or	r0, r0, r0
10001f98:	c9e00800 	lw	r15, r0, r1
10001f9c:	b60f0008 	rtsd	r15, 8
10001fa0:	30210008 	addik	r1, r1, 8

Disassembly of section .rodata:

10001fa4 <__rodata_start>:
10001fa4:	286e756c 	addic	r3, r14, 30060
10001fa8:	6c290000 	get	r1, rfsl0
10001fac:	0a496e70 		r18, r9, r13
10001fb0:	7574203d 		r11, r20, r4
10001fb4:	207b0a20 	addi	r3, r27, 2592
10001fb8:	20000000 	addi	r0, r0, 0
10001fbc:	0a202000 	addc	r17, r0, r4
10001fc0:	25642000 	rsubi	r11, r4, 8192
10001fc4:	0a7d0a0a 		r19, r29, r1
10001fc8:	
10001fe8 <test_case>:
10001fe8:	000000ff 		r0, r0, r0
10001fec:	000000ff 		r0, r0, r0
10001ff0:	000000ff 		r0, r0, r0
10001ff4:	000000ff 		r0, r0, r0
10001ff8:	00ff0000 	add	r7, r31, r0
10001ffc:	00ff0000 	add	r7, r31, r0
10002000:	00ff0000 	add	r7, r31, r0
10002004:	00ff0000 	add	r7, r31, r0
10002008:	000000ff 		r0, r0, r0
1000200c:	000000ff 		r0, r0, r0
10002010:	000000ff 		r0, r0, r0
10002014:	000000ff 		r0, r0, r0
10002018:	00ff0000 	add	r7, r31, r0
1000201c:	00ff0000 	add	r7, r31, r0
10002020:	00ff0000 	add	r7, r31, r0
10002024:	00ff0000 	add	r7, r31, r0
10002028:	000000ff 		r0, r0, r0
1000202c:	000000ff 		r0, r0, r0
10002030:	000000ff 		r0, r0, r0
10002034:	000000ff 		r0, r0, r0
10002038:	00ff0000 	add	r7, r31, r0
1000203c:	00ff0000 	add	r7, r31, r0
10002040:	00ff0000 	add	r7, r31, r0
10002044:	00ff0000 	add	r7, r31, r0
10002048:	000000ff 		r0, r0, r0
1000204c:	000000ff 		r0, r0, r0
10002050:	000000ff 		r0, r0, r0
10002054:	000000ff 		r0, r0, r0
10002058:	00ff0000 	add	r7, r31, r0
1000205c:	00ff0000 	add	r7, r31, r0
10002060:	00ff0000 	add	r7, r31, r0
10002064:	00ff0000 	add	r7, r31, r0

10002068 <_global_impure_ptr>:
10002068:	1000207c 		r0, r0, r4
1000206c:	Address 0x1000206c is out of bounds.


Disassembly of section .sdata2:

1000206e <__sbss2_end-0x2>:
1000206e:	Address 0x1000206e is out of bounds.


Disassembly of section .data:

10002070 <__data_start>:
10002070:	
10002074 <__dso_handle>:
10002074:	
10002078 <_impure_ptr>:
10002078:	1000207c 		r0, r0, r4

1000207c <impure_data>:
1000207c:	
1000216c <force_to_data>:
1000216c:	
Disassembly of section .ctors:

10002170 <__CTOR_LIST__>:
10002170:	ffffffff 		r31, r31, r31

10002174 <__CTOR_END__>:
10002174:	
Disassembly of section .dtors:

10002178 <__DTOR_LIST__>:
10002178:	ffffffff 		r31, r31, r31

1000217c <__DTOR_END__>:
1000217c:	
Disassembly of section .eh_frame:

10002180 <__EH_FRAME_BEGIN__>:
10002180:	
Disassembly of section .jcr:

10002184 <__JCR_END__>:
10002184:	
Disassembly of section .bss:

10002188 <__bss_start>:
10002188:	
1000218c <dtor_idx.2340>:
1000218c:	
10002190 <object.2350>:
10002190:	
Disassembly of section .heap:

100021a8 <_heap>:
100021a8:	
Disassembly of section .stack:

100022a8 <_stack_end>:
100022a8:	
Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000000a7 		r0, r0, r0
       4:	00020000 	add	r0, r2, r0
       8:	00490101 		r2, r9, r0
       c:	fb0e0d00 	swi	r24, r14, 3328
      10:	01010101 		r8, r1, r0
      14:	00000001 		r0, r0, r0
      18:	0000012f 		r0, r0, r0
      1c:	676e752f 	bslli	r27, r14, 15
      20:	6d625f67 	tneaget	r11, rfsl7
      24:	6e752f2f 	ecaget	r19, rfsl15
      28:	7372632f 		r27, r18, r12
      2c:	6e65776c 	tnecget	r19, rfsl12
      30:	69622f6c 		r11, r2, r5
      34:	6962676c 		r11, r2, r12
      38:	6f73732f 	tncget	r27, rfsl15
      3c:	6d696372 	ncget	r11, rfsl2
      40:	6f626c61 	necaget	r27, rfsl1
      44:	7a650000 		r19, r5, r0
      48:	63727430 	muli	r27, r18, 29744
      4c:	2e530001 	rsubic	r18, r19, 1
      50:	
Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000000b5 		r0, r0, r0
       4:	00020000 	add	r0, r2, r0
       8:	00000401 		r0, r0, r0
       c:	
Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	01110010 		r8, r17, r0
   4:	06550603 	neg	r18, r21
   8:	081b0825 		r0, r27, r1
   c:	08130500 		r0, r19, r0
  10:	00000111 		r0, r0, r0
  14:	00100655 		r0, r16, r0
  18:	0603081b 	neg	r16, r3
  1c:	08250813 		r1, r5, r1
  20:	05000000 	rsub	r8, r0, r0
  24:	01110010 		r8, r17, r0
  28:	06110112 	neg	r16, r17
  2c:	0103081b 		r8, r3, r1
  30:	08250813 		r1, r5, r1
  34:	05000000 	rsub	r8, r0, r0
  38:	01110125 		r8, r17, r0
  3c:	0e130b03 		r16, r19, r1
  40:	0e1b0e11 		r16, r27, r1
  44:	01120110 		r8, r18, r0
  48:	06000002 	neg	r16, r0
  4c:	24000b0b 	rsubi	r0, r0, 2827
  50:	3e0b030e 	rsubikc	r16, r11, 782
  54:	00000316 		r0, r0, r0
  58:	00030e3a 		r0, r3, r1
  5c:	0b3b0b49 		r25, r27, r1
  60:	13000004 		r24, r0, r0
  64:	24000b0b 	rsubi	r0, r0, 2827
  68:	3e0b0308 	rsubikc	r16, r11, 776
  6c:	0000052e 		r0, r0, r0
  70:	013f0c03 		r9, r31, r1
  74:	0e3a0b3b 		r17, r26, r1
  78:	0b270c20 		r25, r7, r1
  7c:	0b011300 		r24, r1, r2
  80:	00063400 		r0, r6, r6
  84:	030e3a0b 		r24, r14, r7
  88:	3b0b4913 	addikc	r24, r11, 18707
  8c:	0000072e 		r0, r0, r0
  90:	01030e3a 		r8, r3, r1
  94:	0b3b0b27 		r25, r27, r1
  98:	0c200b01 		r1, r0, r1
  9c:	13000008 		r24, r0, r0
  a0:	0500030e 	neg	r8, r0
  a4:	3a0b3b0b 	addikc	r16, r11, 15115
  a8:	49130000 	idiv	r8, r19, r0
  ac:	09260049 		r9, r6, r0
  b0:	1300000a 		r24, r0, r0
  b4:	0f000b0b 		r24, r0, r1
  b8:	49130000 	idiv	r8, r19, r0
  bc:	0b2e0003 		r25, r14, r0
  c0:	0e3a0b3b 		r17, r26, r1
  c4:	0b270c20 		r25, r7, r1
  c8:	0b00000c 		r24, r0, r0
  cc:	2e013f0c 	rsubic	r16, r1, 16140
  d0:	030e3a0b 		r24, r14, r7
  d4:	3b0b270c 	addikc	r24, r11, 9996
  d8:	11011201 		r8, r1, r2
  dc:	400a0113 		r0, r10, r0
  e0:	00000d05 		r0, r0, r1
  e4:	0003083a 		r0, r3, r1
  e8:	0b3b0b49 		r25, r27, r1
  ec:	13020a00 		r24, r2, r1
  f0:	000e1d01 		r0, r14, r3
  f4:	31131101 	addik	r8, r19, 4353
  f8:	1201580b 		r16, r1, r11
  fc:	590b0113 		r8, r11, r0
 100:	00000f05 		r0, r0, r1
 104:	00311302 		r1, r17, r2
 108:	0a000010 		r16, r0, r0
 10c:	1d003113 		r8, r0, r6
 110:	11011201 		r8, r1, r2
 114:	580b590b 		r0, r11, r11
 118:	0000111d 		r0, r0, r2
 11c:	01311311 		r9, r17, r2
 120:	01120158 		r8, r18, r0
 124:	0b590b00 		r26, r25, r1
 128:	00120b01 		r0, r18, r1
 12c:	11011201 		r8, r1, r2
 130:	00001334 		r0, r0, r2
 134:	00311302 		r1, r17, r2
 138:	06000014 	neg	r16, r0
 13c:	2e013113 	rsubic	r16, r1, 12563
 140:	11011201 		r8, r1, r2
 144:	400a0113 		r0, r10, r0
 148:	00001501 		r0, r0, r2
 14c:	01491301 		r10, r9, r2
 150:	13000016 		r24, r0, r0
 154:	21004913 	addi	r8, r0, 18707
 158:	2f0b0000 	rsubic	r24, r11, 0
 15c:	00011101 		r0, r1, r2
 160:	250e130b 	rsubi	r8, r14, 4875
 164:	030e1b0e 		r24, r14, r3
 168:	11011201 		r8, r1, r2
 16c:	10060000 	addk	r0, r6, r0
 170:	0224000b 		r17, r4, r0
 174:	0b3e0b03 		r25, r30, r1
 178:	0e000003 		r16, r0, r0
 17c:	1600030e 		r16, r0, r0
 180:	3a0b3b0b 	addikc	r16, r11, 15115
 184:	49130000 	idiv	r8, r19, r0
 188:	0424000b 	neg	r1, r4
 18c:	0b3e0b03 		r25, r30, r1
 190:	08000005 		r0, r0, r0
 194:	2e013f0c 	rsubic	r16, r1, 16140
 198:	030e3a0b 		r24, r14, r7
 19c:	3b0b270c 	addikc	r24, r11, 9996
 1a0:	200b0113 	addi	r0, r11, 275
 1a4:	00000605 		r0, r0, r0
 1a8:	0003083a 		r0, r3, r1
 1ac:	0b3b0b49 		r25, r27, r1
 1b0:	13000007 		r24, r0, r0
 1b4:	0f000b0b 		r24, r0, r1
 1b8:	49130000 	idiv	r8, r19, r0
 1bc:	082e0131 		r1, r14, r0
 1c0:	13110112 		r24, r17, r0
 1c4:	01400601 		r10, r0, r0
 1c8:	13000009 		r24, r0, r0
 1cc:	05003113 	neg	r8, r0
 1d0:	02060000 	add	r16, r6, r0
 1d4:	0a2e013f 		r17, r14, r0
 1d8:	0c030e3a 		r0, r3, r1
 1dc:	0b3b0b27 		r25, r27, r1
 1e0:	0c491311 		r2, r9, r2
 1e4:	01120140 		r8, r18, r0
 1e8:	06011300 	neg	r16, r1
 1ec:	000b0500 		r0, r11, r0
 1f0:	03083a0b 		r24, r8, r7
 1f4:	3b0b4913 	addikc	r24, r11, 18707
 1f8:	02060000 	add	r16, r6, r0
 1fc:	0c050003 		r0, r5, r0
 200:	0e3a0b3b 		r17, r26, r1
 204:	0b491302 		r26, r9, r2
 208:	0600000d 	neg	r16, r0
 20c:	34000308 	rsubik	r0, r0, 776
 210:	3a0b3b0b 	addikc	r16, r11, 15115
 214:	49130206 		r8, r19, r0
 218:	00000e34 		r0, r0, r1
 21c:	00030e3a 		r0, r3, r1
 220:	0b3b0b49 		r25, r27, r1
 224:	13020600 		r24, r2, r0
 228:	000f0b01 		r0, r15, r1
 22c:	11011201 		r8, r1, r2
 230:	01130000 	add	r8, r19, r0
 234:	101d0131 		r0, r29, r0
 238:	13520155 		r26, r18, r0
 23c:	06580b59 	neg	r18, r24
 240:	0b011300 		r24, r1, r2
 244:	00111d01 		r0, r17, r3
 248:	31135201 	addik	r8, r19, 20993
 24c:	5506580b 		r8, r6, r11
 250:	590b0000 	fadd	r8, r11, r0
 254:	12260049 		r17, r6, r0
 258:	13000013 		r24, r0, r0
 25c:	0500030e 	neg	r8, r0
 260:	3a0b3b0b 	addikc	r16, r11, 15115
 264:	4913020a 		r8, r19, r0
 268:	00001434 		r0, r0, r2
 26c:	00030e3a 		r0, r3, r1
 270:	0b3b0b49 		r25, r27, r1
 274:	13020a00 		r24, r2, r1
 278:	00150101 		r0, r21, r0
 27c:	49130113 		r8, r19, r0
 280:	00001621 		r0, r0, r2
 284:	0049132f 		r2, r9, r2
 288:	0b000017 		r24, r0, r0
 28c:	34000308 	rsubik	r0, r0, 776
 290:	3a0b3b0b 	addikc	r16, r11, 15115
 294:	4913020a 		r8, r19, r0
 298:	0000180a 		r0, r0, r3
 29c:	0003083a 		r0, r3, r1
 2a0:	0b3b0b11 		r25, r27, r1
 2a4:	01000019 		r8, r0, r0
 2a8:	0b015506 		r24, r1, r10
 2ac:	00001a18 		r0, r0, r3
 2b0:	0000001b 		r0, r0, r0
 2b4:	3400030e 	rsubik	r0, r0, 782
 2b8:	3a0b3b0b 	addikc	r16, r11, 15115
 2bc:	49130000 	idiv	r8, r19, r0
 2c0:	00011101 		r0, r1, r2
 2c4:	250e130b 	rsubi	r8, r14, 4875
 2c8:	030e1b0e 		r24, r14, r3
 2cc:	11011201 		r8, r1, r2
 2d0:	10060000 	addk	r0, r6, r0
 2d4:	0224000b 		r17, r4, r0
 2d8:	0b3e0b03 		r25, r30, r1
 2dc:	0e000003 		r16, r0, r0
 2e0:	1600030e 		r16, r0, r0
 2e4:	3a0b3b0b 	addikc	r16, r11, 15115
 2e8:	49130000 	idiv	r8, r19, r0
 2ec:	0424000b 	neg	r1, r4
 2f0:	0b3e0b03 		r25, r30, r1
 2f4:	08000005 		r0, r0, r0
 2f8:	2e013f0c 	rsubic	r16, r1, 16140
 2fc:	030e3a0b 		r24, r14, r7
 300:	3b0b270c 	addikc	r24, r11, 9996
 304:	11011201 		r8, r1, r2
 308:	40060113 		r0, r6, r0
 30c:	00000605 		r0, r0, r0
 310:	00030e3a 		r0, r3, r1
 314:	0b3b0b49 		r25, r27, r1
 318:	13020a00 		r24, r2, r1
 31c:	00073400 		r0, r7, r6
 320:	030e3a0b 		r24, r14, r7
 324:	3b0b4913 	addikc	r24, r11, 18707
 328:	02060000 	add	r16, r6, r0
 32c:	08340003 		r1, r20, r0
 330:	083a0b3b 		r1, r26, r1
 334:	0b491302 		r26, r9, r2
 338:	06000009 	neg	r16, r0
 33c:	26004913 	rsubi	r16, r0, 18707
 340:	00000a0f 		r0, r0, r1
 344:	000b0b49 		r0, r11, r1
 348:	13000000 	addk	r24, r0, r0
 34c:	01110125 		r8, r17, r0
 350:	0e130b03 		r16, r19, r1
 354:	0e1b0e11 		r16, r27, r1
 358:	01520155 		r10, r18, r0
 35c:	06100600 	neg	r16, r16
 360:	00022400 		r0, r2, r4
 364:	0b0b3e0b 		r24, r11, r7
 368:	030e0000 	add	r24, r14, r0
 36c:	03160003 		r24, r22, r0
 370:	0e3a0b3b 		r17, r26, r1
 374:	0b491300 		r26, r9, r2
 378:	00042400 		r0, r4, r4
 37c:	0b0b3e0b 		r24, r11, r7
 380:	03080000 	add	r24, r8, r0
 384:	0504010b 	neg	r8, r4
 388:	0b3a0b3b 		r25, r26, r1
 38c:	0b011300 		r24, r1, r2
 390:	00062800 	add	r0, r6, r5
 394:	030e1c0d 		r24, r14, r3
 398:	0000072e 		r0, r0, r0
 39c:	00030e3a 		r0, r3, r1
 3a0:	0b3b0b27 		r25, r27, r1
 3a4:	0c200b00 		r1, r0, r1
 3a8:	00082e01 		r0, r8, r5
 3ac:	030e3a0b 		r24, r14, r7
 3b0:	3b0b270c 	addikc	r24, r11, 9996
 3b4:	200b0113 	addi	r0, r11, 275
 3b8:	00000905 		r0, r0, r1
 3bc:	00030e3a 		r0, r3, r1
 3c0:	0b3b0b49 		r25, r27, r1
 3c4:	1300000a 		r24, r0, r0
 3c8:	26004913 	rsubi	r16, r0, 18707
 3cc:	00000b2e 		r0, r0, r1
 3d0:	00030e3a 		r0, r3, r1
 3d4:	0b3b0b27 		r25, r27, r1
 3d8:	0c491320 		r2, r9, r2
 3dc:	0b00000c 		r24, r0, r0
 3e0:	2e013f0c 	rsubic	r16, r1, 16140
 3e4:	030e3a0b 		r24, r14, r7
 3e8:	3b0b270c 	addikc	r24, r11, 9996
 3ec:	49131101 		r8, r19, r2
 3f0:	12014006 		r16, r1, r8
 3f4:	01130000 	add	r8, r19, r0
 3f8:	0d340003 		r9, r20, r0
 3fc:	083a0b3b 		r1, r26, r1
 400:	0b491302 		r26, r9, r2
 404:	0600000e 	neg	r16, r0
 408:	34000308 	rsubik	r0, r0, 776
 40c:	3a0b3b0b 	addikc	r16, r11, 15115
 410:	4913020a 		r8, r19, r0
 414:	00000f34 		r0, r0, r1
 418:	00030e3a 		r0, r3, r1
 41c:	0b3b0b49 		r25, r27, r1
 420:	13020a00 		r24, r2, r1
 424:	00101d00 		r0, r16, r3
 428:	31135201 	addik	r8, r19, 20993
 42c:	5506580b 		r8, r6, r11
 430:	590b0000 	fadd	r8, r11, r0
 434:	111d0131 		r8, r29, r0
 438:	13520155 		r26, r18, r0
 43c:	06580b59 	neg	r18, r24
 440:	0b011300 		r24, r1, r2
 444:	00120500 		r0, r18, r0
 448:	31131c0d 	addik	r8, r19, 7181
 44c:	0000131d 		r0, r0, r2
 450:	00311311 		r1, r17, r2
 454:	01120158 		r8, r18, r0
 458:	0b590b00 		r26, r25, r1
 45c:	00140101 		r0, r20, r0
 460:	49130113 		r8, r19, r0
 464:	00001521 		r0, r0, r2
 468:	0049132f 		r2, r9, r2
 46c:	0b000016 		r24, r0, r0
 470:	3400030e 	rsubik	r0, r0, 782
 474:	3a0b3b0b 	addikc	r16, r11, 15115
 478:	49130000 	idiv	r8, r19, r0
 47c:	00011100 		r0, r1, r2
 480:	10061101 		r0, r6, r2
 484:	12010308 		r16, r1, r0
 488:	1b082508 		r24, r8, r4
 48c:	13050000 	addk	r24, r5, r0
 490:	00011100 		r0, r1, r2
 494:	10061101 		r0, r6, r2
 498:	12010308 		r16, r1, r0
 49c:	1b082508 		r24, r8, r4
 4a0:	13050000 	addk	r24, r5, r0
 4a4:	00011100 		r0, r1, r2
 4a8:	10061101 		r0, r6, r2
 4ac:	12010308 		r16, r1, r0
 4b0:	1b082508 		r24, r8, r4
 4b4:	13050000 	addk	r24, r5, r0
 4b8:	00011100 		r0, r1, r2
 4bc:	10061101 		r0, r6, r2
 4c0:	12010308 		r16, r1, r0
 4c4:	1b082508 		r24, r8, r4
 4c8:	13050000 	addk	r24, r5, r0
 4cc:	00011100 		r0, r1, r2
 4d0:	10061101 		r0, r6, r2
 4d4:	12010308 		r16, r1, r0
 4d8:	1b082508 		r24, r8, r4
 4dc:	13050000 	addk	r24, r5, r0
 4e0:	00011100 		r0, r1, r2
 4e4:	10065506 		r0, r6, r10
 4e8:	03081b08 		r24, r8, r3
 4ec:	25081305 	rsubi	r8, r8, 4869
 4f0:	Address 0x000004f0 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000003c 		r0, r0, r0
   4:	00020000 	add	r0, r2, r0
   8:	00000400 		r0, r0, r0
   c:	
Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 		r31, r31, r31
   4:	
Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 		r0, r0, r0
   4:	ffffffff 		r31, r31, r31
   8:	0100017c 		r8, r0, r0
   c:	0f0c0100 		r24, r12, r0
  10:	0000000c 		r0, r0, r0
  14:	
Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0000001c 		r0, r0, r0
       4:	00000020 		r0, r0, r0
       8:	00057300 		r0, r5, r14
       c:	321a9f00 	addik	r16, r26, -24832
      10:	00002000 	add	r0, r0, r4
      14:	00002c00 		r0, r0, r5
      18:	01530000 	add	r10, r19, r0
      1c:	
Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c6f6e67 	necaget	r3, rfsl7
   4:	206c6f6e 	addi	r3, r12, 28526
   8:	6720696e 	bsrli	r25, r0, 14
   c:	74007561 		r0, r0, r14
  10:	72745f73 		r19, r20, r11
  14:	656e6400 	bslli	r11, r14, 0
  18:	75617274 		r11, r1, r14
  1c:	5f707574 		r27, r16, r14
  20:	00756172 		r3, r21, r12
  24:	745f6765 		r2, r31, r12
  28:	74006c6f 		r0, r0, r13
  2c:	6e67206c 	cget	r19, rfsl12
  30:	6f6e6720 	necget	r27, rfsl0
  34:	756e7369 		r11, r14, r14
  38:	676e6564 	bslli	r27, r14, 4
  3c:	20696e74 	addi	r3, r9, 28276
  40:	00666c6f 		r3, r6, r13
  44:	61740075 	muli	r11, r20, 117
  48:	6172745f 	muli	r11, r18, 29791
  4c:	72656164 		r19, r5, r12
  50:	00435055 		r2, r3, r10
  54:	5f564552 		r26, r22, r8
  58:	00756e73 		r3, r21, r13
  5c:	69676e65 		r11, r7, r13
  60:	64206368 	bsrai	r1, r0, 8
  64:	6172002f 	muli	r11, r18, 47
  68:	686f6d65 		r3, r15, r13
  6c:	2f6c7563 	rsubic	r27, r12, 30051
  70:	6b797469 		r27, r25, r14
  74:	6765722f 	bsrai	r27, r5, 15
  78:	4465736b 	bsra	r3, r5, r14
  7c:	746f702f 		r3, r15, r14
  80:	73656372 		r27, r5, r12
  84:	6574626c 	bsrai	r11, r20, 12
  88:	617a655f 	muli	r11, r26, 25951
  8c:	7374645f 		r27, r20, r12
  90:	315f3638 	addik	r10, r31, 13880
  94:	2f73772f 	rsubic	r27, r19, 30511
  98:	61707073 	muli	r11, r16, 28787
  9c:	2f6c6f65 	rsubic	r27, r12, 28517
  a0:	66666c65 	bslli	r19, r6, 5
  a4:	725f6463 		r18, r31, r12
  a8:	74006461 		r0, r0, r12
  ac:	74610075 		r3, r1, r0
  b0:	6172745f 	muli	r11, r18, 29791
  b4:	77616974 		r27, r1, r13
  b8:	5f74785f 		r27, r20, r15
  bc:	646f6e65 		r3, r15, r13
  c0:	00646f75 		r3, r4, r13
  c4:	626c6500 	muli	r19, r12, 25856
  c8:	75617274 		r11, r1, r14
  cc:	5f777269 		r27, r23, r14
  d0:	74650075 		r3, r5, r0
  d4:	6172745f 	muli	r11, r18, 29791
  d8:	77616974 		r27, r1, r13
  dc:	5f72785f 		r27, r18, r15
  e0:	72656164 		r19, r5, r12
  e4:	79007368 		r8, r0, r14
  e8:	6f727420 	tnecget	r27, rfsl0
  ec:	756e7369 		r11, r14, r14
  f0:	676e6564 	bslli	r27, r14, 4
  f4:	20696e74 	addi	r3, r9, 28276
  f8:	0073625f 		r3, r19, r12
  fc:	75696e74 		r11, r9, r13
 100:	385f7400 	addikc	r2, r31, 29696
 104:	4350555f 		r26, r16, r10
 108:	43484950 		r26, r8, r9
 10c:	00474e55 		r2, r7, r9
 110:	20432034 	addi	r2, r3, 8244
 114:	2e362e32 	rsubic	r17, r22, 11826
 118:	20323031 	addi	r1, r18, 12337
 11c:	31313031 	addik	r9, r17, 12337
 120:	38202858 	addikc	r1, r0, 10328
 124:	696c696e 		r11, r12, r13
 128:	78203134 		r1, r0, r6
 12c:	2e312042 	rsubic	r17, r17, 8258
 130:	75696c64 		r11, r9, r13
 134:	2045444b 	addi	r2, r5, 17483
 138:	5f502e31 		r26, r16, r5
 13c:	35203232 	rsubik	r9, r0, 12850
 140:	204d6172 	addi	r2, r13, 24946
 144:	20323031 	addi	r1, r18, 12337
 148:	32290073 	addik	r17, r9, 115
 14c:	625f7569 	muli	r18, r31, 30057
 150:	6e743332 	tcget	r19, rfsl2
 154:	5f740073 		r27, r20, r0
 158:	686f7274 		r3, r15, r14
 15c:	20696e74 	addi	r3, r9, 28276
 160:	002e2e2f 		r1, r14, r5
 164:	2e2e2f6c 	rsubic	r17, r14, 12140
 168:	69622f73 		r11, r2, r5
 16c:	65637265 	bsrai	r11, r3, 5
 170:	74626c61 		r3, r2, r13
 174:	7a652f73 		r19, r5, r5
 178:	625f7561 	muli	r18, r31, 30049
 17c:	72742e63 		r19, r20, r5
 180:	00666c61 		r3, r6, r13
 184:	67007374 	bsrai	r24, r0, 20
 188:	72696e67 		r19, r9, r13
 18c:	00707269 		r3, r16, r14
 190:	6e746900 	ncaget	r19, rfsl0
 194:	70616463 		r3, r1, r12
 198:	68617200 		r3, r1, r14
 19c:	655f7072 	bsrli	r10, r31, 18
 1a0:	696e7466 		r11, r14, r14
 1a4:	00666f72 		r3, r6, r13
 1a8:	6d617400 	tnecget	r11, rfsl0
 1ac:	7072696e 		r3, r18, r13
 1b0:	745f6275 		r2, r31, r12
 1b4:	6600655f 	bslli	r16, r0, 31
 1b8:	73707269 		r27, r16, r14
 1bc:	6e746600 	necget	r19, rfsl0
 1c0:	7072696e 		r3, r18, r13
 1c4:	74007769 		r0, r0, r14
 1c8:	64746800 	bsrli	r3, r20, 0
 1cc:	6c657462 	tnecget	r3, rfsl2
 1d0:	61736500 	muli	r11, r19, 25856
 1d4:	7072696e 		r3, r18, r13
 1d8:	7473006f 		r3, r19, r0
 1dc:	75746279 		r11, r20, r12
 1e0:	7465002e 		r3, r5, r0
 1e4:	2e2f2e2e 	rsubic	r17, r15, 11822
 1e8:	2f6c6962 	rsubic	r27, r12, 26978
 1ec:	2f655f6c 	rsubic	r27, r5, 24428
 1f0:	69622f65 		r11, r2, r5
 1f4:	5f707269 		r27, r16, r14
 1f8:	6e74662e 	necget	r19, rfsl14
 1fc:	63007661 	muli	r24, r0, 30305
 200:	72670074 		r19, r7, r0
 204:	6d703130 	tcget	r11, rfsl0
 208:	00746d70 		r3, r20, r13
 20c:	31310074 	addik	r9, r17, 116
 210:	6d703132 	tcget	r11, rfsl2
 214:	006c6f65 		r3, r12, r13
 218:	66666c65 	bslli	r19, r6, 5
 21c:	725f3878 		r18, r31, r7
 220:	385f6463 	addikc	r2, r31, 25699
 224:	742e6300 		r1, r14, r12
 228:	746d7030 		r3, r13, r14
 22c:	00746d70 		r3, r20, r13
 230:	3100746d 	addik	r8, r0, 29805
 234:	70320074 		r1, r18, r0
 238:	6d703300 	tcget	r11, rfsl0
 23c:	746d7034 		r3, r13, r14
 240:	00746d70 		r3, r20, r13
 244:	3500746d 	rsubik	r8, r0, 29805
 248:	70360062 		r1, r22, r0
 24c:	6c6f636b 	ncget	r3, rfsl11
 250:	00746d70 		r3, r20, r13
 254:	31330064 	addik	r9, r19, 100
 258:	61746170 	muli	r11, r20, 24944
 25c:	74720074 		r3, r18, r0
 260:	6d703700 	tecget	r11, rfsl0
 264:	6c6f6566 	necget	r3, rfsl6
 268:	666c6572 	bslli	r19, r12, 18
 26c:	5f387838 		r25, r24, r15
 270:	5f646374 		r27, r4, r12
 274:	0073625f 		r3, r19, r12
 278:	696e7431 		r11, r14, r14
 27c:	365f7400 	rsubik	r18, r31, 29696
 280:	73625f69 		r27, r2, r11
 284:	6e743332 	tcget	r19, rfsl2
 288:	5f74006d 		r27, r20, r0
 28c:	61696e2e 	muli	r11, r9, 28206
 290:	63007468 	muli	r24, r0, 29800
 294:	72657368 		r19, r5, r14
 298:	6f6c6400 	necget	r27, rfsl0
 29c:	64756d6d 	bslli	r3, r21, 13
 2a0:	79007469 		r8, r0, r14
 2a4:	6d65725f 	tncget	r11, rfsl15
 2a8:	315f696e 	addik	r10, r31, 26990
 2ac:	6974006d 		r11, r20, r0
 2b0:	61696e00 	muli	r11, r9, 28160
 2b4:	73625f66 		r27, r2, r11
 2b8:	616c7365 	muli	r11, r12, 29541
 2bc:	0074696d 		r3, r20, r13
 2c0:	65725f31 		r11, r18, r11
 2c4:	5f646973 		r27, r4, r13
 2c8:	61626c65 	muli	r11, r2, 27749
 2cc:	0074696d 		r3, r20, r13
 2d0:	65725f31 		r11, r18, r11
 2d4:	5f656e61 		r27, r5, r13
 2d8:	626c6500 	muli	r19, r12, 25856
 2dc:	656e645f 	bslli	r11, r14, 31
 2e0:	74696d65 		r3, r9, r13
 2e4:	0074696d 		r3, r20, r13
 2e8:	65725f31 		r11, r18, r11
 2ec:	5f676574 		r27, r7, r12
 2f0:	76616c00 		r19, r1, r13
 2f4:	74657374 		r3, r5, r14
 2f8:	5f636173 		r27, r3, r12
 2fc:	65007469 	bslli	r8, r0, 9
 300:	6d65725f 	tncget	r11, rfsl15
 304:	315f7265 	addik	r10, r31, 29285
 308:	73657400 		r27, r5, r14
 30c:	73625f74 		r27, r2, r11
 310:	72756500 		r19, r21, r12
