
aes.elf:     file format elf32-microblaze


Disassembly of section .vectors.reset:

10000000 <_start>:
10000000:	b0001000 	imm	4096
10000004:	b8080050 	brai	80	// 10000050 <_start1>

Disassembly of section .vectors.sw_exception:

10000008 <_vector_sw_exception>:
10000008:	b0001000 	imm	4096
1000000c:	b8083400 	brai	13312	// 10003400 <_exception_handler>

Disassembly of section .vectors.interrupt:

10000010 <_vector_interrupt>:
10000010:	b0001000 	imm	4096
10000014:	b8083410 	brai	13328	// 10003410 <_interrupt_handler>

Disassembly of section .vectors.hw_exception:

10000020 <_vector_hw_exception>:
10000020:	b0001000 	imm	4096
10000024:	b8083408 	brai	13320	// 10003408 <_hw_exception_handler>

Disassembly of section .text:

10000050 <_start1>:
10000050:	b0001000 	imm	4096
10000054:	31a040ec 	addik	r13, r0, 16620	// 100040ec <_SDA_BASE_>
10000058:	b0001000 	imm	4096
1000005c:	30403fbd 	addik	r2, r0, 16317	// 10003fbd <_SDA2_BASE_>
10000060:	b0001000 	imm	4096
10000064:	30204310 	addik	r1, r0, 17168
10000068:	b9f4012c 	brlid	r15, 300	// 10000194 <_crtinit>
1000006c:	80000000 	or	r0, r0, r0
10000070:	b9f433b8 	brlid	r15, 13240	// 10003428 <exit>
10000074:	30a30000 	addik	r5, r3, 0

10000078 <_exit>:
10000078:	b8000000 	bri	0	// 10000078 <_exit>

1000007c <__do_global_dtors_aux>:
1000007c:	b0001000 	imm	4096
10000080:	e06040fc 	lbui	r3, r0, 16636	// 100040fc <__tbss_end>
10000084:	3021ffdc 	addik	r1, r1, -36
10000088:	f9e10000 	swi	r15, r1, 0
1000008c:	fa61001c 	swi	r19, r1, 28
10000090:	be23008c 	bneid	r3, 140		// 1000011c
10000094:	fac10020 	swi	r22, r1, 32
10000098:	b0001000 	imm	4096
1000009c:	32c040d4 	addik	r22, r0, 16596	// 100040d4 <__CTOR_END__>
100000a0:	b0001000 	imm	4096
100000a4:	326040d8 	addik	r19, r0, 16600	// 100040d8 <__DTOR_END__>
100000a8:	b0001000 	imm	4096
100000ac:	e8604100 	lwi	r3, r0, 16640	// 10004100 <dtor_idx.2340>
100000b0:	16769800 	rsubk	r19, r22, r19
100000b4:	66730202 	bsrai	r19, r19, 2
100000b8:	3273ffff 	addik	r19, r19, -1
100000bc:	14931803 	cmpu	r4, r19, r3
100000c0:	bea40034 	bgeid	r4, 52		// 100000f4
100000c4:	30630001 	addik	r3, r3, 1
100000c8:	64830402 	bslli	r4, r3, 2
100000cc:	c884b000 	lw	r4, r4, r22
100000d0:	b0001000 	imm	4096
100000d4:	f8604100 	swi	r3, r0, 16640	// 10004100 <dtor_idx.2340>
100000d8:	99fc2000 	brald	r15, r4
100000dc:	80000000 	or	r0, r0, r0
100000e0:	b0001000 	imm	4096
100000e4:	e8604100 	lwi	r3, r0, 16640	// 10004100 <dtor_idx.2340>
100000e8:	14931803 	cmpu	r4, r19, r3
100000ec:	be44ffdc 	bltid	r4, -36		// 100000c8
100000f0:	30630001 	addik	r3, r3, 1
100000f4:	b0000000 	imm	0
100000f8:	30600000 	addik	r3, r0, 0
100000fc:	bc030014 	beqi	r3, 20		// 10000110
10000100:	b0001000 	imm	4096
10000104:	30a040dc 	addik	r5, r0, 16604	// 100040dc <__EH_FRAME_BEGIN__>
10000108:	99fc1800 	brald	r15, r3
1000010c:	80000000 	or	r0, r0, r0
10000110:	30600001 	addik	r3, r0, 1
10000114:	b0001000 	imm	4096
10000118:	f06040fc 	sbi	r3, r0, 16636	// 100040fc <__tbss_end>
1000011c:	e9e10000 	lwi	r15, r1, 0
10000120:	ea61001c 	lwi	r19, r1, 28
10000124:	eac10020 	lwi	r22, r1, 32
10000128:	b60f0008 	rtsd	r15, 8
1000012c:	30210024 	addik	r1, r1, 36

10000130 <frame_dummy>:
10000130:	b0000000 	imm	0
10000134:	30600000 	addik	r3, r0, 0
10000138:	3021ffe4 	addik	r1, r1, -28
1000013c:	be030020 	beqid	r3, 32		// 1000015c
10000140:	f9e10000 	swi	r15, r1, 0
10000144:	b0001000 	imm	4096
10000148:	30a040dc 	addik	r5, r0, 16604	// 100040dc <__EH_FRAME_BEGIN__>
1000014c:	b0001000 	imm	4096
10000150:	30c04104 	addik	r6, r0, 16644	// 10004104 <object.2350>
10000154:	99fc1800 	brald	r15, r3
10000158:	80000000 	or	r0, r0, r0
1000015c:	b0001000 	imm	4096
10000160:	e86040e0 	lwi	r3, r0, 16608	// 100040e0 <__JCR_END__>
10000164:	be030028 	beqid	r3, 40		// 1000018c
10000168:	e9e10000 	lwi	r15, r1, 0
1000016c:	b0000000 	imm	0
10000170:	30600000 	addik	r3, r0, 0
10000174:	bc030018 	beqi	r3, 24		// 1000018c
10000178:	b0001000 	imm	4096
1000017c:	30a040e0 	addik	r5, r0, 16608	// 100040e0 <__JCR_END__>
10000180:	99fc1800 	brald	r15, r3
10000184:	80000000 	or	r0, r0, r0
10000188:	e9e10000 	lwi	r15, r1, 0
1000018c:	b60f0008 	rtsd	r15, 8
10000190:	3021001c 	addik	r1, r1, 28

10000194 <_crtinit>:
10000194:	2021ffec 	addi	r1, r1, -20
10000198:	f9e10000 	swi	r15, r1, 0
1000019c:	b0001000 	imm	4096
100001a0:	20c040f0 	addi	r6, r0, 16624	// 100040f0 <__sbss_end>
100001a4:	b0001000 	imm	4096
100001a8:	20e040f0 	addi	r7, r0, 16624	// 100040f0 <__sbss_end>
100001ac:	06463800 	rsub	r18, r6, r7
100001b0:	bc720014 	blei	r18, 20		// 100001c4
100001b4:	f8060000 	swi	r0, r6, 0
100001b8:	20c60004 	addi	r6, r6, 4
100001bc:	06463800 	rsub	r18, r6, r7
100001c0:	bc92fff4 	bgti	r18, -12		// 100001b4
100001c4:	b0001000 	imm	4096
100001c8:	20c040fc 	addi	r6, r0, 16636	// 100040fc <__tbss_end>
100001cc:	b0001000 	imm	4096
100001d0:	20e0411c 	addi	r7, r0, 16668	// 1000411c <__bss_end>
100001d4:	06463800 	rsub	r18, r6, r7
100001d8:	bc720014 	blei	r18, 20		// 100001ec
100001dc:	f8060000 	swi	r0, r6, 0
100001e0:	20c60004 	addi	r6, r6, 4
100001e4:	06463800 	rsub	r18, r6, r7
100001e8:	bc92fff4 	bgti	r18, -12		// 100001dc
100001ec:	b9f43234 	brlid	r15, 12852	// 10003420 <_program_init>
100001f0:	80000000 	or	r0, r0, r0
100001f4:	b9f43b00 	brlid	r15, 15104	// 10003cf4 <__init>
100001f8:	80000000 	or	r0, r0, r0
100001fc:	20c00000 	addi	r6, r0, 0
10000200:	20e00000 	addi	r7, r0, 0
10000204:	b9f435b0 	brlid	r15, 13744	// 100037b4 <main>
10000208:	20a00000 	addi	r5, r0, 0
1000020c:	32630000 	addik	r19, r3, 0
10000210:	b9f43b20 	brlid	r15, 15136	// 10003d30 <__fini>
10000214:	80000000 	or	r0, r0, r0
10000218:	b9f43200 	brlid	r15, 12800	// 10003418 <_program_clean>
1000021c:	80000000 	or	r0, r0, r0
10000220:	c9e10000 	lw	r15, r1, r0
10000224:	30730000 	addik	r3, r19, 0
10000228:	b60f0008 	rtsd	r15, 8
1000022c:	20210014 	addi	r1, r1, 20

10000230 <uart_put>:
 * \brief Write data to TX buffer
 * \param[in] data The data to write
 */
static __inline__ void uart_write(const sb_uint8_t data)
{
  WRITE_REG32(UART_DATA_TX_REG,data);
10000230:	b0002000 	imm	8192
10000234:	f8a0000c 	swi	r5, r0, 12
 * \fn void uart_send(void)
 * \brief Start a TX transfert
 */
static __inline__ void uart_send(void)
{
  WRITE_REG32(UART_CONTROL_REG,SEND_TX_BIT);
10000238:	30600001 	addik	r3, r0, 1
1000023c:	b0002000 	imm	8192
10000240:	f8600008 	swi	r3, r0, 8
 * \fn void uart_wait_tx_done(void)
 * \brief Poll the TX busy flag, return when TX transfert is finished.
 */
void uart_wait_tx_done(void)
{
  sb_uint32_t flag = (READ_REG32(UART_STATUS_REG) & TX_BUSY_FLAG_BIT);
10000244:	b0002000 	imm	8192
10000248:	e8600000 	lwi	r3, r0, 0
1000024c:	a4630002 	andi	r3, r3, 2
  while(flag == TX_BUSY_FLAG_BIT)
10000250:	bc23fff4 	bnei	r3, -12		// 10000244
10000254:	b60f0008 	rtsd	r15, 8
10000258:	80000000 	or	r0, r0, r0

1000025c <uart_get>:
 * \fn void uart_wait_rx_ready(void)
 * \brief Poll the RX ready flag, return when new RX data.
 */
void uart_wait_rx_ready(void)
{
  sb_uint32_t flag = (READ_REG32(UART_STATUS_REG) & RX_READY_FLAG_BIT);
1000025c:	b0002000 	imm	8192
10000260:	e8600000 	lwi	r3, r0, 0
10000264:	a4630001 	andi	r3, r3, 1
  while(flag != RX_READY_FLAG_BIT)
10000268:	a8630001 	xori	r3, r3, 1
1000026c:	bc23fff0 	bnei	r3, -16	// 1000025c <uart_get>
 * \brief Read data from RX buffer
 * \param[in,out] data The pointer to the data
 */
static __inline__ void uart_read(sb_uint8_t *const data)
{
  *data = (sb_uint8_t)READ_REG32(UART_DATA_RX_REG);
10000270:	b0002000 	imm	8192
10000274:	e8600004 	lwi	r3, r0, 4
 */
void uart_get(sb_uint8_t *const in)
{
  uart_wait_rx_ready();
  uart_read(in);
}
10000278:	b60f0008 	rtsd	r15, 8
1000027c:	f0650000 	sbi	r3, r5, 0

10000280 <uart_wait_rx_ready>:
 * \fn void uart_wait_rx_ready(void)
 * \brief Poll the RX ready flag, return when new RX data.
 */
void uart_wait_rx_ready(void)
{
  sb_uint32_t flag = (READ_REG32(UART_STATUS_REG) & RX_READY_FLAG_BIT);
10000280:	b0002000 	imm	8192
10000284:	e8600000 	lwi	r3, r0, 0
10000288:	a4630001 	andi	r3, r3, 1
  while(flag != RX_READY_FLAG_BIT)
1000028c:	a8630001 	xori	r3, r3, 1
10000290:	bc23fff0 	bnei	r3, -16	// 10000280 <uart_wait_rx_ready>
10000294:	b60f0008 	rtsd	r15, 8
10000298:	80000000 	or	r0, r0, r0

1000029c <uart_wait_tx_done>:
 * \fn void uart_wait_tx_done(void)
 * \brief Poll the TX busy flag, return when TX transfert is finished.
 */
void uart_wait_tx_done(void)
{
  sb_uint32_t flag = (READ_REG32(UART_STATUS_REG) & TX_BUSY_FLAG_BIT);
1000029c:	b0002000 	imm	8192
100002a0:	e8600000 	lwi	r3, r0, 0
100002a4:	a4630002 	andi	r3, r3, 2
  while(flag == TX_BUSY_FLAG_BIT)
100002a8:	bc23fff4 	bnei	r3, -12	// 1000029c <uart_wait_tx_done>
100002ac:	b60f0008 	rtsd	r15, 8
100002b0:	80000000 	or	r0, r0, r0

100002b4 <outbyte>:
  int *varg = (int *)((char **)&format);
  return print(&out,varg);
}

void outbyte(char **str, char c)
{
100002b4:	3021ffe4 	addik	r1, r1, -28
  if(str) 
100002b8:	be050028 	beqid	r5, 40		// 100002e0
100002bc:	f9e10000 	swi	r15, r1, 0
  {
    **str = c;
100002c0:	e8650000 	lwi	r3, r5, 0
100002c4:	f0c30000 	sbi	r6, r3, 0
    ++(*str);
100002c8:	e8650000 	lwi	r3, r5, 0
100002cc:	30630001 	addik	r3, r3, 1
100002d0:	f8650000 	swi	r3, r5, 0
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
  }
}
100002d4:	e9e10000 	lwi	r15, r1, 0
100002d8:	b60f0008 	rtsd	r15, 8
100002dc:	3021001c 	addik	r1, r1, 28
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
100002e0:	b9f4ff50 	brlid	r15, -176	// 10000230 <uart_put>
100002e4:	a4a600ff 	andi	r5, r6, 255
  }
}
100002e8:	e9e10000 	lwi	r15, r1, 0
100002ec:	b60f0008 	rtsd	r15, 8
100002f0:	3021001c 	addik	r1, r1, 28

100002f4 <prints>:

int prints(char **out, const char *string, int width, int pad)
{
100002f4:	3021ffcc 	addik	r1, r1, -52
100002f8:	fa610020 	swi	r19, r1, 32
100002fc:	fae10028 	swi	r23, r1, 40
10000300:	fb01002c 	swi	r24, r1, 44
10000304:	f9e10000 	swi	r15, r1, 0
10000308:	fac10024 	swi	r22, r1, 36
1000030c:	fb210030 	swi	r25, r1, 48
10000310:	13070000 	addk	r24, r7, r0
10000314:	12650000 	addk	r19, r5, r0
  int pc = 0, padchar = ' ';

  if(width > 0)  
10000318:	be670050 	bleid	r7, 80		// 10000368
1000031c:	32e00020 	addik	r23, r0, 32
  {
    int len = 0;
    const char *ptr;
    for (ptr = string; *ptr; ++ptr) ++len;
10000320:	e0860000 	lbui	r4, r6, 0
10000324:	90840060 	sext8	r4, r4
10000328:	be040110 	beqid	r4, 272		// 10000438
1000032c:	10660000 	addk	r3, r6, r0
10000330:	10800000 	addk	r4, r0, r0
10000334:	30630001 	addik	r3, r3, 1
10000338:	e0a30000 	lbui	r5, r3, 0
1000033c:	90a50060 	sext8	r5, r5
10000340:	be25fff4 	bneid	r5, -12		// 10000334
10000344:	30840001 	addik	r4, r4, 1
    if (len >= width) 
10000348:	14782001 	cmp	r3, r24, r4
1000034c:	be43000c 	bltid	r3, 12		// 10000358
10000350:	1704c000 	rsubk	r24, r4, r24
    {
      width = 0;
10000354:	13050000 	addk	r24, r5, r0
    }
    else 
    {
      width -= len;
    }
    if(pad & PAD_ZERO) 
10000358:	a4680002 	andi	r3, r8, 2
1000035c:	be03000c 	beqid	r3, 12		// 10000368
10000360:	32e00020 	addik	r23, r0, 32
10000364:	32e00030 	addik	r23, r0, 48
    {
      padchar = '0';
    }
  }
  
  if(!(pad & PAD_RIGHT)) 
10000368:	a5080001 	andi	r8, r8, 1
1000036c:	be28003c 	bneid	r8, 60		// 100003a8
10000370:	12c00000 	addk	r22, r0, r0
  {
    for(;width > 0;--width) 
10000374:	be780034 	bleid	r24, 52		// 100003a8
10000378:	12c80000 	addk	r22, r8, r0
1000037c:	be130104 	beqid	r19, 260		// 10000480
10000380:	10780000 	addk	r3, r24, r0
10000384:	e8930000 	lwi	r4, r19, 0

void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
10000388:	f2e40000 	sbi	r23, r4, 0
    ++(*str);
1000038c:	e8930000 	lwi	r4, r19, 0
    }
  }
  
  if(!(pad & PAD_RIGHT)) 
  {
    for(;width > 0;--width) 
10000390:	3063ffff 	addik	r3, r3, -1
void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
    ++(*str);
10000394:	30840001 	addik	r4, r4, 1
    }
  }
  
  if(!(pad & PAD_RIGHT)) 
  {
    for(;width > 0;--width) 
10000398:	be23fff0 	bneid	r3, -16		// 10000388
1000039c:	f8930000 	swi	r4, r19, 0
100003a0:	12d80000 	addk	r22, r24, r0
100003a4:	13000000 	addk	r24, r0, r0
      outbyte(out,padchar);
      ++pc;
    }
  }
  
  for(;*string;++string) 
100003a8:	e0a60000 	lbui	r5, r6, 0
100003ac:	90a50060 	sext8	r5, r5
100003b0:	bc050034 	beqi	r5, 52		// 100003e4
100003b4:	be1300ac 	beqid	r19, 172		// 10000460
100003b8:	13260000 	addk	r25, r6, r0
100003bc:	e8930000 	lwi	r4, r19, 0

void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
100003c0:	f0a40000 	sbi	r5, r4, 0
    ++(*str);
100003c4:	e8930000 	lwi	r4, r19, 0
  }
  
  for(;*string;++string) 
  {
    outbyte(out,*string);
    ++pc;
100003c8:	30c60001 	addik	r6, r6, 1
void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
    ++(*str);
100003cc:	30840001 	addik	r4, r4, 1
100003d0:	f8930000 	swi	r4, r19, 0
      outbyte(out,padchar);
      ++pc;
    }
  }
  
  for(;*string;++string) 
100003d4:	e0a60000 	lbui	r5, r6, 0
100003d8:	90a50060 	sext8	r5, r5
100003dc:	be25ffe4 	bneid	r5, -28		// 100003c0
100003e0:	32d60001 	addik	r22, r22, 1
  {
    outbyte(out,*string);
    ++pc;
   }
   
  for(;width > 0;--width) 
100003e4:	be780034 	bleid	r24, 52		// 10000418
100003e8:	10760000 	addk	r3, r22, r0
100003ec:	be130054 	beqid	r19, 84		// 10000440
100003f0:	10780000 	addk	r3, r24, r0
100003f4:	e8930000 	lwi	r4, r19, 0

void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
100003f8:	f2e40000 	sbi	r23, r4, 0
    ++(*str);
100003fc:	e8930000 	lwi	r4, r19, 0
  {
    outbyte(out,*string);
    ++pc;
   }
   
  for(;width > 0;--width) 
10000400:	3063ffff 	addik	r3, r3, -1
void outbyte(char **str, char c)
{
  if(str) 
  {
    **str = c;
    ++(*str);
10000404:	30840001 	addik	r4, r4, 1
  {
    outbyte(out,*string);
    ++pc;
   }
   
  for(;width > 0;--width) 
10000408:	be23fff0 	bneid	r3, -16		// 100003f8
1000040c:	f8930000 	swi	r4, r19, 0
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
  }
}

int prints(char **out, const char *string, int width, int pad)
10000410:	12d6c000 	addk	r22, r22, r24
    outbyte(out,padchar);
    ++pc;
  }

  return pc;
}
10000414:	10760000 	addk	r3, r22, r0
10000418:	e9e10000 	lwi	r15, r1, 0
1000041c:	ea610020 	lwi	r19, r1, 32
10000420:	eac10024 	lwi	r22, r1, 36
10000424:	eae10028 	lwi	r23, r1, 40
10000428:	eb01002c 	lwi	r24, r1, 44
1000042c:	eb210030 	lwi	r25, r1, 48
10000430:	b60f0008 	rtsd	r15, 8
10000434:	30210034 	addik	r1, r1, 52
    {
      width = 0;
    }
    else 
    {
      width -= len;
10000438:	b810ff20 	brid	-224		// 10000358
1000043c:	1704c000 	rsubk	r24, r4, r24
  {
    outbyte(out,*string);
    ++pc;
   }
   
  for(;width > 0;--width) 
10000440:	12780000 	addk	r19, r24, r0
10000444:	a73700ff 	andi	r25, r23, 255
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
10000448:	10b90000 	addk	r5, r25, r0
1000044c:	b9f4fde4 	brlid	r15, -540	// 10000230 <uart_put>
10000450:	3273ffff 	addik	r19, r19, -1
  {
    outbyte(out,*string);
    ++pc;
   }
   
  for(;width > 0;--width) 
10000454:	bc33fff4 	bnei	r19, -12		// 10000448
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
  }
}

int prints(char **out, const char *string, int width, int pad)
10000458:	b810ffbc 	brid	-68		// 10000414
1000045c:	12d6c000 	addk	r22, r22, r24
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
10000460:	a4a500ff 	andi	r5, r5, 255
10000464:	b9f4fdcc 	brlid	r15, -564	// 10000230 <uart_put>
10000468:	33390001 	addik	r25, r25, 1
      outbyte(out,padchar);
      ++pc;
    }
  }
  
  for(;*string;++string) 
1000046c:	e0b90000 	lbui	r5, r25, 0
10000470:	90a50060 	sext8	r5, r5
10000474:	be25ffec 	bneid	r5, -20		// 10000460
10000478:	32d60001 	addik	r22, r22, 1
1000047c:	b800ff68 	bri	-152		// 100003e4
    }
  }
  
  if(!(pad & PAD_RIGHT)) 
  {
    for(;width > 0;--width) 
10000480:	12d80000 	addk	r22, r24, r0
10000484:	a73700ff 	andi	r25, r23, 255
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
10000488:	10b90000 	addk	r5, r25, r0
1000048c:	f8c1001c 	swi	r6, r1, 28
10000490:	b9f4fda0 	brlid	r15, -608	// 10000230 <uart_put>
10000494:	32d6ffff 	addik	r22, r22, -1
    }
  }
  
  if(!(pad & PAD_RIGHT)) 
  {
    for(;width > 0;--width) 
10000498:	be36fff0 	bneid	r22, -16		// 10000488
1000049c:	e8c1001c 	lwi	r6, r1, 28
100004a0:	b810ff04 	brid	-252		// 100003a4
100004a4:	12d80000 	addk	r22, r24, r0

100004a8 <printi>:

  return pc;
}

int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
100004a8:	3021ffbc 	addik	r1, r1, -68
100004ac:	fae10040 	swi	r23, r1, 64
100004b0:	f9e10000 	swi	r15, r1, 0
100004b4:	fa610038 	swi	r19, r1, 56
100004b8:	fac1003c 	swi	r22, r1, 60
100004bc:	10660000 	addk	r3, r6, r0
100004c0:	12e50000 	addk	r23, r5, r0
  char print_buf[PRINT_BUF_LEN];
  char *s;
  int t, neg = 0, pc = 0;
  unsigned int u = i;

  if(i == 0) 
100004c4:	be060108 	beqid	r6, 264		// 100005cc
100004c8:	10860000 	addk	r4, r6, r0
    print_buf[0] = '0';
    print_buf[1] = '\0';
    return prints(out,print_buf,width,pad);
  }

  if(sg && b == 10 && i < 0) 
100004cc:	be2800d4 	bneid	r8, 212		// 100005a0
100004d0:	10a00000 	addk	r5, r0, r0
    neg = 1;
    u = -i;
  }

  s = print_buf + PRINT_BUF_LEN-1;
  *s = '\0';
100004d4:	f001002b 	sbi	r0, r1, 43

  while(u) 
100004d8:	be040058 	beqid	r4, 88		// 10000530
100004dc:	30c1002b 	addik	r6, r1, 43
100004e0:	eac10060 	lwi	r22, r1, 96
    t = u % b;
    if(t >= 10)
    {
      t += letbase - '0' - 10;
    }
    *--s = t + '0';
100004e4:	32600009 	addik	r19, r0, 9
100004e8:	b8100014 	brid	20		// 100004fc
100004ec:	32d6ffc6 	addik	r22, r22, -58
100004f0:	318c0030 	addik	r12, r12, 48
  }

  s = print_buf + PRINT_BUF_LEN-1;
  *s = '\0';

  while(u) 
100004f4:	be04003c 	beqid	r4, 60		// 10000530
100004f8:	f1860000 	sbi	r12, r6, 0
  {
    t = u % b;
100004fc:	49872002 	idivu	r12, r7, r4
    if(t >= 10)
    {
      t += letbase - '0' - 10;
    }
    *--s = t + '0';
10000500:	30c6ffff 	addik	r6, r6, -1
  s = print_buf + PRINT_BUF_LEN-1;
  *s = '\0';

  while(u) 
  {
    t = u % b;
10000504:	416c3800 	mul	r11, r12, r7
10000508:	156b2000 	rsubk	r11, r11, r4
    if(t >= 10)
    {
      t += letbase - '0' - 10;
    }
    *--s = t + '0';
1000050c:	146b9801 	cmp	r3, r11, r19
    u /= b;
10000510:	108c0000 	addk	r4, r12, r0
    t = u % b;
    if(t >= 10)
    {
      t += letbase - '0' - 10;
    }
    *--s = t + '0';
10000514:	118b0000 	addk	r12, r11, r0
10000518:	bea3ffd8 	bgeid	r3, -40		// 100004f0
1000051c:	11765800 	addk	r11, r22, r11
10000520:	118b0000 	addk	r12, r11, r0
10000524:	318c0030 	addik	r12, r12, 48
  }

  s = print_buf + PRINT_BUF_LEN-1;
  *s = '\0';

  while(u) 
10000528:	be24ffd4 	bneid	r4, -44		// 100004fc
1000052c:	f1860000 	sbi	r12, r6, 0
    }
    *--s = t + '0';
    u /= b;
  }

  if(neg) 
10000530:	be250034 	bneid	r5, 52		// 10000564
10000534:	12650000 	addk	r19, r5, r0
    {
      *--s = '-';
    }
  }

	return pc + prints(out,s,width,pad);
10000538:	10b70000 	addk	r5, r23, r0
1000053c:	10e90000 	addk	r7, r9, r0
10000540:	b9f4fdb4 	brlid	r15, -588	// 100002f4 <prints>
10000544:	110a0000 	addk	r8, r10, r0
10000548:	10639800 	addk	r3, r3, r19
}
1000054c:	e9e10000 	lwi	r15, r1, 0
10000550:	ea610038 	lwi	r19, r1, 56
10000554:	eac1003c 	lwi	r22, r1, 60
10000558:	eae10040 	lwi	r23, r1, 64
1000055c:	b60f0008 	rtsd	r15, 8
10000560:	30210044 	addik	r1, r1, 68
    u /= b;
  }

  if(neg) 
  {
    if(width && (pad & PAD_ZERO)) 
10000564:	be090058 	beqid	r9, 88		// 100005bc
10000568:	3060002d 	addik	r3, r0, 45
1000056c:	a46a0002 	andi	r3, r10, 2
10000570:	be03004c 	beqid	r3, 76		// 100005bc
10000574:	3060002d 	addik	r3, r0, 45
  return print(&out,varg);
}

void outbyte(char **str, char c)
{
  if(str) 
10000578:	be170088 	beqid	r23, 136		// 10000600
1000057c:	3080002d 	addik	r4, r0, 45
  {
    **str = c;
10000580:	e8770000 	lwi	r3, r23, 0
10000584:	f0830000 	sbi	r4, r3, 0
    ++(*str);
10000588:	e8770000 	lwi	r3, r23, 0
1000058c:	30630001 	addik	r3, r3, 1
10000590:	f8770000 	swi	r3, r23, 0
  {
    if(width && (pad & PAD_ZERO)) 
    {
      outbyte(out, '-');
      ++pc;
     --width;
10000594:	3129ffff 	addik	r9, r9, -1
10000598:	b810ffa0 	brid	-96		// 10000538
1000059c:	32600001 	addik	r19, r0, 1
    print_buf[0] = '0';
    print_buf[1] = '\0';
    return prints(out,print_buf,width,pad);
  }

  if(sg && b == 10 && i < 0) 
100005a0:	3060000a 	addik	r3, r0, 10
100005a4:	88671c00 	pcmpeq	r3, r7, r3
100005a8:	bc03ff2c 	beqi	r3, -212		// 100004d4
100005ac:	bca6ff28 	bgei	r6, -216		// 100004d4
  {
    neg = 1;
    u = -i;
100005b0:	14860000 	rsubk	r4, r6, r0
    return prints(out,print_buf,width,pad);
  }

  if(sg && b == 10 && i < 0) 
  {
    neg = 1;
100005b4:	b810ff20 	brid	-224		// 100004d4
100005b8:	30a00001 	addik	r5, r0, 1
      ++pc;
     --width;
    }
    else 
    {
      *--s = '-';
100005bc:	f066ffff 	sbi	r3, r6, -1

int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
  char print_buf[PRINT_BUF_LEN];
  char *s;
  int t, neg = 0, pc = 0;
100005c0:	12600000 	addk	r19, r0, r0
      ++pc;
     --width;
    }
    else 
    {
      *--s = '-';
100005c4:	b810ff74 	brid	-140		// 10000538
100005c8:	30c6ffff 	addik	r6, r6, -1

  if(i == 0) 
  {
    print_buf[0] = '0';
    print_buf[1] = '\0';
    return prints(out,print_buf,width,pad);
100005cc:	10e90000 	addk	r7, r9, r0
100005d0:	110a0000 	addk	r8, r10, r0
  int t, neg = 0, pc = 0;
  unsigned int u = i;

  if(i == 0) 
  {
    print_buf[0] = '0';
100005d4:	30800030 	addik	r4, r0, 48
    print_buf[1] = '\0';
    return prints(out,print_buf,width,pad);
100005d8:	30c1001c 	addik	r6, r1, 28
  int t, neg = 0, pc = 0;
  unsigned int u = i;

  if(i == 0) 
  {
    print_buf[0] = '0';
100005dc:	f081001c 	sbi	r4, r1, 28
    print_buf[1] = '\0';
    return prints(out,print_buf,width,pad);
100005e0:	b9f4fd14 	brlid	r15, -748	// 100002f4 <prints>
100005e4:	f061001d 	sbi	r3, r1, 29
      *--s = '-';
    }
  }

	return pc + prints(out,s,width,pad);
}
100005e8:	e9e10000 	lwi	r15, r1, 0
100005ec:	ea610038 	lwi	r19, r1, 56
100005f0:	eac1003c 	lwi	r22, r1, 60
100005f4:	eae10040 	lwi	r23, r1, 64
100005f8:	b60f0008 	rtsd	r15, 8
100005fc:	30210044 	addik	r1, r1, 68
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
10000600:	30a0002d 	addik	r5, r0, 45
10000604:	f8c1002c 	swi	r6, r1, 44
10000608:	f9210030 	swi	r9, r1, 48
1000060c:	b9f4fc24 	brlid	r15, -988	// 10000230 <uart_put>
10000610:	f9410034 	swi	r10, r1, 52
10000614:	e9410034 	lwi	r10, r1, 52
10000618:	e9210030 	lwi	r9, r1, 48
1000061c:	b810ff78 	brid	-136		// 10000594
10000620:	e8c1002c 	lwi	r6, r1, 44

10000624 <print>:

	return pc + prints(out,s,width,pad);
}

int print(char **out, int *varg)
{
10000624:	3021ffbc 	addik	r1, r1, -68
10000628:	fac10028 	swi	r22, r1, 40
1000062c:	fb010030 	swi	r24, r1, 48
10000630:	f9e10000 	swi	r15, r1, 0
10000634:	fa610024 	swi	r19, r1, 36
10000638:	fae1002c 	swi	r23, r1, 44
1000063c:	fb210034 	swi	r25, r1, 52
10000640:	fb410038 	swi	r26, r1, 56
10000644:	fb61003c 	swi	r27, r1, 60
10000648:	fb810040 	swi	r28, r1, 64
  int width, pad;
  int pc = 0;
  char *format = (char *)(*varg++);
1000064c:	eae60000 	lwi	r23, r6, 0

	return pc + prints(out,s,width,pad);
}

int print(char **out, int *varg)
{
10000650:	12c50000 	addk	r22, r5, r0
  int width, pad;
  int pc = 0;
  char *format = (char *)(*varg++);
  char scr[2];

  for(;*format != 0;++format) 
10000654:	e0b70000 	lbui	r5, r23, 0
10000658:	90a50060 	sext8	r5, r5
1000065c:	be050108 	beqid	r5, 264		// 10000764
10000660:	13050000 	addk	r24, r5, r0

int print(char **out, int *varg)
{
  int width, pad;
  int pc = 0;
  char *format = (char *)(*varg++);
10000664:	33460004 	addik	r26, r6, 4
}

int print(char **out, int *varg)
{
  int width, pad;
  int pc = 0;
10000668:	13000000 	addk	r24, r0, r0
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
1000066c:	33200009 	addik	r25, r0, 9
        pc += printi (out,*varg++,16,0,width,pad,'A');
        continue;
      }
      if( *format == 'u' ) 
      {
        pc += printi(out,*varg++,10,0,width,pad,'a');
10000670:	33600061 	addik	r27, r0, 97
        pc += printi(out,*varg++,16,0,width,pad,'a');
        continue;
      } 
      if(*format == 'X') 
      {
        pc += printi (out,*varg++,16,0,width,pad,'A');
10000674:	33800041 	addik	r28, r0, 65
  char *format = (char *)(*varg++);
  char scr[2];

  for(;*format != 0;++format) 
  {
    if(*format == '%') 
10000678:	a9450025 	xori	r10, r5, 37
1000067c:	bc2a012c 	bnei	r10, 300		// 100007a8
    {
      ++format;
      width = pad = 0;
      if(*format == '\0') 
10000680:	e0970001 	lbui	r4, r23, 1
10000684:	90840060 	sext8	r4, r4
10000688:	be0400dc 	beqid	r4, 220		// 10000764
1000068c:	a8640025 	xori	r3, r4, 37
      {
        break;
      }
      if(*format == '%') 
10000690:	be030114 	beqid	r3, 276		// 100007a4
10000694:	32770001 	addik	r19, r23, 1
      {
        goto out;
      }
      if(*format == '-') 
10000698:	a864002d 	xori	r3, r4, 45
1000069c:	bc030150 	beqi	r3, 336		// 100007ec
      {
        ++format;
        pad = PAD_RIGHT;
      }
      while (*format == '0') 
100006a0:	a8640030 	xori	r3, r4, 48
100006a4:	be230024 	bneid	r3, 36		// 100006c8
100006a8:	10d30000 	addk	r6, r19, r0
  }

	return pc + prints(out,s,width,pad);
}

int print(char **out, int *varg)
100006ac:	30c60001 	addik	r6, r6, 1
      if(*format == '-') 
      {
        ++format;
        pad = PAD_RIGHT;
      }
      while (*format == '0') 
100006b0:	e0860000 	lbui	r4, r6, 0
      {
        ++format;
        pad |= PAD_ZERO;
100006b4:	a14a0002 	ori	r10, r10, 2
      if(*format == '-') 
      {
        ++format;
        pad = PAD_RIGHT;
      }
      while (*format == '0') 
100006b8:	90840060 	sext8	r4, r4
100006bc:	a8a40030 	xori	r5, r4, 48
100006c0:	be05ffec 	beqid	r5, -20		// 100006ac
100006c4:	12660000 	addk	r19, r6, r0
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
100006c8:	3104ffd0 	addik	r8, r4, -48
100006cc:	a46800ff 	andi	r3, r8, 255
100006d0:	1463c803 	cmpu	r3, r3, r25
100006d4:	10e00000 	addk	r7, r0, r0
100006d8:	bea30014 	bgeid	r3, 20		// 100006ec
100006dc:	10d30000 	addk	r6, r19, r0
      {
        width *= 10;
        width += *format - '0';
      }
      if(*format == 's') 
100006e0:	b8100040 	brid	64		// 10000720
100006e4:	a8640073 	xori	r3, r4, 115
100006e8:	3104ffd0 	addik	r8, r4, -48
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
100006ec:	e0860001 	lbui	r4, r6, 1
      {
        width *= 10;
100006f0:	65270402 	bslli	r9, r7, 2
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
100006f4:	30a4ffd0 	addik	r5, r4, -48
      {
        width *= 10;
100006f8:	10e93800 	addk	r7, r9, r7
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
100006fc:	a4a500ff 	andi	r5, r5, 255
  }

	return pc + prints(out,s,width,pad);
}

int print(char **out, int *varg)
10000700:	32660001 	addik	r19, r6, 1
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
      {
        width *= 10;
10000704:	10e73800 	addk	r7, r7, r7
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
10000708:	14a5c803 	cmpu	r5, r5, r25
1000070c:	10d30000 	addk	r6, r19, r0
      {
        width *= 10;
        width += *format - '0';
10000710:	10e83800 	addk	r7, r8, r7
      while (*format == '0') 
      {
        ++format;
        pad |= PAD_ZERO;
      }
      for (;*format >= '0' && *format <= '9';++format) 
10000714:	bea5ffd4 	bgeid	r5, -44		// 100006e8
10000718:	90840060 	sext8	r4, r4
      {
        width *= 10;
        width += *format - '0';
      }
      if(*format == 's') 
1000071c:	a8640073 	xori	r3, r4, 115
10000720:	be0300ac 	beqid	r3, 172		// 100007cc
10000724:	a8640064 	xori	r3, r4, 100
      {
        char *s = *((char **)varg++);
        pc += prints(out, s?s:"(null)",width,pad);
        continue;
      }  
      if(*format == 'd') 
10000728:	be0300e8 	beqid	r3, 232		// 10000810
1000072c:	11270000 	addk	r9, r7, r0
      {
        pc += printi(out,*varg++,10,1,width,pad,'a');
        continue;
      }
      if(*format == 'x') 
10000730:	a9040078 	xori	r8, r4, 120
10000734:	be080100 	beqid	r8, 256		// 10000834
10000738:	10b60000 	addk	r5, r22, r0
      {
        pc += printi(out,*varg++,16,0,width,pad,'a');
        continue;
      } 
      if(*format == 'X') 
1000073c:	a9040058 	xori	r8, r4, 88
10000740:	bc080110 	beqi	r8, 272		// 10000850
      {
        pc += printi (out,*varg++,16,0,width,pad,'A');
        continue;
      }
      if( *format == 'u' ) 
10000744:	a9040075 	xori	r8, r4, 117
10000748:	bc080124 	beqi	r8, 292		// 1000086c
      {
        pc += printi(out,*varg++,10,0,width,pad,'a');
        continue;
      }
      if(*format == 'c') 
1000074c:	a8840063 	xori	r4, r4, 99
10000750:	bc040138 	beqi	r4, 312		// 10000888
  int width, pad;
  int pc = 0;
  char *format = (char *)(*varg++);
  char scr[2];

  for(;*format != 0;++format) 
10000754:	e0b30001 	lbui	r5, r19, 1
10000758:	90a50060 	sext8	r5, r5
1000075c:	be25ff1c 	bneid	r5, -228		// 10000678
10000760:	32f30001 	addik	r23, r19, 1
       outbyte(out,*format);
       ++pc;
     }
   }
   
   if(out) 
10000764:	be160014 	beqid	r22, 20		// 10000778
10000768:	10780000 	addk	r3, r24, r0
   {
     **out = '\0';
1000076c:	e8760000 	lwi	r3, r22, 0
10000770:	f0030000 	sbi	r0, r3, 0
   }
   
   return pc;
}
10000774:	10780000 	addk	r3, r24, r0
10000778:	e9e10000 	lwi	r15, r1, 0
1000077c:	ea610024 	lwi	r19, r1, 36
10000780:	eac10028 	lwi	r22, r1, 40
10000784:	eae1002c 	lwi	r23, r1, 44
10000788:	eb010030 	lwi	r24, r1, 48
1000078c:	eb210034 	lwi	r25, r1, 52
10000790:	eb410038 	lwi	r26, r1, 56
10000794:	eb61003c 	lwi	r27, r1, 60
10000798:	eb810040 	lwi	r28, r1, 64
1000079c:	b60f0008 	rtsd	r15, 8
100007a0:	30210044 	addik	r1, r1, 68

  for(;*format != 0;++format) 
  {
    if(*format == '%') 
    {
      ++format;
100007a4:	12f30000 	addk	r23, r19, r0
  return print(&out,varg);
}

void outbyte(char **str, char c)
{
  if(str) 
100007a8:	bc160058 	beqi	r22, 88		// 10000800
  {
    **str = c;
100007ac:	e8760000 	lwi	r3, r22, 0
100007b0:	f0a30000 	sbi	r5, r3, 0
    ++(*str);
100007b4:	e8760000 	lwi	r3, r22, 0
100007b8:	30630001 	addik	r3, r3, 1
100007bc:	f8760000 	swi	r3, r22, 0
     }
     else 
     {
       out:
       outbyte(out,*format);
       ++pc;
100007c0:	12770000 	addk	r19, r23, r0
100007c4:	b810ff90 	brid	-112		// 10000754
100007c8:	33180001 	addik	r24, r24, 1
        width *= 10;
        width += *format - '0';
      }
      if(*format == 's') 
      {
        char *s = *((char **)varg++);
100007cc:	e8da0000 	lwi	r6, r26, 0
        pc += prints(out, s?s:"(null)",width,pad);
100007d0:	be0600dc 	beqid	r6, 220		// 100008ac
100007d4:	335a0004 	addik	r26, r26, 4
100007d8:	10b60000 	addk	r5, r22, r0
100007dc:	b9f4fb18 	brlid	r15, -1256	// 100002f4 <prints>
100007e0:	110a0000 	addk	r8, r10, r0
        continue;
100007e4:	b810ff70 	brid	-144		// 10000754
100007e8:	13181800 	addk	r24, r24, r3
      {
        goto out;
      }
      if(*format == '-') 
      {
        ++format;
100007ec:	e0970002 	lbui	r4, r23, 2
100007f0:	32770002 	addik	r19, r23, 2
        pad = PAD_RIGHT;
100007f4:	31400001 	addik	r10, r0, 1
      {
        goto out;
      }
      if(*format == '-') 
      {
        ++format;
100007f8:	b810fea8 	brid	-344		// 100006a0
100007fc:	90840060 	sext8	r4, r4
    **str = c;
    ++(*str);
  }
  else 
  {
    uart_put((sb_uint8_t)c); /* UART for standart output */
10000800:	b9f4fa30 	brlid	r15, -1488	// 10000230 <uart_put>
10000804:	a4a500ff 	andi	r5, r5, 255
     }
     else 
     {
       out:
       outbyte(out,*format);
       ++pc;
10000808:	b810ffbc 	brid	-68		// 100007c4
1000080c:	12770000 	addk	r19, r23, r0
        pc += prints(out, s?s:"(null)",width,pad);
        continue;
      }  
      if(*format == 'd') 
      {
        pc += printi(out,*varg++,10,1,width,pad,'a');
10000810:	e8da0000 	lwi	r6, r26, 0
10000814:	10b60000 	addk	r5, r22, r0
10000818:	30e0000a 	addik	r7, r0, 10
1000081c:	31000001 	addik	r8, r0, 1
10000820:	b9f4fc88 	brlid	r15, -888	// 100004a8 <printi>
10000824:	fb61001c 	swi	r27, r1, 28
10000828:	335a0004 	addik	r26, r26, 4
        continue;
1000082c:	b810ff28 	brid	-216		// 10000754
10000830:	13181800 	addk	r24, r24, r3
      }
      if(*format == 'x') 
      {
        pc += printi(out,*varg++,16,0,width,pad,'a');
10000834:	e8da0000 	lwi	r6, r26, 0
10000838:	30e00010 	addik	r7, r0, 16
1000083c:	b9f4fc6c 	brlid	r15, -916	// 100004a8 <printi>
10000840:	fb61001c 	swi	r27, r1, 28
10000844:	335a0004 	addik	r26, r26, 4
        continue;
10000848:	b810ff0c 	brid	-244		// 10000754
1000084c:	13181800 	addk	r24, r24, r3
      } 
      if(*format == 'X') 
      {
        pc += printi (out,*varg++,16,0,width,pad,'A');
10000850:	e8da0000 	lwi	r6, r26, 0
10000854:	30e00010 	addik	r7, r0, 16
10000858:	b9f4fc50 	brlid	r15, -944	// 100004a8 <printi>
1000085c:	fb81001c 	swi	r28, r1, 28
10000860:	335a0004 	addik	r26, r26, 4
        continue;
10000864:	b810fef0 	brid	-272		// 10000754
10000868:	13181800 	addk	r24, r24, r3
      }
      if( *format == 'u' ) 
      {
        pc += printi(out,*varg++,10,0,width,pad,'a');
1000086c:	e8da0000 	lwi	r6, r26, 0
10000870:	30e0000a 	addik	r7, r0, 10
10000874:	b9f4fc34 	brlid	r15, -972	// 100004a8 <printi>
10000878:	fb61001c 	swi	r27, r1, 28
1000087c:	335a0004 	addik	r26, r26, 4
        continue;
10000880:	b810fed4 	brid	-300		// 10000754
10000884:	13181800 	addk	r24, r24, r3
      }
      if(*format == 'c') 
      {
        scr[0] = *varg++;
10000888:	e07a0003 	lbui	r3, r26, 3
        scr[1] = '\0';
        pc += prints(out,scr,width,pad);
1000088c:	110a0000 	addk	r8, r10, r0
10000890:	30c10020 	addik	r6, r1, 32
        pc += printi(out,*varg++,10,0,width,pad,'a');
        continue;
      }
      if(*format == 'c') 
      {
        scr[0] = *varg++;
10000894:	f0610020 	sbi	r3, r1, 32
        scr[1] = '\0';
        pc += prints(out,scr,width,pad);
10000898:	b9f4fa5c 	brlid	r15, -1444	// 100002f4 <prints>
1000089c:	f0810021 	sbi	r4, r1, 33
        pc += printi(out,*varg++,10,0,width,pad,'a');
        continue;
      }
      if(*format == 'c') 
      {
        scr[0] = *varg++;
100008a0:	335a0004 	addik	r26, r26, 4
        scr[1] = '\0';
        pc += prints(out,scr,width,pad);
        continue;
100008a4:	b810feb0 	brid	-336		// 10000754
100008a8:	13181800 	addk	r24, r24, r3
        width += *format - '0';
      }
      if(*format == 's') 
      {
        char *s = *((char **)varg++);
        pc += prints(out, s?s:"(null)",width,pad);
100008ac:	b0001000 	imm	4096
100008b0:	30c03d4c 	addik	r6, r0, 15692	// 10003d4c <__rodata_start>
100008b4:	b810ff28 	brid	-216		// 100007dc
100008b8:	10b60000 	addk	r5, r22, r0

100008bc <e_sprintf>:
  int *varg = (int *)((char **)&format);
  return print(0,varg);
}

int e_sprintf(char *out, const char *format, ...)
{
100008bc:	f8c10008 	swi	r6, r1, 8
100008c0:	f8e1000c 	swi	r7, r1, 12
100008c4:	f9010010 	swi	r8, r1, 16
100008c8:	f9210014 	swi	r9, r1, 20
100008cc:	f9410018 	swi	r10, r1, 24
100008d0:	3021ffe4 	addik	r1, r1, -28
100008d4:	f8a10020 	swi	r5, r1, 32
100008d8:	f8c10024 	swi	r6, r1, 36
  int *varg = (int *)((char **)&format);
  return print(&out,varg);
100008dc:	30a10020 	addik	r5, r1, 32
  int *varg = (int *)((char **)&format);
  return print(0,varg);
}

int e_sprintf(char *out, const char *format, ...)
{
100008e0:	f9e10000 	swi	r15, r1, 0
  int *varg = (int *)((char **)&format);
  return print(&out,varg);
100008e4:	b9f4fd40 	brlid	r15, -704	// 10000624 <print>
100008e8:	30c10024 	addik	r6, r1, 36
}
100008ec:	e9e10000 	lwi	r15, r1, 0
100008f0:	b60f0008 	rtsd	r15, 8
100008f4:	3021001c 	addik	r1, r1, 28

100008f8 <e_printf>:
 */

#include "e_printf.h"

int e_printf(const char *format, ...)
{ 
100008f8:	f8a10004 	swi	r5, r1, 4
100008fc:	f8c10008 	swi	r6, r1, 8
10000900:	f8e1000c 	swi	r7, r1, 12
10000904:	f9010010 	swi	r8, r1, 16
10000908:	f9210014 	swi	r9, r1, 20
1000090c:	f9410018 	swi	r10, r1, 24
10000910:	3021ffe4 	addik	r1, r1, -28
10000914:	f8a10020 	swi	r5, r1, 32
  int *varg = (int *)((char **)&format);
  return print(0,varg);
10000918:	30c10020 	addik	r6, r1, 32
 */

#include "e_printf.h"

int e_printf(const char *format, ...)
{ 
1000091c:	f9e10000 	swi	r15, r1, 0
  int *varg = (int *)((char **)&format);
  return print(0,varg);
10000920:	b9f4fd04 	brlid	r15, -764	// 10000624 <print>
10000924:	10a00000 	addk	r5, r0, r0
}
10000928:	e9e10000 	lwi	r15, r1, 0
1000092c:	b60f0008 	rtsd	r15, 8
10000930:	3021001c 	addik	r1, r1, 28

10000934 <RotWord>:
{
  sb_uint8_t buf;

  /* << 1 */
  buf  = w[0];
  w[0] = w[1];
10000934:	e0850001 	lbui	r4, r5, 1
void RotWord(sb_uint8_t w[4])
{
  sb_uint8_t buf;

  /* << 1 */
  buf  = w[0];
10000938:	e0650000 	lbui	r3, r5, 0
  w[0] = w[1];
1000093c:	f0850000 	sbi	r4, r5, 0
  w[1] = w[2];
10000940:	e0850002 	lbui	r4, r5, 2
10000944:	f0850001 	sbi	r4, r5, 1
  w[2] = w[3];
10000948:	e0850003 	lbui	r4, r5, 3
  w[3] = buf;
1000094c:	f0650003 	sbi	r3, r5, 3
}
10000950:	b60f0008 	rtsd	r15, 8
10000954:	f0850002 	sbi	r4, r5, 2

10000958 <SubWord>:

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
10000958:	b0001000 	imm	4096
1000095c:	30603d54 	addik	r3, r0, 15700	// 10003d54 <Sbox>
10000960:	e1050000 	lbui	r8, r5, 0
  w[1] = Sbox[w[1]];
10000964:	e0e50001 	lbui	r7, r5, 1
  w[2] = Sbox[w[2]];
10000968:	e0c50002 	lbui	r6, r5, 2
  w[3] = Sbox[w[3]];
1000096c:	e0850003 	lbui	r4, r5, 3
  w[3] = buf;
}

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
10000970:	c1081800 	lbu	r8, r8, r3
  w[1] = Sbox[w[1]];
10000974:	c0e71800 	lbu	r7, r7, r3
  w[2] = Sbox[w[2]];
10000978:	c0c61800 	lbu	r6, r6, r3
  w[3] = Sbox[w[3]];
1000097c:	c0841800 	lbu	r4, r4, r3
  w[3] = buf;
}

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
10000980:	f1050000 	sbi	r8, r5, 0
  w[1] = Sbox[w[1]];
10000984:	f0e50001 	sbi	r7, r5, 1
  w[2] = Sbox[w[2]];
10000988:	f0c50002 	sbi	r6, r5, 2
  w[3] = Sbox[w[3]];
}
1000098c:	b60f0008 	rtsd	r15, 8
10000990:	f0850003 	sbi	r4, r5, 3

10000994 <KeyExpansion>:

void KeyExpansion(const sb_uint8_t key[4*Nk], sb_uint8_t w[4][Nb*(Nr+1)])
{
10000994:	3021ff74 	addik	r1, r1, -140
10000998:	fae10068 	swi	r23, r1, 104
1000099c:	fb210070 	swi	r25, r1, 112
100009a0:	fb410074 	swi	r26, r1, 116
100009a4:	fb610078 	swi	r27, r1, 120
100009a8:	fb81007c 	swi	r28, r1, 124
100009ac:	fba10080 	swi	r29, r1, 128
100009b0:	fbc10084 	swi	r30, r1, 132
100009b4:	fbe10088 	swi	r31, r1, 136
100009b8:	fa610060 	swi	r19, r1, 96
100009bc:	fac10064 	swi	r22, r1, 100
100009c0:	fb01006c 	swi	r24, r1, 108
  sb_uint8_t temp[4];

  i = 0;
  while(i < Nk)
  {
    w[0][i] = key[4*i];
100009c4:	e1050000 	lbui	r8, r5, 0
}

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
100009c8:	b0001000 	imm	4096
100009cc:	33803d54 	addik	r28, r0, 15700	// 10003d54 <Sbox>
  sb_uint8_t temp[4];

  i = 0;
  while(i < Nk)
  {
    w[0][i] = key[4*i];
100009d0:	f1060000 	sbi	r8, r6, 0
    w[1][i] = key[4*i+1];
100009d4:	e0650001 	lbui	r3, r5, 1
100009d8:	f066002c 	sbi	r3, r6, 44
    w[2][i] = key[4*i+2];
100009dc:	e0850002 	lbui	r4, r5, 2
100009e0:	f0860058 	sbi	r4, r6, 88
    w[3][i] = key[4*i+3];
100009e4:	e0e50003 	lbui	r7, r5, 3
100009e8:	f0e60084 	sbi	r7, r6, 132
  sb_uint8_t temp[4];

  i = 0;
  while(i < Nk)
  {
    w[0][i] = key[4*i];
100009ec:	e1250004 	lbui	r9, r5, 4
100009f0:	f1260001 	sbi	r9, r6, 1
    w[1][i] = key[4*i+1];
100009f4:	e1450005 	lbui	r10, r5, 5
100009f8:	f146002d 	sbi	r10, r6, 45
    w[2][i] = key[4*i+2];
100009fc:	e1650006 	lbui	r11, r5, 6
10000a00:	f1660059 	sbi	r11, r6, 89
    w[3][i] = key[4*i+3];
10000a04:	e1850007 	lbui	r12, r5, 7
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
}

void KeyExpansion(const sb_uint8_t key[4*Nk], sb_uint8_t w[4][Nb*(Nr+1)])
10000a08:	a56a00ff 	andi	r11, r10, 255
  while(i < Nk)
  {
    w[0][i] = key[4*i];
    w[1][i] = key[4*i+1];
    w[2][i] = key[4*i+2];
    w[3][i] = key[4*i+3];
10000a0c:	f1860085 	sbi	r12, r6, 133
  sb_uint8_t temp[4];

  i = 0;
  while(i < Nk)
  {
    w[0][i] = key[4*i];
10000a10:	e2650008 	lbui	r19, r5, 8
10000a14:	f2660002 	sbi	r19, r6, 2
    w[1][i] = key[4*i+1];
10000a18:	e2c50009 	lbui	r22, r5, 9
10000a1c:	f2c6002e 	sbi	r22, r6, 46
    w[2][i] = key[4*i+2];
10000a20:	e305000a 	lbui	r24, r5, 10
10000a24:	f306005a 	sbi	r24, r6, 90
    w[3][i] = key[4*i+3];
10000a28:	e065000b 	lbui	r3, r5, 11
10000a2c:	f0660086 	sbi	r3, r6, 134
  sb_uint8_t temp[4];

  i = 0;
  while(i < Nk)
  {
    w[0][i] = key[4*i];
10000a30:	e085000c 	lbui	r4, r5, 12
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
}

void KeyExpansion(const sb_uint8_t key[4*Nk], sb_uint8_t w[4][Nb*(Nr+1)])
10000a34:	e266002c 	lbui	r19, r6, 44
10000a38:	e3460058 	lbui	r26, r6, 88
  sb_uint8_t temp[4];

  i = 0;
  while(i < Nk)
  {
    w[0][i] = key[4*i];
10000a3c:	f0860003 	sbi	r4, r6, 3
    w[1][i] = key[4*i+1];
10000a40:	e0e5000d 	lbui	r7, r5, 13
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
}

void KeyExpansion(const sb_uint8_t key[4*Nk], sb_uint8_t w[4][Nb*(Nr+1)])
10000a44:	e3060084 	lbui	r24, r6, 132

  i = 0;
  while(i < Nk)
  {
    w[0][i] = key[4*i];
    w[1][i] = key[4*i+1];
10000a48:	f0e6002f 	sbi	r7, r6, 47
    w[2][i] = key[4*i+2];
10000a4c:	e125000e 	lbui	r9, r5, 14
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
}

void KeyExpansion(const sb_uint8_t key[4*Nk], sb_uint8_t w[4][Nb*(Nr+1)])
10000a50:	e086002f 	lbui	r4, r6, 47
  i = 0;
  while(i < Nk)
  {
    w[0][i] = key[4*i];
    w[1][i] = key[4*i+1];
    w[2][i] = key[4*i+2];
10000a54:	f126005b 	sbi	r9, r6, 91
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
}

void KeyExpansion(const sb_uint8_t key[4*Nk], sb_uint8_t w[4][Nb*(Nr+1)])
10000a58:	a4e900ff 	andi	r7, r9, 255
  while(i < Nk)
  {
    w[0][i] = key[4*i];
    w[1][i] = key[4*i+1];
    w[2][i] = key[4*i+2];
    w[3][i] = key[4*i+3];
10000a5c:	e065000f 	lbui	r3, r5, 15
}

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
10000a60:	c187e000 	lbu	r12, r7, r28
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
}

void KeyExpansion(const sb_uint8_t key[4*Nk], sb_uint8_t w[4][Nb*(Nr+1)])
10000a64:	e0a60003 	lbui	r5, r6, 3

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000a68:	c324e000 	lbu	r25, r4, r28
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000a6c:	8bb36000 	xor	r29, r19, r12

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
10000a70:	c143e000 	lbu	r10, r3, r28
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000a74:	8bcbe800 	xor	r30, r11, r29
void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
10000a78:	c2e5e000 	lbu	r23, r5, r28
}

void KeyExpansion(const sb_uint8_t key[4*Nk], sb_uint8_t w[4][Nb*(Nr+1)])
10000a7c:	a53600ff 	andi	r9, r22, 255
10000a80:	e1860085 	lbui	r12, r6, 133
10000a84:	e2660001 	lbui	r19, r6, 1
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000a88:	8929f000 	xor	r9, r9, r30

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000a8c:	ab390001 	xori	r25, r25, 1
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000a90:	8b5a5000 	xor	r26, r26, r10
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000a94:	f921000c 	swi	r9, r1, 12
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
}

void KeyExpansion(const sb_uint8_t key[4*Nk], sb_uint8_t w[4][Nb*(Nr+1)])
10000a98:	e1460002 	lbui	r10, r6, 2
10000a9c:	e1260086 	lbui	r9, r6, 134
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000aa0:	8908c800 	xor	r8, r8, r25
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000aa4:	8af8b800 	xor	r23, r24, r23
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000aa8:	a50800ff 	andi	r8, r8, 255
10000aac:	8a734000 	xor	r19, r19, r8
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000ab0:	eb01000c 	lwi	r24, r1, 12
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000ab4:	898cb800 	xor	r12, r12, r23
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
}

void KeyExpansion(const sb_uint8_t key[4*Nk], sb_uint8_t w[4][Nb*(Nr+1)])
10000ab8:	e2c60059 	lbui	r22, r6, 89
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000abc:	894a9800 	xor	r10, r10, r19
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
}

void KeyExpansion(const sb_uint8_t key[4*Nk], sb_uint8_t w[4][Nb*(Nr+1)])
10000ac0:	e166005a 	lbui	r11, r6, 90
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000ac4:	89296000 	xor	r9, r9, r12
10000ac8:	f9210014 	swi	r9, r1, 20
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000acc:	88a55000 	xor	r5, r5, r10
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000ad0:	8ad6d000 	xor	r22, r22, r26
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000ad4:	8884c000 	xor	r4, r4, r24
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000ad8:	f8a10018 	swi	r5, r1, 24
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000adc:	e8a10014 	lwi	r5, r1, 20
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000ae0:	896bb000 	xor	r11, r11, r22

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000ae4:	c324e000 	lbu	r25, r4, r28
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000ae8:	89275800 	xor	r9, r7, r11
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000aec:	f9410008 	swi	r10, r1, 8
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000af0:	88e32800 	xor	r7, r3, r5
void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
10000af4:	e9410018 	lwi	r10, r1, 24
}

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
10000af8:	c0a9e000 	lbu	r5, r9, r28

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000afc:	ab390002 	xori	r25, r25, 2
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000b00:	f1060004 	sbi	r8, r6, 4
10000b04:	8908c800 	xor	r8, r8, r25
void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
10000b08:	c36ae000 	lbu	r27, r10, r28
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000b0c:	88bd2800 	xor	r5, r29, r5
  while(i < Nk)
  {
    w[0][i] = key[4*i];
    w[1][i] = key[4*i+1];
    w[2][i] = key[4*i+2];
    w[3][i] = key[4*i+3];
10000b10:	f0660087 	sbi	r3, r6, 135
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000b14:	f9810004 	swi	r12, r1, 4
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000b18:	f9610010 	swi	r11, r1, 16
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000b1c:	a50800ff 	andi	r8, r8, 255
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000b20:	899e2800 	xor	r12, r30, r5

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
10000b24:	c067e000 	lbu	r3, r7, r28
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000b28:	89734000 	xor	r11, r19, r8
10000b2c:	f901001c 	swi	r8, r1, 28
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000b30:	eb010004 	lwi	r24, r1, 4
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000b34:	e901000c 	lwi	r8, r1, 12
10000b38:	f8a10020 	swi	r5, r1, 32
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000b3c:	e8a10008 	lwi	r5, r1, 8
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000b40:	8b77d800 	xor	r27, r23, r27
10000b44:	8bf8d800 	xor	r31, r24, r27
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000b48:	e9410010 	lwi	r10, r1, 16
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000b4c:	fb610028 	swi	r27, r1, 40
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000b50:	f961002c 	swi	r11, r1, 44
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000b54:	8b686000 	xor	r27, r8, r12
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000b58:	89655800 	xor	r11, r5, r11
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000b5c:	f9810030 	swi	r12, r1, 48
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000b60:	e8a10018 	lwi	r5, r1, 24
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000b64:	e9810014 	lwi	r12, r1, 20
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000b68:	887a1800 	xor	r3, r26, r3
10000b6c:	f8610024 	swi	r3, r1, 36
10000b70:	88761800 	xor	r3, r22, r3
10000b74:	8b0a1800 	xor	r24, r10, r3
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000b78:	f2660005 	sbi	r19, r6, 5
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000b7c:	894cf800 	xor	r10, r12, r31
10000b80:	ea610004 	lwi	r19, r1, 4
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000b84:	89855800 	xor	r12, r5, r11
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000b88:	f2c6005d 	sbi	r22, r6, 93
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000b8c:	e8a1000c 	lwi	r5, r1, 12
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000b90:	eac10008 	lwi	r22, r1, 8
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000b94:	f2660089 	sbi	r19, r6, 137
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000b98:	f0a60032 	sbi	r5, r6, 50
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000b9c:	ea610010 	lwi	r19, r1, 16
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000ba0:	e8a10018 	lwi	r5, r1, 24
10000ba4:	f2c60006 	sbi	r22, r6, 6
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000ba8:	eac10014 	lwi	r22, r1, 20
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000bac:	8909c000 	xor	r8, r9, r24
10000bb0:	f126005f 	sbi	r9, r6, 95
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000bb4:	e921001c 	lwi	r9, r1, 28
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000bb8:	f3a60030 	sbi	r29, r6, 48
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000bbc:	f346005c 	sbi	r26, r6, 92
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000bc0:	f2e60088 	sbi	r23, r6, 136
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000bc4:	f3c60031 	sbi	r30, r6, 49
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000bc8:	f266005e 	sbi	r19, r6, 94
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000bcc:	f2c6008a 	sbi	r22, r6, 138
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000bd0:	f0a60007 	sbi	r5, r6, 7
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000bd4:	f0860033 	sbi	r4, r6, 51
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000bd8:	f0e6008b 	sbi	r7, r6, 139
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000bdc:	f1260008 	sbi	r9, r6, 8
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000be0:	e9210030 	lwi	r9, r1, 48
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000be4:	eac10024 	lwi	r22, r1, 36
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000be8:	ea610020 	lwi	r19, r1, 32
10000bec:	f1260035 	sbi	r9, r6, 53
}

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
10000bf0:	c128e000 	lbu	r9, r8, r28
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000bf4:	f2c60060 	sbi	r22, r6, 96
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000bf8:	8ac75000 	xor	r22, r7, r10
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000bfc:	89334800 	xor	r9, r19, r9

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
10000c00:	c0f6e000 	lbu	r7, r22, r28
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000c04:	f2660034 	sbi	r19, r6, 52
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000c08:	ea610024 	lwi	r19, r1, 36
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000c0c:	8b24d800 	xor	r25, r4, r27
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000c10:	e8810028 	lwi	r4, r1, 40
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000c14:	88f33800 	xor	r7, r19, r7
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000c18:	ea610030 	lwi	r19, r1, 48
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000c1c:	f086008c 	sbi	r4, r6, 140

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000c20:	c099e000 	lbu	r4, r25, r28
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000c24:	8a734800 	xor	r19, r19, r9
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000c28:	e8a1002c 	lwi	r5, r1, 44
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000c2c:	fa610004 	swi	r19, r1, 4
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000c30:	ea61001c 	lwi	r19, r1, 28
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000c34:	f0660061 	sbi	r3, r6, 97
10000c38:	88633800 	xor	r3, r3, r7
10000c3c:	f8610008 	swi	r3, r1, 8

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000c40:	a8840004 	xori	r4, r4, 4
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000c44:	e8610004 	lwi	r3, r1, 4
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000c48:	f0a60009 	sbi	r5, r6, 9
10000c4c:	88932000 	xor	r4, r19, r4
void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
10000c50:	c0ace000 	lbu	r5, r12, r28
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000c54:	ea610028 	lwi	r19, r1, 40
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000c58:	f3660036 	sbi	r27, r6, 54
10000c5c:	8b7b1800 	xor	r27, r27, r3
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000c60:	e8610008 	lwi	r3, r1, 8
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000c64:	88b32800 	xor	r5, r19, r5
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000c68:	ea61002c 	lwi	r19, r1, 44
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000c6c:	f3e6008d 	sbi	r31, r6, 141
10000c70:	8bff2800 	xor	r31, r31, r5
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000c74:	a48400ff 	andi	r4, r4, 255
10000c78:	f166000a 	sbi	r11, r6, 10
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000c7c:	f3060062 	sbi	r24, r6, 98
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000c80:	f146008e 	sbi	r10, r6, 142
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000c84:	8b181800 	xor	r24, r24, r3
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000c88:	f186000b 	sbi	r12, r6, 11
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000c8c:	f3260037 	sbi	r25, r6, 55
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000c90:	f1060063 	sbi	r8, r6, 99
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000c94:	fb610014 	swi	r27, r1, 20
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000c98:	fbe1000c 	swi	r31, r1, 12
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000c9c:	fb010018 	swi	r24, r1, 24
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000ca0:	8b732000 	xor	r27, r19, r4
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000ca4:	ea610014 	lwi	r19, r1, 20
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000ca8:	894af800 	xor	r10, r10, r31
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000cac:	8908c000 	xor	r8, r8, r24
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000cb0:	8b399800 	xor	r25, r25, r19

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000cb4:	c079e000 	lbu	r3, r25, r28
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000cb8:	8b165000 	xor	r24, r22, r10
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000cbc:	f9010020 	swi	r8, r1, 32

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000cc0:	a8630008 	xori	r3, r3, 8
}

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
10000cc4:	c108e000 	lbu	r8, r8, r28
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000cc8:	88641800 	xor	r3, r4, r3

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
10000ccc:	c278e000 	lbu	r19, r24, r28
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000cd0:	fb010024 	swi	r24, r1, 36
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000cd4:	a70300ff 	andi	r24, r3, 255
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000cd8:	e8610004 	lwi	r3, r1, 4
10000cdc:	8be94000 	xor	r31, r9, r8
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000ce0:	896bd800 	xor	r11, r11, r27
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000ce4:	8b43f800 	xor	r26, r3, r31
10000ce8:	e8610014 	lwi	r3, r1, 20
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000cec:	e9010008 	lwi	r8, r1, 8
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000cf0:	898c5800 	xor	r12, r12, r11
10000cf4:	f9610010 	swi	r11, r1, 16
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000cf8:	8bc79800 	xor	r30, r7, r19
void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
10000cfc:	c16ce000 	lbu	r11, r12, r28
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000d00:	8863d000 	xor	r3, r3, r26
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000d04:	8a68f000 	xor	r19, r8, r30
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000d08:	f8610028 	swi	r3, r1, 40
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000d0c:	e9010010 	lwi	r8, r1, 16
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000d10:	f941001c 	swi	r10, r1, 28
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000d14:	e8610018 	lwi	r3, r1, 24
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000d18:	e941000c 	lwi	r10, r1, 12
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000d1c:	8afbc000 	xor	r23, r27, r24
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000d20:	8ba55800 	xor	r29, r5, r11
10000d24:	896ae800 	xor	r11, r10, r29
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000d28:	88639800 	xor	r3, r3, r19
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000d2c:	8948b800 	xor	r10, r8, r23
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000d30:	e9010028 	lwi	r8, r1, 40
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000d34:	f861002c 	swi	r3, r1, 44
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000d38:	f2c6008f 	sbi	r22, r6, 143
10000d3c:	e861000c 	lwi	r3, r1, 12
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000d40:	eac10008 	lwi	r22, r1, 8
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000d44:	f086000c 	sbi	r4, r6, 12
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000d48:	f1260038 	sbi	r9, r6, 56
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000d4c:	e8810010 	lwi	r4, r1, 16
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000d50:	e9210004 	lwi	r9, r1, 4
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000d54:	f0a60090 	sbi	r5, r6, 144
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000d58:	e8a10014 	lwi	r5, r1, 20
10000d5c:	89194000 	xor	r8, r25, r8
10000d60:	f9010030 	swi	r8, r1, 48
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000d64:	f0e60064 	sbi	r7, r6, 100
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000d68:	f366000d 	sbi	r27, r6, 13
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000d6c:	f1260039 	sbi	r9, r6, 57
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000d70:	f2c60065 	sbi	r22, r6, 101
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000d74:	f0660091 	sbi	r3, r6, 145
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000d78:	f086000e 	sbi	r4, r6, 14
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000d7c:	f0a6003a 	sbi	r5, r6, 58
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000d80:	e901001c 	lwi	r8, r1, 28

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000d84:	e8810030 	lwi	r4, r1, 48
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000d88:	e9210020 	lwi	r9, r1, 32
10000d8c:	e861002c 	lwi	r3, r1, 44
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000d90:	f1060092 	sbi	r8, r6, 146
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000d94:	f326003b 	sbi	r25, r6, 59
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000d98:	8b285800 	xor	r25, r8, r11

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000d9c:	c104e000 	lbu	r8, r4, r28
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000da0:	eac10024 	lwi	r22, r1, 36
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000da4:	8b691800 	xor	r27, r9, r3
10000da8:	e8e10018 	lwi	r7, r1, 24

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000dac:	a8680010 	xori	r3, r8, 16
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000db0:	88781800 	xor	r3, r24, r3
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000db4:	88b6c800 	xor	r5, r22, r25
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000db8:	a46300ff 	andi	r3, r3, 255
10000dbc:	f186000f 	sbi	r12, r6, 15
10000dc0:	898c5000 	xor	r12, r12, r10
void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
10000dc4:	c08ce000 	lbu	r4, r12, r28
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000dc8:	f0e60066 	sbi	r7, r6, 102
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000dcc:	f2e60011 	sbi	r23, r6, 17
}

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
10000dd0:	c0fbe000 	lbu	r7, r27, r28
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000dd4:	8af71800 	xor	r23, r23, r3
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000dd8:	f8a10004 	swi	r5, r1, 4

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
10000ddc:	c0a5e000 	lbu	r5, r5, r28
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000de0:	f1460012 	sbi	r10, r6, 18
10000de4:	894ab800 	xor	r10, r10, r23
10000de8:	f9410008 	swi	r10, r1, 8
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000dec:	f1260067 	sbi	r9, r6, 103
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000df0:	e9010028 	lwi	r8, r1, 40
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000df4:	e921002c 	lwi	r9, r1, 44
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000df8:	88ff3800 	xor	r7, r31, r7
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000dfc:	88be2800 	xor	r5, r30, r5
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000e00:	f3060010 	sbi	r24, r6, 16
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000e04:	f3a60094 	sbi	r29, r6, 148
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000e08:	eb010008 	lwi	r24, r1, 8
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000e0c:	8bbd2000 	xor	r29, r29, r4
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000e10:	f346003d 	sbi	r26, r6, 61
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000e14:	f2660069 	sbi	r19, r6, 105
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000e18:	8b5a3800 	xor	r26, r26, r7
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000e1c:	8a732800 	xor	r19, r19, r5
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000e20:	f1660095 	sbi	r11, r6, 149
10000e24:	896be800 	xor	r11, r11, r29
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000e28:	89299800 	xor	r9, r9, r19
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000e2c:	e9410030 	lwi	r10, r1, 48
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000e30:	f2c60093 	sbi	r22, r6, 147
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000e34:	8908d000 	xor	r8, r8, r26
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000e38:	8ad95800 	xor	r22, r25, r11
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000e3c:	8b0cc000 	xor	r24, r12, r24
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000e40:	f3e6003c 	sbi	r31, r6, 60
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000e44:	f3c60068 	sbi	r30, r6, 104
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000e48:	f901000c 	swi	r8, r1, 12
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000e4c:	f9210010 	swi	r9, r1, 16
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000e50:	fac10014 	swi	r22, r1, 20
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000e54:	fb010018 	swi	r24, r1, 24
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000e58:	8bfb4800 	xor	r31, r27, r9
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000e5c:	e9210004 	lwi	r9, r1, 4
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000e60:	890a4000 	xor	r8, r10, r8

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000e64:	c088e000 	lbu	r4, r8, r28
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000e68:	8bc9b000 	xor	r30, r9, r22
}

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
10000e6c:	c15fe000 	lbu	r10, r31, r28
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
10000e70:	c138e000 	lbu	r9, r24, r28

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
10000e74:	c2dee000 	lbu	r22, r30, r28

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000e78:	a8840020 	xori	r4, r4, 32
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000e7c:	89475000 	xor	r10, r7, r10
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000e80:	893d4800 	xor	r9, r29, r9
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000e84:	88832000 	xor	r4, r3, r4
10000e88:	a70400ff 	andi	r24, r4, 255
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000e8c:	8ac5b000 	xor	r22, r5, r22
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000e90:	889a5000 	xor	r4, r26, r10
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000e94:	f921001c 	swi	r9, r1, 28
10000e98:	892b4800 	xor	r9, r11, r9
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000e9c:	f8810024 	swi	r4, r1, 36
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000ea0:	f9210038 	swi	r9, r1, 56
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000ea4:	8897c000 	xor	r4, r23, r24
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000ea8:	8933b000 	xor	r9, r19, r22
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000eac:	f8810020 	swi	r4, r1, 32
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000eb0:	f9210034 	swi	r9, r1, 52
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000eb4:	e881000c 	lwi	r4, r1, 12
10000eb8:	e9210024 	lwi	r9, r1, 36
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000ebc:	f1860013 	sbi	r12, r6, 19
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000ec0:	e9810030 	lwi	r12, r1, 48
10000ec4:	88844800 	xor	r4, r4, r9
10000ec8:	f8810040 	swi	r4, r1, 64
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000ecc:	e9210038 	lwi	r9, r1, 56
10000ed0:	e8810014 	lwi	r4, r1, 20
10000ed4:	f3260096 	sbi	r25, r6, 150
10000ed8:	88844800 	xor	r4, r4, r9
10000edc:	f8810048 	swi	r4, r1, 72
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000ee0:	e9210020 	lwi	r9, r1, 32
10000ee4:	e8810008 	lwi	r4, r1, 8
10000ee8:	88844800 	xor	r4, r4, r9
10000eec:	f881003c 	swi	r4, r1, 60
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000ef0:	e9210034 	lwi	r9, r1, 52
10000ef4:	e8810010 	lwi	r4, r1, 16
10000ef8:	88844800 	xor	r4, r4, r9
10000efc:	f8810044 	swi	r4, r1, 68
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000f00:	e9210048 	lwi	r9, r1, 72
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000f04:	e8810040 	lwi	r4, r1, 64
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000f08:	893e4800 	xor	r9, r30, r9
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000f0c:	88882000 	xor	r4, r8, r4
10000f10:	f881004c 	swi	r4, r1, 76
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000f14:	f9210050 	swi	r9, r1, 80
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000f18:	e8810028 	lwi	r4, r1, 40
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000f1c:	e921002c 	lwi	r9, r1, 44
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000f20:	f086003e 	sbi	r4, r6, 62
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000f24:	f126006a 	sbi	r9, r6, 106
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000f28:	f186003f 	sbi	r12, r6, 63
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000f2c:	e8810004 	lwi	r4, r1, 4
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000f30:	f0e60040 	sbi	r7, r6, 64
10000f34:	e8e1000c 	lwi	r7, r1, 12
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000f38:	f0860097 	sbi	r4, r6, 151

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
10000f3c:	e8810050 	lwi	r4, r1, 80
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000f40:	f0a6006c 	sbi	r5, r6, 108
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000f44:	e8a10008 	lwi	r5, r1, 8
10000f48:	e9810018 	lwi	r12, r1, 24
10000f4c:	f0660014 	sbi	r3, r6, 20
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000f50:	f266006d 	sbi	r19, r6, 109
10000f54:	e8610044 	lwi	r3, r1, 68
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000f58:	ea61003c 	lwi	r19, r1, 60
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000f5c:	f0e60042 	sbi	r7, r6, 66

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
10000f60:	c0e4e000 	lbu	r7, r4, r28
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000f64:	e9210010 	lwi	r9, r1, 16
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000f68:	f1660099 	sbi	r11, r6, 153
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000f6c:	f0a60016 	sbi	r5, r6, 22
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000f70:	e9610014 	lwi	r11, r1, 20

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000f74:	e8a1004c 	lwi	r5, r1, 76
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000f78:	f1060043 	sbi	r8, r6, 67
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000f7c:	e9010034 	lwi	r8, r1, 52
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000f80:	f3a60098 	sbi	r29, r6, 152
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000f84:	f3460041 	sbi	r26, r6, 65
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000f88:	8bbf1800 	xor	r29, r31, r3
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000f8c:	8b4c9800 	xor	r26, r12, r19
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000f90:	f2c60070 	sbi	r22, r6, 112
10000f94:	8ad63800 	xor	r22, r22, r7
void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
10000f98:	c09ae000 	lbu	r4, r26, r28

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000f9c:	c065e000 	lbu	r3, r5, r28
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000fa0:	e8e1001c 	lwi	r7, r1, 28
}

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
10000fa4:	c0bde000 	lbu	r5, r29, r28
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000fa8:	8908b000 	xor	r8, r8, r22
10000fac:	f366006b 	sbi	r27, r6, 107
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000fb0:	f2e60015 	sbi	r23, r6, 21
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000fb4:	f126006e 	sbi	r9, r6, 110
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000fb8:	f166009a 	sbi	r11, r6, 154
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000fbc:	f1860017 	sbi	r12, r6, 23
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000fc0:	f3e6006f 	sbi	r31, r6, 111
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000fc4:	f3c6009b 	sbi	r30, r6, 155
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000fc8:	f3060018 	sbi	r24, r6, 24
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000fcc:	f1460044 	sbi	r10, r6, 68
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000fd0:	f9010004 	swi	r8, r1, 4
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000fd4:	e9610024 	lwi	r11, r1, 36
    w[2][i] = w[2][i-Nk] ^ temp[2];
10000fd8:	ea610044 	lwi	r19, r1, 68
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000fdc:	8bc72000 	xor	r30, r7, r4
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000fe0:	894a2800 	xor	r10, r10, r5
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000fe4:	e8810020 	lwi	r4, r1, 32

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10000fe8:	a8630040 	xori	r3, r3, 64
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10000fec:	892b5000 	xor	r9, r11, r10
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10000ff0:	e9810038 	lwi	r12, r1, 56
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10000ff4:	e961003c 	lwi	r11, r1, 60
10000ff8:	88781800 	xor	r3, r24, r3
10000ffc:	a46300ff 	andi	r3, r3, 255
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001000:	8a734000 	xor	r19, r19, r8
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001004:	e9010048 	lwi	r8, r1, 72
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10001008:	8b041800 	xor	r24, r4, r3
1000100c:	888bc000 	xor	r4, r11, r24
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001010:	898cf000 	xor	r12, r12, r30
10001014:	88e86000 	xor	r7, r8, r12
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10001018:	8b3a2000 	xor	r25, r26, r4
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
1000101c:	e9010050 	lwi	r8, r1, 80
void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
10001020:	c179e000 	lbu	r11, r25, r28
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001024:	e8a10040 	lwi	r5, r1, 64
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001028:	8b683800 	xor	r27, r8, r7
1000102c:	f9810008 	swi	r12, r1, 8

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
10001030:	c11be000 	lbu	r8, r27, r28
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001034:	e981004c 	lwi	r12, r1, 76
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001038:	897e5800 	xor	r11, r30, r11
1000103c:	f9610018 	swi	r11, r1, 24
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001040:	e9610004 	lwi	r11, r1, 4
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001044:	8be54800 	xor	r31, r5, r9
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001048:	88bd9800 	xor	r5, r29, r19
1000104c:	fa61000c 	swi	r19, r1, 12
10001050:	89164000 	xor	r8, r22, r8
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001054:	8a6cf800 	xor	r19, r12, r31
}

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
10001058:	c185e000 	lbu	r12, r5, r28
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
1000105c:	f9010014 	swi	r8, r1, 20
10001060:	890b4000 	xor	r8, r11, r8
10001064:	f901002c 	swi	r8, r1, 44
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001068:	e9610018 	lwi	r11, r1, 24
1000106c:	e9010008 	lwi	r8, r1, 8
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001070:	898a6000 	xor	r12, r10, r12
10001074:	f9810010 	swi	r12, r1, 16
10001078:	89896000 	xor	r12, r9, r12
1000107c:	f9810028 	swi	r12, r1, 40
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001080:	89085800 	xor	r8, r8, r11
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001084:	899f6000 	xor	r12, r31, r12
10001088:	f9810054 	swi	r12, r1, 84
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
1000108c:	f9010030 	swi	r8, r1, 48
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001090:	e981000c 	lwi	r12, r1, 12
10001094:	e901002c 	lwi	r8, r1, 44
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001098:	e9610054 	lwi	r11, r1, 84

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
1000109c:	c2f3e000 	lbu	r23, r19, r28
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
100010a0:	898c4000 	xor	r12, r12, r8
100010a4:	f9810058 	swi	r12, r1, 88
    w[3][i] = w[3][i-Nk] ^ temp[3];
100010a8:	e981001c 	lwi	r12, r1, 28
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
100010ac:	e9010020 	lwi	r8, r1, 32
    w[1][i] = w[1][i-Nk] ^ temp[1];
100010b0:	89735800 	xor	r11, r19, r11
100010b4:	f961005c 	swi	r11, r1, 92
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
100010b8:	f186009c 	sbi	r12, r6, 156
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
100010bc:	f1060019 	sbi	r8, r6, 25
    w[1][i] = w[1][i-Nk] ^ temp[1];
100010c0:	e9610024 	lwi	r11, r1, 36
    w[2][i] = w[2][i-Nk] ^ temp[2];
100010c4:	e9810034 	lwi	r12, r1, 52
    w[3][i] = w[3][i-Nk] ^ temp[3];
100010c8:	e9010038 	lwi	r8, r1, 56
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
100010cc:	f1660045 	sbi	r11, r6, 69
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
100010d0:	e961003c 	lwi	r11, r1, 60
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
100010d4:	f1860071 	sbi	r12, r6, 113
    w[3][i] = w[3][i-Nk] ^ temp[3];
100010d8:	f106009d 	sbi	r8, r6, 157
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
100010dc:	e9810040 	lwi	r12, r1, 64
    w[2][i] = w[2][i-Nk] ^ temp[2];
100010e0:	e9010044 	lwi	r8, r1, 68
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
100010e4:	f166001a 	sbi	r11, r6, 26
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
100010e8:	e9610048 	lwi	r11, r1, 72
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
100010ec:	f1860046 	sbi	r12, r6, 70
    w[2][i] = w[2][i-Nk] ^ temp[2];
100010f0:	f1060072 	sbi	r8, r6, 114
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
100010f4:	e981004c 	lwi	r12, r1, 76
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
100010f8:	e9010050 	lwi	r8, r1, 80
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
100010fc:	f1460048 	sbi	r10, r6, 72
10001100:	f1260049 	sbi	r9, r6, 73
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001104:	e9410008 	lwi	r10, r1, 8
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001108:	e9210004 	lwi	r9, r1, 4
    w[3][i] = w[3][i-Nk] ^ temp[3];
1000110c:	f166009e 	sbi	r11, r6, 158
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001110:	e961000c 	lwi	r11, r1, 12
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10001114:	f346001b 	sbi	r26, r6, 27
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001118:	f1860047 	sbi	r12, r6, 71
    w[2][i] = w[2][i-Nk] ^ temp[2];
1000111c:	f3a60073 	sbi	r29, r6, 115
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001120:	f106009f 	sbi	r8, r6, 159
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10001124:	f066001c 	sbi	r3, r6, 28
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001128:	f2c60074 	sbi	r22, r6, 116
    w[3][i] = w[3][i-Nk] ^ temp[3];
1000112c:	f3c600a0 	sbi	r30, r6, 160
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10001130:	f306001d 	sbi	r24, r6, 29
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001134:	f1260075 	sbi	r9, r6, 117
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001138:	f14600a1 	sbi	r10, r6, 161
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
1000113c:	f086001e 	sbi	r4, r6, 30
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001140:	f3e6004a 	sbi	r31, r6, 74
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001144:	f1660076 	sbi	r11, r6, 118
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001148:	e9810030 	lwi	r12, r1, 48
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
1000114c:	f266004b 	sbi	r19, r6, 75
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001150:	ea610058 	lwi	r19, r1, 88

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10001154:	eac1005c 	lwi	r22, r1, 92
10001158:	aaf7ff80 	xori	r23, r23, -128
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
1000115c:	89276000 	xor	r9, r7, r12
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10001160:	8ae3b800 	xor	r23, r3, r23
10001164:	a6f700ff 	andi	r23, r23, 255
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001168:	f0a60077 	sbi	r5, r6, 119
    w[3][i] = w[3][i-Nk] ^ temp[3];
1000116c:	f36600a3 	sbi	r27, r6, 163
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001170:	88a59800 	xor	r5, r5, r19
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001174:	8b7b4800 	xor	r27, r27, r9
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10001178:	8b18b800 	xor	r24, r24, r23
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
1000117c:	f8a1000c 	swi	r5, r1, 12

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
10001180:	c076e000 	lbu	r3, r22, r28

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
10001184:	c27be000 	lbu	r19, r27, r28
}

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
10001188:	c2c5e000 	lbu	r22, r5, r28
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
1000118c:	f0e600a2 	sbi	r7, r6, 162
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001190:	e8a10010 	lwi	r5, r1, 16
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001194:	e8e10014 	lwi	r7, r1, 20
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10001198:	8884c000 	xor	r4, r4, r24
    w[1][i] = w[1][i-Nk] ^ temp[1];
1000119c:	e9010028 	lwi	r8, r1, 40
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
100011a0:	f326001f 	sbi	r25, r6, 31
100011a4:	8b392000 	xor	r25, r25, r4
void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
100011a8:	c199e000 	lbu	r12, r25, r28
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
100011ac:	8ad62800 	xor	r22, r22, r5
    w[2][i] = w[2][i-Nk] ^ temp[2];
100011b0:	8a733800 	xor	r19, r19, r7
    w[3][i] = w[3][i-Nk] ^ temp[3];
100011b4:	e8e10018 	lwi	r7, r1, 24
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
100011b8:	8b564000 	xor	r26, r22, r8
100011bc:	fac10004 	swi	r22, r1, 4

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
100011c0:	a863001b 	xori	r3, r3, 27
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
100011c4:	eac1002c 	lwi	r22, r1, 44
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
100011c8:	f2e60020 	sbi	r23, r6, 32
100011cc:	8af71800 	xor	r23, r23, r3
    w[1][i] = w[1][i-Nk] ^ temp[1];
100011d0:	e8610054 	lwi	r3, r1, 84
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
100011d4:	8bec3800 	xor	r31, r12, r7
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
100011d8:	e981005c 	lwi	r12, r1, 92
    w[2][i] = w[2][i-Nk] ^ temp[2];
100011dc:	8953b000 	xor	r10, r19, r22
100011e0:	e9010058 	lwi	r8, r1, 88
100011e4:	fa610008 	swi	r19, r1, 8
    w[3][i] = w[3][i-Nk] ^ temp[3];
100011e8:	ea610030 	lwi	r19, r1, 48
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
100011ec:	88ba1800 	xor	r5, r26, r3
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
100011f0:	fb61001c 	swi	r27, r1, 28
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
100011f4:	e861000c 	lwi	r3, r1, 12
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
100011f8:	a77700ff 	andi	r27, r23, 255
    w[1][i] = w[1][i-Nk] ^ temp[1];
100011fc:	8ae56000 	xor	r23, r5, r12
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001200:	e981001c 	lwi	r12, r1, 28
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001204:	8bca4000 	xor	r30, r10, r8
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001208:	891f9800 	xor	r8, r31, r19
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
1000120c:	8a7e1800 	xor	r19, r30, r3
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001210:	88684800 	xor	r3, r8, r9
10001214:	8ba36000 	xor	r29, r3, r12
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001218:	e9810010 	lwi	r12, r1, 16
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
1000121c:	897bc000 	xor	r11, r27, r24
10001220:	88eb2000 	xor	r7, r11, r4
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001224:	f186004c 	sbi	r12, r6, 76
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001228:	e9810014 	lwi	r12, r1, 20
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
1000122c:	8ac7c800 	xor	r22, r7, r25
  w[3] = buf;
}

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
10001230:	fae10034 	swi	r23, r1, 52
  w[1] = Sbox[w[1]];
10001234:	fa610020 	swi	r19, r1, 32
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
10001238:	fac10024 	swi	r22, r1, 36
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
1000123c:	f1860078 	sbi	r12, r6, 120
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001240:	e9810018 	lwi	r12, r1, 24
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10001244:	f3060021 	sbi	r24, r6, 33
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001248:	eb010028 	lwi	r24, r1, 40
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
1000124c:	f18600a4 	sbi	r12, r6, 164
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001250:	e981002c 	lwi	r12, r1, 44
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001254:	f306004d 	sbi	r24, r6, 77
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001258:	eb010030 	lwi	r24, r1, 48
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
1000125c:	f1860079 	sbi	r12, r6, 121
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10001260:	f0860022 	sbi	r4, r6, 34
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001264:	e9810058 	lwi	r12, r1, 88
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001268:	e8810054 	lwi	r4, r1, 84
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
1000126c:	f30600a5 	sbi	r24, r6, 165
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001270:	eb01005c 	lwi	r24, r1, 92
10001274:	f086004e 	sbi	r4, r6, 78
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001278:	f186007a 	sbi	r12, r6, 122
1000127c:	e881000c 	lwi	r4, r1, 12
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001280:	e9810004 	lwi	r12, r1, 4
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001284:	f12600a6 	sbi	r9, r6, 166
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001288:	f306004f 	sbi	r24, r6, 79
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
1000128c:	e921001c 	lwi	r9, r1, 28
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001290:	eb010008 	lwi	r24, r1, 8
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10001294:	f3260023 	sbi	r25, r6, 35
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001298:	f086007b 	sbi	r4, r6, 123
    w[3][i] = w[3][i-Nk] ^ temp[3];
1000129c:	f12600a7 	sbi	r9, r6, 167
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
100012a0:	f3660024 	sbi	r27, r6, 36
    w[1][i] = w[1][i-Nk] ^ temp[1];
100012a4:	f1860050 	sbi	r12, r6, 80
    w[2][i] = w[2][i-Nk] ^ temp[2];
100012a8:	f306007c 	sbi	r24, r6, 124
    w[3][i] = w[3][i-Nk] ^ temp[3];
100012ac:	f3e600a8 	sbi	r31, r6, 168
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
100012b0:	f1660025 	sbi	r11, r6, 37
    w[1][i] = w[1][i-Nk] ^ temp[1];
100012b4:	f3460051 	sbi	r26, r6, 81
    w[2][i] = w[2][i-Nk] ^ temp[2];
100012b8:	f146007d 	sbi	r10, r6, 125
    w[3][i] = w[3][i-Nk] ^ temp[3];
100012bc:	f10600a9 	sbi	r8, r6, 169
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
100012c0:	f0e60026 	sbi	r7, r6, 38
    w[1][i] = w[1][i-Nk] ^ temp[1];
100012c4:	f0a60052 	sbi	r5, r6, 82
100012c8:	f2e60053 	sbi	r23, r6, 83

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
100012cc:	c2f7e000 	lbu	r23, r23, r28
}

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
100012d0:	e9210020 	lwi	r9, r1, 32
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
100012d4:	eb010024 	lwi	r24, r1, 36

    if(i % Nk == 0)
    {
      RotWord(temp);
      SubWord(temp);
      temp[0] ^= Rcon[i/Nk];
100012d8:	aaf70036 	xori	r23, r23, 54
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
100012dc:	8afbb800 	xor	r23, r27, r23
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
100012e0:	e8810008 	lwi	r4, r1, 8
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
100012e4:	f2c60027 	sbi	r22, r6, 39
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
100012e8:	f266007f 	sbi	r19, r6, 127
}

void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
100012ec:	c2c9e000 	lbu	r22, r9, r28
  w[2] = Sbox[w[2]];
100012f0:	c27de000 	lbu	r19, r29, r28
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
100012f4:	e9210004 	lwi	r9, r1, 4
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
100012f8:	896bb800 	xor	r11, r11, r23
100012fc:	88e75800 	xor	r7, r7, r11
void SubWord(sb_uint8_t w[4])
{
  w[0] = Sbox[w[0]];
  w[1] = Sbox[w[1]];
  w[2] = Sbox[w[2]];
  w[3] = Sbox[w[3]];
10001300:	c198e000 	lbu	r12, r24, r28
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001304:	8a732000 	xor	r19, r19, r4
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001308:	8ad64800 	xor	r22, r22, r9
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
1000130c:	8b67c000 	xor	r27, r7, r24
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001310:	eb010034 	lwi	r24, r1, 52
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001314:	89335000 	xor	r9, r19, r10
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001318:	8956d000 	xor	r10, r22, r26
1000131c:	88aa2800 	xor	r5, r10, r5
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001320:	898cf800 	xor	r12, r12, r31
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001324:	8b45c000 	xor	r26, r5, r24
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001328:	eb010020 	lwi	r24, r1, 32
    w[3][i] = w[3][i-Nk] ^ temp[3];
1000132c:	890c4000 	xor	r8, r12, r8
  i = Nk;
  while(i < Nb * (Nr+1))
  {
    temp[0] = w[0][i-1];
    temp[1] = w[1][i-1];
    temp[2] = w[2][i-1];
10001330:	a48900ff 	andi	r4, r9, 255
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001334:	8884f000 	xor	r4, r4, r30
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001338:	f06600aa 	sbi	r3, r6, 170
1000133c:	88681800 	xor	r3, r8, r3
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001340:	8b24c000 	xor	r25, r4, r24
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001344:	8b03e800 	xor	r24, r3, r29
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001348:	f3c6007e 	sbi	r30, r6, 126
    w[3][i] = w[3][i-Nk] ^ temp[3];
1000134c:	f3a600ab 	sbi	r29, r6, 171
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
10001350:	f2e60028 	sbi	r23, r6, 40
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001354:	f2c60054 	sbi	r22, r6, 84
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001358:	f2660080 	sbi	r19, r6, 128
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
1000135c:	f366002b 	sbi	r27, r6, 43
    w[1][i] = w[1][i-Nk] ^ temp[1];
10001360:	f3460057 	sbi	r26, r6, 87
    w[2][i] = w[2][i-Nk] ^ temp[2];
10001364:	f3260083 	sbi	r25, r6, 131
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001368:	f30600af 	sbi	r24, r6, 175
	 	
    i++;
  }
}
1000136c:	ea610060 	lwi	r19, r1, 96
10001370:	eac10064 	lwi	r22, r1, 100
10001374:	eae10068 	lwi	r23, r1, 104
10001378:	eb01006c 	lwi	r24, r1, 108
1000137c:	eb210070 	lwi	r25, r1, 112
10001380:	eb410074 	lwi	r26, r1, 116
10001384:	eb610078 	lwi	r27, r1, 120
10001388:	eb81007c 	lwi	r28, r1, 124
1000138c:	eba10080 	lwi	r29, r1, 128
10001390:	ebc10084 	lwi	r30, r1, 132
10001394:	ebe10088 	lwi	r31, r1, 136
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
    w[1][i] = w[1][i-Nk] ^ temp[1];
    w[2][i] = w[2][i-Nk] ^ temp[2];
    w[3][i] = w[3][i-Nk] ^ temp[3];
10001398:	f18600ac 	sbi	r12, r6, 172
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
1000139c:	f1660029 	sbi	r11, r6, 41
    w[1][i] = w[1][i-Nk] ^ temp[1];
100013a0:	f1460055 	sbi	r10, r6, 85
    w[2][i] = w[2][i-Nk] ^ temp[2];
100013a4:	f1260081 	sbi	r9, r6, 129
    w[3][i] = w[3][i-Nk] ^ temp[3];
100013a8:	f10600ad 	sbi	r8, r6, 173
    else if(Nk > 6 && (i % Nk == 4))
    {
      SubWord(temp);
    }

    w[0][i] = w[0][i-Nk] ^ temp[0];
100013ac:	f0e6002a 	sbi	r7, r6, 42
    w[1][i] = w[1][i-Nk] ^ temp[1];
100013b0:	f0a60056 	sbi	r5, r6, 86
    w[2][i] = w[2][i-Nk] ^ temp[2];
100013b4:	f0860082 	sbi	r4, r6, 130
    w[3][i] = w[3][i-Nk] ^ temp[3];
100013b8:	f06600ae 	sbi	r3, r6, 174
	 	
    i++;
  }
}
100013bc:	b60f0008 	rtsd	r15, 8
100013c0:	3021008c 	addik	r1, r1, 140

100013c4 <SubBytes>:
    }	
  }
}

void SubBytes(sb_uint8_t state[4][Nb])
{
100013c4:	3021ffec 	addik	r1, r1, -20

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = Sbox[state[j][i]];
100013c8:	b0001000 	imm	4096
100013cc:	30603d54 	addik	r3, r0, 15700	// 10003d54 <Sbox>
100013d0:	e1850001 	lbui	r12, r5, 1
100013d4:	e1650005 	lbui	r11, r5, 5
100013d8:	e1450009 	lbui	r10, r5, 9
100013dc:	e125000d 	lbui	r9, r5, 13
    }	
  }
}

void SubBytes(sb_uint8_t state[4][Nb])
{
100013e0:	fa610004 	swi	r19, r1, 4
100013e4:	fac10008 	swi	r22, r1, 8

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = Sbox[state[j][i]];
100013e8:	e265000c 	lbui	r19, r5, 12
100013ec:	e2c50008 	lbui	r22, r5, 8
    }	
  }
}

void SubBytes(sb_uint8_t state[4][Nb])
{
100013f0:	fae1000c 	swi	r23, r1, 12
100013f4:	fb010010 	swi	r24, r1, 16

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = Sbox[state[j][i]];
100013f8:	e2e50004 	lbui	r23, r5, 4
100013fc:	e3050000 	lbui	r24, r5, 0
10001400:	e1050002 	lbui	r8, r5, 2
10001404:	c2f71800 	lbu	r23, r23, r3
10001408:	c3181800 	lbu	r24, r24, r3
1000140c:	c2d61800 	lbu	r22, r22, r3
10001410:	c2731800 	lbu	r19, r19, r3
10001414:	c18c1800 	lbu	r12, r12, r3
10001418:	c16b1800 	lbu	r11, r11, r3
1000141c:	c14a1800 	lbu	r10, r10, r3
10001420:	c1291800 	lbu	r9, r9, r3
10001424:	e0e50006 	lbui	r7, r5, 6
10001428:	e0c5000a 	lbui	r6, r5, 10
1000142c:	e085000e 	lbui	r4, r5, 14
10001430:	c1081800 	lbu	r8, r8, r3
10001434:	f3050000 	sbi	r24, r5, 0
10001438:	f2e50004 	sbi	r23, r5, 4
1000143c:	f2c50008 	sbi	r22, r5, 8
10001440:	f265000c 	sbi	r19, r5, 12
10001444:	f1850001 	sbi	r12, r5, 1
10001448:	f1650005 	sbi	r11, r5, 5
1000144c:	f1450009 	sbi	r10, r5, 9
10001450:	f125000d 	sbi	r9, r5, 13
10001454:	f1050002 	sbi	r8, r5, 2
10001458:	c0e71800 	lbu	r7, r7, r3
1000145c:	c0c61800 	lbu	r6, r6, r3
10001460:	c0841800 	lbu	r4, r4, r3
10001464:	e1050003 	lbui	r8, r5, 3
10001468:	f0e50006 	sbi	r7, r5, 6
1000146c:	f0c5000a 	sbi	r6, r5, 10
10001470:	e0e50007 	lbui	r7, r5, 7
10001474:	e0c5000b 	lbui	r6, r5, 11
10001478:	f085000e 	sbi	r4, r5, 14
1000147c:	e085000f 	lbui	r4, r5, 15
10001480:	c1081800 	lbu	r8, r8, r3
10001484:	c0e71800 	lbu	r7, r7, r3
10001488:	c0c61800 	lbu	r6, r6, r3
1000148c:	c0841800 	lbu	r4, r4, r3
    }	
  }
}
10001490:	ea610004 	lwi	r19, r1, 4
10001494:	eac10008 	lwi	r22, r1, 8
10001498:	eae1000c 	lwi	r23, r1, 12
1000149c:	eb010010 	lwi	r24, r1, 16

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = Sbox[state[j][i]];
100014a0:	f1050003 	sbi	r8, r5, 3
100014a4:	f0e50007 	sbi	r7, r5, 7
100014a8:	f0c5000b 	sbi	r6, r5, 11
100014ac:	f085000f 	sbi	r4, r5, 15
    }	
  }
}
100014b0:	b60f0008 	rtsd	r15, 8
100014b4:	30210014 	addik	r1, r1, 20

100014b8 <AddRoundKey>:

void AddRoundKey(sb_uint8_t state[4][Nb], sb_uint8_t w[4][Nb*(Nr+1)], const sb_int32_t round)
{
100014b8:	64e70402 	bslli	r7, r7, 2
100014bc:	3021fff8 	addik	r1, r1, -8
100014c0:	fa610004 	swi	r19, r1, 4

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
100014c4:	c1273000 	lbu	r9, r7, r6
100014c8:	e1050000 	lbui	r8, r5, 0
100014cc:	10663800 	addk	r3, r6, r7
100014d0:	e0850004 	lbui	r4, r5, 4
100014d4:	89094000 	xor	r8, r9, r8
100014d8:	f1050000 	sbi	r8, r5, 0
100014dc:	e143002c 	lbui	r10, r3, 44
100014e0:	e1250008 	lbui	r9, r5, 8
100014e4:	e105000c 	lbui	r8, r5, 12
100014e8:	888a2000 	xor	r4, r10, r4
100014ec:	f0850004 	sbi	r4, r5, 4
100014f0:	e1430058 	lbui	r10, r3, 88
100014f4:	30870001 	addik	r4, r7, 1
100014f8:	e2650001 	lbui	r19, r5, 1
100014fc:	894a4800 	xor	r10, r10, r9
10001500:	f1450008 	sbi	r10, r5, 8
10001504:	e1230084 	lbui	r9, r3, 132
10001508:	10662000 	addk	r3, r6, r4
1000150c:	e1850005 	lbui	r12, r5, 5
10001510:	89294000 	xor	r9, r9, r8
10001514:	f125000c 	sbi	r9, r5, 12
10001518:	c1043000 	lbu	r8, r4, r6
1000151c:	e1650009 	lbui	r11, r5, 9
10001520:	e145000d 	lbui	r10, r5, 13
10001524:	89089800 	xor	r8, r8, r19
10001528:	f1050001 	sbi	r8, r5, 1
1000152c:	e083002c 	lbui	r4, r3, 44
10001530:	31070002 	addik	r8, r7, 2
10001534:	e2650002 	lbui	r19, r5, 2
10001538:	88846000 	xor	r4, r4, r12
1000153c:	f0850005 	sbi	r4, r5, 5
10001540:	e1830058 	lbui	r12, r3, 88
10001544:	10864000 	addk	r4, r6, r8
10001548:	e1250006 	lbui	r9, r5, 6
1000154c:	896c5800 	xor	r11, r12, r11
10001550:	f1650009 	sbi	r11, r5, 9
10001554:	e0630084 	lbui	r3, r3, 132
10001558:	e185000a 	lbui	r12, r5, 10
1000155c:	e165000e 	lbui	r11, r5, 14
10001560:	88635000 	xor	r3, r3, r10
10001564:	f065000d 	sbi	r3, r5, 13
10001568:	c1483000 	lbu	r10, r8, r6
1000156c:	30e70003 	addik	r7, r7, 3
10001570:	10663800 	addk	r3, r6, r7
10001574:	894a9800 	xor	r10, r10, r19
10001578:	f1450002 	sbi	r10, r5, 2
1000157c:	e104002c 	lbui	r8, r4, 44
10001580:	89284800 	xor	r9, r8, r9
10001584:	f1250006 	sbi	r9, r5, 6
10001588:	e1040058 	lbui	r8, r4, 88
1000158c:	89086000 	xor	r8, r8, r12
10001590:	f105000a 	sbi	r8, r5, 10
10001594:	e0840084 	lbui	r4, r4, 132
10001598:	e1050003 	lbui	r8, r5, 3
    }	
  }	
}
1000159c:	ea610004 	lwi	r19, r1, 4

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
100015a0:	88845800 	xor	r4, r4, r11
100015a4:	f085000e 	sbi	r4, r5, 14
100015a8:	c0e73000 	lbu	r7, r7, r6
100015ac:	e0c50007 	lbui	r6, r5, 7
100015b0:	e085000b 	lbui	r4, r5, 11
100015b4:	88e74000 	xor	r7, r7, r8
100015b8:	f0e50003 	sbi	r7, r5, 3
100015bc:	e103002c 	lbui	r8, r3, 44
100015c0:	e0e5000f 	lbui	r7, r5, 15
100015c4:	88c83000 	xor	r6, r8, r6
100015c8:	f0c50007 	sbi	r6, r5, 7
100015cc:	e0c30058 	lbui	r6, r3, 88
100015d0:	88862000 	xor	r4, r6, r4
100015d4:	f085000b 	sbi	r4, r5, 11
100015d8:	e0630084 	lbui	r3, r3, 132
100015dc:	88633800 	xor	r3, r3, r7
100015e0:	f065000f 	sbi	r3, r5, 15
    }	
  }	
}
100015e4:	b60f0008 	rtsd	r15, 8
100015e8:	30210008 	addik	r1, r1, 8

100015ec <ShiftRows>:
{
  sb_uint8_t buf;

  /* << 1 */
  buf         = state[1][0];
  state[1][0] = state[1][1];
100015ec:	e1050005 	lbui	r8, r5, 5
void ShiftRows(sb_uint8_t state[4][Nb])
{
  sb_uint8_t buf;

  /* << 1 */
  buf         = state[1][0];
100015f0:	e0e50004 	lbui	r7, r5, 4
  state[1][1] = state[1][2];
  state[1][2] = state[1][3];
  state[1][3] = buf;

  /* << 2 */
  buf         = state[2][0];
100015f4:	e0c50008 	lbui	r6, r5, 8
{
  sb_uint8_t buf;

  /* << 1 */
  buf         = state[1][0];
  state[1][0] = state[1][1];
100015f8:	f1050004 	sbi	r8, r5, 4
  state[1][2] = state[1][3];
  state[1][3] = buf;

  /* << 2 */
  buf         = state[2][0];
  state[2][0] = state[2][2];
100015fc:	e105000a 	lbui	r8, r5, 10
  state[2][2] = buf;
  buf         = state[2][1];
10001600:	e0850009 	lbui	r4, r5, 9
  state[2][1] = state[2][3];
  state[2][3] = buf;

  /* << 3 */
  buf         = state[3][0];
10001604:	e065000c 	lbui	r3, r5, 12
  state[1][2] = state[1][3];
  state[1][3] = buf;

  /* << 2 */
  buf         = state[2][0];
  state[2][0] = state[2][2];
10001608:	f1050008 	sbi	r8, r5, 8
  sb_uint8_t buf;

  /* << 1 */
  buf         = state[1][0];
  state[1][0] = state[1][1];
  state[1][1] = state[1][2];
1000160c:	e1050006 	lbui	r8, r5, 6
  state[1][3] = buf;

  /* << 2 */
  buf         = state[2][0];
  state[2][0] = state[2][2];
  state[2][2] = buf;
10001610:	f0c5000a 	sbi	r6, r5, 10
  sb_uint8_t buf;

  /* << 1 */
  buf         = state[1][0];
  state[1][0] = state[1][1];
  state[1][1] = state[1][2];
10001614:	f1050005 	sbi	r8, r5, 5
  /* << 2 */
  buf         = state[2][0];
  state[2][0] = state[2][2];
  state[2][2] = buf;
  buf         = state[2][1];
  state[2][1] = state[2][3];
10001618:	e105000b 	lbui	r8, r5, 11
  state[2][3] = buf;
1000161c:	f085000b 	sbi	r4, r5, 11
  /* << 2 */
  buf         = state[2][0];
  state[2][0] = state[2][2];
  state[2][2] = buf;
  buf         = state[2][1];
  state[2][1] = state[2][3];
10001620:	f1050009 	sbi	r8, r5, 9

  /* << 1 */
  buf         = state[1][0];
  state[1][0] = state[1][1];
  state[1][1] = state[1][2];
  state[1][2] = state[1][3];
10001624:	e1050007 	lbui	r8, r5, 7
  state[1][3] = buf;
10001628:	f0e50007 	sbi	r7, r5, 7
  state[2][3] = buf;

  /* << 3 */
  buf         = state[3][0];
  state[3][0] = state[3][3];
  state[3][3] = state[3][2];
1000162c:	e0e5000e 	lbui	r7, r5, 14

  /* << 1 */
  buf         = state[1][0];
  state[1][0] = state[1][1];
  state[1][1] = state[1][2];
  state[1][2] = state[1][3];
10001630:	f1050006 	sbi	r8, r5, 6
  state[2][1] = state[2][3];
  state[2][3] = buf;

  /* << 3 */
  buf         = state[3][0];
  state[3][0] = state[3][3];
10001634:	e105000f 	lbui	r8, r5, 15
  state[3][3] = state[3][2];
10001638:	f0e5000f 	sbi	r7, r5, 15
  state[2][1] = state[2][3];
  state[2][3] = buf;

  /* << 3 */
  buf         = state[3][0];
  state[3][0] = state[3][3];
1000163c:	f105000c 	sbi	r8, r5, 12
  state[3][3] = state[3][2];
  state[3][2] = state[3][1];
10001640:	e105000d 	lbui	r8, r5, 13
  state[3][1] = buf;
10001644:	f065000d 	sbi	r3, r5, 13
}
10001648:	b60f0008 	rtsd	r15, 8
1000164c:	f105000e 	sbi	r8, r5, 14

10001650 <MixColumns>:

void MixColumns(sb_uint8_t state[4][Nb])
{
10001650:	3021ff30 	addik	r1, r1, -208

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
10001654:	e0650008 	lbui	r3, r5, 8
10001658:	e0850009 	lbui	r4, r5, 9
1000165c:	e0c5000a 	lbui	r6, r5, 10
10001660:	e0e5000b 	lbui	r7, r5, 11
  sb_int32_t i; 
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
10001664:	e1050000 	lbui	r8, r5, 0
    buf1 = state[1][i];
10001668:	e1450004 	lbui	r10, r5, 4
  sb_int32_t i; 
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
1000166c:	e1650001 	lbui	r11, r5, 1
  state[3][2] = state[3][1];
  state[3][1] = buf;
}

void MixColumns(sb_uint8_t state[4][Nb])
{
10001670:	fa6100a4 	swi	r19, r1, 164
10001674:	fac100a8 	swi	r22, r1, 168
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
10001678:	e2650005 	lbui	r19, r5, 5
  sb_int32_t i; 
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
1000167c:	e2c50002 	lbui	r22, r5, 2
  state[3][2] = state[3][1];
  state[3][1] = buf;
}

void MixColumns(sb_uint8_t state[4][Nb])
{
10001680:	fb0100b0 	swi	r24, r1, 176
10001684:	fb2100b4 	swi	r25, r1, 180
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
10001688:	e3050006 	lbui	r24, r5, 6
  sb_int32_t i; 
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
1000168c:	e3250003 	lbui	r25, r5, 3
  state[3][2] = state[3][1];
  state[3][1] = buf;
}

void MixColumns(sb_uint8_t state[4][Nb])
{
10001690:	fb4100b8 	swi	r26, r1, 184
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
10001694:	e3450007 	lbui	r26, r5, 7
  state[3][2] = state[3][1];
  state[3][1] = buf;
}

void MixColumns(sb_uint8_t state[4][Nb])
{
10001698:	fae100ac 	swi	r23, r1, 172
1000169c:	fb6100bc 	swi	r27, r1, 188
100016a0:	fb8100c0 	swi	r28, r1, 192
100016a4:	fba100c4 	swi	r29, r1, 196
100016a8:	fbc100c8 	swi	r30, r1, 200
100016ac:	fbe100cc 	swi	r31, r1, 204

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
100016b0:	f861004c 	swi	r3, r1, 76
100016b4:	f8810054 	swi	r4, r1, 84
100016b8:	f8c1005c 	swi	r6, r1, 92
100016bc:	f8e10044 	swi	r7, r1, 68
  sb_int32_t i; 
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
100016c0:	f9010014 	swi	r8, r1, 20
    buf1 = state[1][i];
100016c4:	f9410018 	swi	r10, r1, 24
  sb_int32_t i; 
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
100016c8:	f961001c 	swi	r11, r1, 28
    buf1 = state[1][i];
100016cc:	fa610020 	swi	r19, r1, 32
  sb_int32_t i; 
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
100016d0:	fac10024 	swi	r22, r1, 36
    buf1 = state[1][i];
100016d4:	fb010028 	swi	r24, r1, 40
  sb_int32_t i; 
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
100016d8:	fb21000c 	swi	r25, r1, 12
    buf1 = state[1][i];
100016dc:	fb410010 	swi	r26, r1, 16
    buf2 = state[2][i];
    buf3 = state[3][i];
100016e0:	e365000c 	lbui	r27, r5, 12
100016e4:	e385000d 	lbui	r28, r5, 13
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
100016e8:	ebe10024 	lwi	r31, r1, 36
  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
100016ec:	fb610050 	swi	r27, r1, 80
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
100016f0:	65260007 	bsrli	r9, r6, 7
100016f4:	66c80007 	bsrli	r22, r8, 7
100016f8:	66ea0007 	bsrli	r23, r10, 7
100016fc:	67040007 	bsrli	r24, r4, 7
10001700:	67630007 	bsrli	r27, r3, 7
10001704:	67330007 	bsrli	r25, r19, 7
10001708:	667f0007 	bsrli	r19, r31, 7
1000170c:	e8c10050 	lwi	r6, r1, 80
  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
10001710:	fb810058 	swi	r28, r1, 88
10001714:	e3c5000f 	lbui	r30, r5, 15
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001718:	e8610028 	lwi	r3, r1, 40
1000171c:	67e60007 	bsrli	r31, r6, 7
10001720:	678b0007 	bsrli	r28, r11, 7
10001724:	65830007 	bsrli	r12, r3, 7
10001728:	64670007 	bsrli	r3, r7, 7
1000172c:	1176b000 	addk	r11, r22, r22
10001730:	10d7b800 	addk	r6, r23, r23
10001734:	f961002c 	swi	r11, r1, 44
10001738:	f8c10030 	swi	r6, r1, 48
1000173c:	10d8c000 	addk	r6, r24, r24
10001740:	f8c10008 	swi	r6, r1, 8
10001744:	e8c1002c 	lwi	r6, r1, 44
  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
10001748:	fbc10048 	swi	r30, r1, 72
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
1000174c:	e8e10058 	lwi	r7, r1, 88
10001750:	e881000c 	lwi	r4, r1, 12
10001754:	e9410048 	lwi	r10, r1, 72
10001758:	12c6b000 	addk	r22, r6, r22
1000175c:	67c70007 	bsrli	r30, r7, 7
10001760:	65040007 	bsrli	r8, r4, 7
10001764:	649a0007 	bsrli	r4, r26, 7
10001768:	674a0007 	bsrli	r26, r10, 7
1000176c:	10fbd800 	addk	r7, r27, r27
10001770:	fac1002c 	swi	r22, r1, 44
10001774:	eac10030 	lwi	r22, r1, 48
10001778:	f8e10004 	swi	r7, r1, 4
1000177c:	115ce000 	addk	r10, r28, r28
10001780:	f9410034 	swi	r10, r1, 52
10001784:	e8c10004 	lwi	r6, r1, 4
10001788:	12f6b800 	addk	r23, r22, r23
1000178c:	eac10034 	lwi	r22, r1, 52
10001790:	1179c800 	addk	r11, r25, r25
10001794:	f9610038 	swi	r11, r1, 56
10001798:	1366d800 	addk	r27, r6, r27
1000179c:	fb610004 	swi	r27, r1, 4
100017a0:	1396e000 	addk	r28, r22, r28
100017a4:	eb610038 	lwi	r27, r1, 56
  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
100017a8:	e3a5000e 	lbui	r29, r5, 14
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
100017ac:	fb810034 	swi	r28, r1, 52
100017b0:	eb810008 	lwi	r28, r1, 8
100017b4:	10f39800 	addk	r7, r19, r19
100017b8:	114c6000 	addk	r10, r12, r12
100017bc:	11694800 	addk	r11, r9, r9
100017c0:	133bc800 	addk	r25, r27, r25
  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
100017c4:	fba10060 	swi	r29, r1, 96
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
100017c8:	f8e10040 	swi	r7, r1, 64
100017cc:	f9410064 	swi	r10, r1, 100
100017d0:	f961006c 	swi	r11, r1, 108
100017d4:	fae10030 	swi	r23, r1, 48
100017d8:	fb21003c 	swi	r25, r1, 60
100017dc:	131cc000 	addk	r24, r28, r24
100017e0:	fb010008 	swi	r24, r1, 8
100017e4:	e8c10040 	lwi	r6, r1, 64
100017e8:	67bd0007 	bsrli	r29, r29, 7
100017ec:	66f70403 	bslli	r23, r23, 3
100017f0:	11684000 	addk	r11, r8, r8
100017f4:	11442000 	addk	r10, r4, r4
100017f8:	10e31800 	addk	r7, r3, r3
100017fc:	12669800 	addk	r19, r6, r19
10001800:	116b4000 	addk	r11, r11, r8
10001804:	114a2000 	addk	r10, r10, r4
10001808:	10e71800 	addk	r7, r7, r3
1000180c:	10dad000 	addk	r6, r26, r26
10001810:	f9610074 	swi	r11, r1, 116
10001814:	f9410078 	swi	r10, r1, 120
10001818:	f8e1007c 	swi	r7, r1, 124
1000181c:	10c6d000 	addk	r6, r6, r26
10001820:	117ff800 	addk	r11, r31, r31
10001824:	10fde800 	addk	r7, r29, r29
10001828:	fa610040 	swi	r19, r1, 64
1000182c:	116bf800 	addk	r11, r11, r31
10001830:	ea610064 	lwi	r19, r1, 100
10001834:	f8c10088 	swi	r6, r1, 136
10001838:	e8810078 	lwi	r4, r1, 120
1000183c:	10e7e800 	addk	r7, r7, r29
10001840:	115ef000 	addk	r10, r30, r30
10001844:	eac1006c 	lwi	r22, r1, 108
10001848:	114af000 	addk	r10, r10, r30
1000184c:	f8e10070 	swi	r7, r1, 112
10001850:	eb01002c 	lwi	r24, r1, 44
10001854:	f9610038 	swi	r11, r1, 56
10001858:	64eb0403 	bslli	r7, r11, 3
1000185c:	650a0403 	bslli	r8, r10, 3
10001860:	e9610088 	lwi	r11, r1, 136
10001864:	f9410064 	swi	r10, r1, 100
10001868:	e9410070 	lwi	r10, r1, 112
1000186c:	11936000 	addk	r12, r19, r12
10001870:	66640403 	bslli	r19, r4, 3
10001874:	656b0403 	bslli	r11, r11, 3
10001878:	654a0403 	bslli	r10, r10, 3
1000187c:	e881002c 	lwi	r4, r1, 44
10001880:	11364800 	addk	r9, r22, r9
10001884:	eb410034 	lwi	r26, r1, 52
10001888:	66d80403 	bslli	r22, r24, 3
1000188c:	eb210004 	lwi	r25, r1, 4
10001890:	e8610074 	lwi	r3, r1, 116
10001894:	e8c1007c 	lwi	r6, r1, 124
10001898:	f96100a0 	swi	r11, r1, 160
1000189c:	1164b000 	addk	r11, r4, r22
100018a0:	e8810034 	lwi	r4, r1, 52
100018a4:	ebc10008 	lwi	r30, r1, 8
100018a8:	eac1004c 	lwi	r22, r1, 76
100018ac:	f8e10080 	swi	r7, r1, 128
100018b0:	f9410094 	swi	r10, r1, 148
100018b4:	e8e10030 	lwi	r7, r1, 48
100018b8:	e9410004 	lwi	r10, r1, 4
100018bc:	679a0403 	bslli	r28, r26, 3
100018c0:	67790403 	bslli	r27, r25, 3
100018c4:	67230403 	bslli	r25, r3, 3
100018c8:	64660403 	bslli	r3, r6, 3
100018cc:	671e0403 	bslli	r24, r30, 3
100018d0:	67cc0403 	bslli	r30, r12, 3
100018d4:	eba1003c 	lwi	r29, r1, 60
100018d8:	ebe10040 	lwi	r31, r1, 64
100018dc:	e8c10014 	lwi	r6, r1, 20
100018e0:	f9810068 	swi	r12, r1, 104
100018e4:	f921006c 	swi	r9, r1, 108
100018e8:	f9010084 	swi	r8, r1, 132
100018ec:	1384e000 	addk	r28, r4, r28
100018f0:	e9010018 	lwi	r8, r1, 24
100018f4:	1187b800 	addk	r12, r7, r23
100018f8:	fb810004 	swi	r28, r1, 4
100018fc:	10ead800 	addk	r7, r10, r27
10001900:	1376b000 	addk	r27, r22, r22
10001904:	eac1003c 	lwi	r22, r1, 60
10001908:	675d0403 	bslli	r26, r29, 3
1000190c:	67bf0403 	bslli	r29, r31, 3
10001910:	67e90403 	bslli	r31, r9, 3
10001914:	11263000 	addk	r9, r6, r6
10001918:	10c84000 	addk	r6, r8, r8
1000191c:	e901001c 	lwi	r8, r1, 28
10001920:	1156d000 	addk	r10, r22, r26
10001924:	eb410020 	lwi	r26, r1, 32
10001928:	13884000 	addk	r28, r8, r8
1000192c:	e9010008 	lwi	r8, r1, 8
10001930:	12fad000 	addk	r23, r26, r26
10001934:	eb410040 	lwi	r26, r1, 64
10001938:	1088c000 	addk	r4, r8, r24
1000193c:	eb010054 	lwi	r24, r1, 84
10001940:	e9010068 	lwi	r8, r1, 104
10001944:	13bae800 	addk	r29, r26, r29
10001948:	fba1003c 	swi	r29, r1, 60
1000194c:	eba10024 	lwi	r29, r1, 36
10001950:	12d8c000 	addk	r22, r24, r24
10001954:	eb010028 	lwi	r24, r1, 40
10001958:	eb41006c 	lwi	r26, r1, 108
1000195c:	13c8f000 	addk	r30, r8, r30
10001960:	e901005c 	lwi	r8, r1, 92
10001964:	13bde800 	addk	r29, r29, r29
10001968:	fba1008c 	swi	r29, r1, 140
1000196c:	13b8c000 	addk	r29, r24, r24
10001970:	eb010074 	lwi	r24, r1, 116
10001974:	13faf800 	addk	r31, r26, r31
10001978:	13484000 	addk	r26, r8, r8
1000197c:	e9010078 	lwi	r8, r1, 120
10001980:	1338c800 	addk	r25, r24, r25
10001984:	fb210008 	swi	r25, r1, 8
10001988:	12689800 	addk	r19, r8, r19
1000198c:	eb21000c 	lwi	r25, r1, 12
10001990:	eb01007c 	lwi	r24, r1, 124
10001994:	e9010044 	lwi	r8, r1, 68
10001998:	fa61009c 	swi	r19, r1, 156
1000199c:	ea610010 	lwi	r19, r1, 16
100019a0:	1339c800 	addk	r25, r25, r25
100019a4:	fb210098 	swi	r25, r1, 152
100019a8:	10781800 	addk	r3, r24, r3
100019ac:	13339800 	addk	r25, r19, r19
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
100019b0:	eb010018 	lwi	r24, r1, 24
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
100019b4:	12684000 	addk	r19, r8, r8
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
100019b8:	e9010014 	lwi	r8, r1, 20
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
100019bc:	898c3000 	xor	r12, r12, r6
100019c0:	8b67d800 	xor	r27, r7, r27
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
100019c4:	8b184000 	xor	r24, r24, r8
100019c8:	fb010030 	swi	r24, r1, 48
100019cc:	e901001c 	lwi	r8, r1, 28
100019d0:	eb010020 	lwi	r24, r1, 32
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
100019d4:	8aeab800 	xor	r23, r10, r23
100019d8:	8ac4b000 	xor	r22, r4, r22
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
100019dc:	8b184000 	xor	r24, r24, r8
100019e0:	fb010034 	swi	r24, r1, 52
100019e4:	e9010024 	lwi	r8, r1, 36
100019e8:	eb010028 	lwi	r24, r1, 40
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
100019ec:	8a639800 	xor	r19, r3, r19
100019f0:	a77b00ff 	andi	r27, r27, 255
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
100019f4:	8b184000 	xor	r24, r24, r8
100019f8:	fb010040 	swi	r24, r1, 64
100019fc:	e901000c 	lwi	r8, r1, 12
10001a00:	eb010010 	lwi	r24, r1, 16
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001a04:	a6d600ff 	andi	r22, r22, 255
10001a08:	a67300ff 	andi	r19, r19, 255
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001a0c:	8b184000 	xor	r24, r24, r8
10001a10:	fb01002c 	swi	r24, r1, 44
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001a14:	e8c10018 	lwi	r6, r1, 24
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001a18:	8b0b4800 	xor	r24, r11, r9
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001a1c:	e961004c 	lwi	r11, r1, 76
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001a20:	e9010014 	lwi	r8, r1, 20
10001a24:	e8e1004c 	lwi	r7, r1, 76
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001a28:	896b3000 	xor	r11, r11, r6
10001a2c:	f9610068 	swi	r11, r1, 104
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001a30:	e8c10080 	lwi	r6, r1, 128
10001a34:	e9610038 	lwi	r11, r1, 56
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001a38:	88e74000 	xor	r7, r7, r8
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001a3c:	e9410054 	lwi	r10, r1, 84
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001a40:	116b3000 	addk	r11, r11, r6
10001a44:	f9610074 	swi	r11, r1, 116
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001a48:	e9610020 	lwi	r11, r1, 32
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001a4c:	e9010004 	lwi	r8, r1, 4
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001a50:	f8e1006c 	swi	r7, r1, 108
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001a54:	e8e10050 	lwi	r7, r1, 80
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001a58:	e8810054 	lwi	r4, r1, 84
10001a5c:	e8c1001c 	lwi	r6, r1, 28
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001a60:	894a5800 	xor	r10, r10, r11
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001a64:	e9610058 	lwi	r11, r1, 88
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001a68:	f941007c 	swi	r10, r1, 124
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001a6c:	10e73800 	addk	r7, r7, r7
10001a70:	e9410084 	lwi	r10, r1, 132
10001a74:	8b88e000 	xor	r28, r8, r28
10001a78:	e9010064 	lwi	r8, r1, 100
10001a7c:	f8e10078 	swi	r7, r1, 120
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001a80:	88e43000 	xor	r7, r4, r6
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001a84:	e8c1008c 	lwi	r6, r1, 140
10001a88:	e881003c 	lwi	r4, r1, 60
10001a8c:	116b5800 	addk	r11, r11, r11
10001a90:	11085000 	addk	r8, r8, r10
10001a94:	f9610084 	swi	r11, r1, 132
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001a98:	e941005c 	lwi	r10, r1, 92
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001a9c:	897ee800 	xor	r11, r30, r29
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001aa0:	eba10028 	lwi	r29, r1, 40
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001aa4:	f9010064 	swi	r8, r1, 100
10001aa8:	89043000 	xor	r8, r4, r6
10001aac:	e8810070 	lwi	r4, r1, 112
10001ab0:	e8c10094 	lwi	r6, r1, 148
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001ab4:	894ae800 	xor	r10, r10, r29
10001ab8:	f941008c 	swi	r10, r1, 140
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001abc:	ebc1005c 	lwi	r30, r1, 92
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001ac0:	895fd000 	xor	r10, r31, r26
10001ac4:	10843000 	addk	r4, r4, r6
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001ac8:	ebe10024 	lwi	r31, r1, 36
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001acc:	eb410060 	lwi	r26, r1, 96
10001ad0:	e8c1009c 	lwi	r6, r1, 156
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001ad4:	8bdef800 	xor	r30, r30, r31
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001ad8:	f8810070 	swi	r4, r1, 112
10001adc:	13bad000 	addk	r29, r26, r26
10001ae0:	8886c800 	xor	r4, r6, r25
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001ae4:	eb410010 	lwi	r26, r1, 16
10001ae8:	eb210044 	lwi	r25, r1, 68
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001aec:	ebe10098 	lwi	r31, r1, 152
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001af0:	fbc10090 	swi	r30, r1, 144
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001af4:	ebc10008 	lwi	r30, r1, 8
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001af8:	8b39d000 	xor	r25, r25, r26
10001afc:	fb210094 	swi	r25, r1, 148
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001b00:	893ef800 	xor	r9, r30, r31
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001b04:	ebe1000c 	lwi	r31, r1, 12
10001b08:	ebc10044 	lwi	r30, r1, 68
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001b0c:	a50800ff 	andi	r8, r8, 255
10001b10:	f9010038 	swi	r8, r1, 56
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001b14:	88def800 	xor	r6, r30, r31
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001b18:	e901006c 	lwi	r8, r1, 108
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001b1c:	ebe10050 	lwi	r31, r1, 80
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001b20:	eb210088 	lwi	r25, r1, 136
10001b24:	eb4100a0 	lwi	r26, r1, 160
10001b28:	ebc10048 	lwi	r30, r1, 72
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001b2c:	891f4000 	xor	r8, r31, r8
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001b30:	a71800ff 	andi	r24, r24, 255
10001b34:	a79c00ff 	andi	r28, r28, 255
10001b38:	a56b00ff 	andi	r11, r11, 255
10001b3c:	a48400ff 	andi	r4, r4, 255
10001b40:	1079d000 	addk	r3, r25, r26
10001b44:	fb010018 	swi	r24, r1, 24
10001b48:	fb610020 	swi	r27, r1, 32
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001b4c:	eb010050 	lwi	r24, r1, 80
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001b50:	eb61004c 	lwi	r27, r1, 76
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001b54:	fb810024 	swi	r28, r1, 36
10001b58:	fac10004 	swi	r22, r1, 4
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001b5c:	eb810058 	lwi	r28, r1, 88
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001b60:	eac10030 	lwi	r22, r1, 48
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001b64:	f961003c 	swi	r11, r1, 60
10001b68:	f8810010 	swi	r4, r1, 16
10001b6c:	e9610074 	lwi	r11, r1, 116
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001b70:	e8810068 	lwi	r4, r1, 104
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001b74:	fa610014 	swi	r19, r1, 20
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001b78:	f9010068 	swi	r8, r1, 104
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001b7c:	ea610078 	lwi	r19, r1, 120
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001b80:	e9010034 	lwi	r8, r1, 52
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001b84:	133ef000 	addk	r25, r30, r30
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001b88:	ebc1007c 	lwi	r30, r1, 124
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001b8c:	a6f700ff 	andi	r23, r23, 255
10001b90:	a54a00ff 	andi	r10, r10, 255
10001b94:	fae10028 	swi	r23, r1, 40
10001b98:	f9410008 	swi	r10, r1, 8
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001b9c:	8b56c000 	xor	r26, r22, r24
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001ba0:	895f2000 	xor	r10, r31, r4
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001ba4:	8b16d800 	xor	r24, r22, r27
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001ba8:	8beb9800 	xor	r31, r11, r19
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001bac:	eac10060 	lwi	r22, r1, 96
10001bb0:	8afcf000 	xor	r23, r28, r30
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001bb4:	88fc3800 	xor	r7, r28, r7
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001bb8:	8a68e000 	xor	r19, r8, r28
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001bbc:	eb810090 	lwi	r28, r1, 144
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001bc0:	e9610054 	lwi	r11, r1, 84
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001bc4:	eb61008c 	lwi	r27, r1, 140
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001bc8:	a58c00ff 	andi	r12, r12, 255
10001bcc:	a52900ff 	andi	r9, r9, 255
10001bd0:	e8810064 	lwi	r4, r1, 100
10001bd4:	f981001c 	swi	r12, r1, 28
10001bd8:	f921000c 	swi	r9, r1, 12
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001bdc:	f8e10030 	swi	r7, r1, 48
10001be0:	8b96e000 	xor	r28, r22, r28
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001be4:	e8e10084 	lwi	r7, r1, 132
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001be8:	89885800 	xor	r12, r8, r11
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001bec:	fb810034 	swi	r28, r1, 52
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001bf0:	8976d800 	xor	r11, r22, r27
10001bf4:	eb610048 	lwi	r27, r1, 72
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001bf8:	8bc43800 	xor	r30, r4, r7
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001bfc:	e8e10040 	lwi	r7, r1, 64
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001c00:	88db3000 	xor	r6, r27, r6
10001c04:	f8c10040 	swi	r6, r1, 64
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001c08:	8b23c800 	xor	r25, r3, r25
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001c0c:	e8c10044 	lwi	r6, r1, 68
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001c10:	e861002c 	lwi	r3, r1, 44
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001c14:	e8810070 	lwi	r4, r1, 112
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001c18:	8927b000 	xor	r9, r7, r22
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001c1c:	eac1005c 	lwi	r22, r1, 92
10001c20:	88c33000 	xor	r6, r3, r6
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001c24:	eb810094 	lwi	r28, r1, 148
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001c28:	f8c1002c 	swi	r6, r1, 44
10001c2c:	8907b000 	xor	r8, r7, r22
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001c30:	e8c10068 	lwi	r6, r1, 104
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001c34:	eac10018 	lwi	r22, r1, 24
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001c38:	8ba4e800 	xor	r29, r4, r29
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001c3c:	8883d800 	xor	r4, r3, r27
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001c40:	e861001c 	lwi	r3, r1, 28
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001c44:	88fbe000 	xor	r7, r27, r28
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001c48:	8b16c000 	xor	r24, r22, r24
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001c4c:	8b965000 	xor	r28, r22, r10
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001c50:	8b633000 	xor	r27, r3, r6
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001c54:	eac10024 	lwi	r22, r1, 36
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001c58:	e8610028 	lwi	r3, r1, 40
10001c5c:	e8c10030 	lwi	r6, r1, 48
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001c60:	e9410020 	lwi	r10, r1, 32
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001c64:	8af6b800 	xor	r23, r22, r23
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001c68:	8ac33000 	xor	r22, r3, r6
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001c6c:	e8c10038 	lwi	r6, r1, 56
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001c70:	8b4ad000 	xor	r26, r10, r26
10001c74:	e9410004 	lwi	r10, r1, 4
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001c78:	89665800 	xor	r11, r6, r11
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001c7c:	e8610024 	lwi	r3, r1, 36
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001c80:	8a6a9800 	xor	r19, r10, r19
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001c84:	f9610024 	swi	r11, r1, 36
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001c88:	e941003c 	lwi	r10, r1, 60
10001c8c:	e9610034 	lwi	r11, r1, 52
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001c90:	89836000 	xor	r12, r3, r12
10001c94:	89064000 	xor	r8, r6, r8
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001c98:	894a5800 	xor	r10, r10, r11
10001c9c:	f9410018 	swi	r10, r1, 24
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001ca0:	e8610008 	lwi	r3, r1, 8
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001ca4:	e8c1000c 	lwi	r6, r1, 12
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001ca8:	e9410010 	lwi	r10, r1, 16
10001cac:	e9610040 	lwi	r11, r1, 64
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001cb0:	a7ff00ff 	andi	r31, r31, 255
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001cb4:	8b5fd000 	xor	r26, r31, r26
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001cb8:	8b1fc000 	xor	r24, r31, r24
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001cbc:	89234800 	xor	r9, r3, r9
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001cc0:	ebe10028 	lwi	r31, r1, 40
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001cc4:	e8610014 	lwi	r3, r1, 20
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001cc8:	88e63800 	xor	r7, r6, r7
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001ccc:	88ca5800 	xor	r6, r10, r11
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001cd0:	e941000c 	lwi	r10, r1, 12
10001cd4:	e961002c 	lwi	r11, r1, 44
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001cd8:	a7de00ff 	andi	r30, r30, 255
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001cdc:	8affb800 	xor	r23, r31, r23
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001ce0:	8a7e9800 	xor	r19, r30, r19
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001ce4:	ebe10024 	lwi	r31, r1, 36
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001ce8:	899e6000 	xor	r12, r30, r12
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10001cec:	88832000 	xor	r4, r3, r4
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001cf0:	ebc1003c 	lwi	r30, r1, 60
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001cf4:	886a5800 	xor	r3, r10, r11
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001cf8:	e941001c 	lwi	r10, r1, 28
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001cfc:	e9610020 	lwi	r11, r1, 32
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001d00:	a7bd00ff 	andi	r29, r29, 255
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001d04:	8b8ae000 	xor	r28, r10, r28
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001d08:	8b6bd800 	xor	r27, r11, r27
10001d0c:	e9410004 	lwi	r10, r1, 4
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001d10:	897ef800 	xor	r11, r30, r31
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001d14:	ebc10008 	lwi	r30, r1, 8
10001d18:	ebe10018 	lwi	r31, r1, 24
10001d1c:	8acab000 	xor	r22, r10, r22
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001d20:	893d4800 	xor	r9, r29, r9
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001d24:	895ef800 	xor	r10, r30, r31
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001d28:	891d4000 	xor	r8, r29, r8
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001d2c:	ebc10014 	lwi	r30, r1, 20
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001d30:	eba10010 	lwi	r29, r1, 16
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10001d34:	a73900ff 	andi	r25, r25, 255
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001d38:	f3850000 	sbi	r28, r5, 0
10001d3c:	88fd3800 	xor	r7, r29, r7
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001d40:	88de3000 	xor	r6, r30, r6
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001d44:	88992000 	xor	r4, r25, r4
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001d48:	88791800 	xor	r3, r25, r3
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001d4c:	f3650004 	sbi	r27, r5, 4
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001d50:	f3450008 	sbi	r26, r5, 8
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001d54:	f305000c 	sbi	r24, r5, 12
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001d58:	f2e50001 	sbi	r23, r5, 1
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001d5c:	f2c50005 	sbi	r22, r5, 5
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001d60:	f2650009 	sbi	r19, r5, 9
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
  }
}
10001d64:	eac100a8 	lwi	r22, r1, 168
10001d68:	ea6100a4 	lwi	r19, r1, 164
10001d6c:	eae100ac 	lwi	r23, r1, 172
10001d70:	eb0100b0 	lwi	r24, r1, 176
10001d74:	eb2100b4 	lwi	r25, r1, 180
10001d78:	eb4100b8 	lwi	r26, r1, 184
10001d7c:	eb6100bc 	lwi	r27, r1, 188
10001d80:	eb8100c0 	lwi	r28, r1, 192
10001d84:	eba100c4 	lwi	r29, r1, 196
10001d88:	ebc100c8 	lwi	r30, r1, 200
10001d8c:	ebe100cc 	lwi	r31, r1, 204
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001d90:	f185000d 	sbi	r12, r5, 13
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001d94:	f1650002 	sbi	r11, r5, 2
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001d98:	f1450006 	sbi	r10, r5, 6
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001d9c:	f125000a 	sbi	r9, r5, 10
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001da0:	f105000e 	sbi	r8, r5, 14
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = Mult2GF(buf0) ^ Mult3GF(buf1) ^ buf2 ^ buf3;
10001da4:	f0e50003 	sbi	r7, r5, 3
    state[1][i] = buf0 ^ Mult2GF(buf1) ^ Mult3GF(buf2) ^ buf3;
10001da8:	f0c50007 	sbi	r6, r5, 7
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
10001dac:	f085000b 	sbi	r4, r5, 11
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
10001db0:	f065000f 	sbi	r3, r5, 15
  }
}
10001db4:	b60f0008 	rtsd	r15, 8
10001db8:	302100d0 	addik	r1, r1, 208

10001dbc <Cipher>:
    i++;
  }
}

void Cipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
{
10001dbc:	3021ff74 	addik	r1, r1, -140
10001dc0:	fbe10088 	swi	r31, r1, 136
10001dc4:	13e70000 	addk	r31, r7, r0
10001dc8:	f9e10000 	swi	r15, r1, 0
10001dcc:	fa610060 	swi	r19, r1, 96
10001dd0:	fac10064 	swi	r22, r1, 100
10001dd4:	fae10068 	swi	r23, r1, 104
10001dd8:	fb01006c 	swi	r24, r1, 108
10001ddc:	fb210070 	swi	r25, r1, 112
10001de0:	fb410074 	swi	r26, r1, 116
10001de4:	fb610078 	swi	r27, r1, 120
10001de8:	fb81007c 	swi	r28, r1, 124
10001dec:	fba10080 	swi	r29, r1, 128
10001df0:	fbc10084 	swi	r30, r1, 132
  /* PROLOGUE */	
  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = dat_i[i*Nb+j];
10001df4:	3067002c 	addik	r3, r7, 44
10001df8:	e1450000 	lbui	r10, r5, 0
10001dfc:	e1850002 	lbui	r12, r5, 2
10001e00:	e2650003 	lbui	r19, r5, 3
10001e04:	e2e50004 	lbui	r23, r5, 4
10001e08:	e3050005 	lbui	r24, r5, 5
10001e0c:	e3250006 	lbui	r25, r5, 6
10001e10:	e3450007 	lbui	r26, r5, 7
10001e14:	e2c50008 	lbui	r22, r5, 8
10001e18:	e1250009 	lbui	r9, r5, 9
10001e1c:	e105000a 	lbui	r8, r5, 10
10001e20:	e0e5000b 	lbui	r7, r5, 11
10001e24:	e365000d 	lbui	r27, r5, 13
10001e28:	e085000e 	lbui	r4, r5, 14
10001e2c:	e385000f 	lbui	r28, r5, 15
    i++;
  }
}

void Cipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
{
10001e30:	f8c10094 	swi	r6, r1, 148
  /* PROLOGUE */	
  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = dat_i[i*Nb+j];
10001e34:	f8610034 	swi	r3, r1, 52
10001e38:	e0c5000c 	lbui	r6, r5, 12
10001e3c:	e1650001 	lbui	r11, r5, 1
10001e40:	807f1800 	or	r3, r31, r3
10001e44:	30bf0058 	addik	r5, r31, 88
10001e48:	f8a10038 	swi	r5, r1, 56
10001e4c:	80651800 	or	r3, r5, r3
10001e50:	30bf0084 	addik	r5, r31, 132
10001e54:	f8a1003c 	swi	r5, r1, 60
10001e58:	80651800 	or	r3, r5, r3
10001e5c:	f141001c 	sbi	r10, r1, 28
10001e60:	f1610020 	sbi	r11, r1, 32
10001e64:	a4630003 	andi	r3, r3, 3
10001e68:	f1810024 	sbi	r12, r1, 36
10001e6c:	f2610028 	sbi	r19, r1, 40
10001e70:	f2e1001d 	sbi	r23, r1, 29
10001e74:	f3010021 	sbi	r24, r1, 33
10001e78:	f3210025 	sbi	r25, r1, 37
10001e7c:	f3410029 	sbi	r26, r1, 41
10001e80:	f2c1001e 	sbi	r22, r1, 30
10001e84:	f1210022 	sbi	r9, r1, 34
10001e88:	f1010026 	sbi	r8, r1, 38
10001e8c:	f0e1002a 	sbi	r7, r1, 42
10001e90:	f0c1001f 	sbi	r6, r1, 31
10001e94:	f3610023 	sbi	r27, r1, 35
10001e98:	f0810027 	sbi	r4, r1, 39
10001e9c:	be230594 	bneid	r3, 1428		// 10002430
10001ea0:	f381002b 	sbi	r28, r1, 43

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10001ea4:	e861001c 	lwi	r3, r1, 28
10001ea8:	e91f0000 	lwi	r8, r31, 0
10001eac:	e8bf002c 	lwi	r5, r31, 44
10001eb0:	e89f0058 	lwi	r4, r31, 88
10001eb4:	89081800 	xor	r8, r8, r3
10001eb8:	e8610020 	lwi	r3, r1, 32
10001ebc:	e93f0084 	lwi	r9, r31, 132
10001ec0:	f901001c 	swi	r8, r1, 28
10001ec4:	88a51800 	xor	r5, r5, r3
10001ec8:	e8610024 	lwi	r3, r1, 36
10001ecc:	f8a10020 	swi	r5, r1, 32
10001ed0:	88841800 	xor	r4, r4, r3
10001ed4:	e8610028 	lwi	r3, r1, 40
10001ed8:	f8810024 	swi	r4, r1, 36
10001edc:	88691800 	xor	r3, r9, r3
10001ee0:	f8610028 	swi	r3, r1, 40
10001ee4:	e061001d 	lbui	r3, r1, 29
10001ee8:	e2c10024 	lbui	r22, r1, 36
10001eec:	e0e1001f 	lbui	r7, r1, 31
10001ef0:	e1210029 	lbui	r9, r1, 41
10001ef4:	e2e10020 	lbui	r23, r1, 32
	 	
    i++;
  }
}

void Cipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
10001ef8:	30df0030 	addik	r6, r31, 48

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10001efc:	e081001c 	lbui	r4, r1, 28
	 	
    i++;
  }
}

void Cipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
10001f00:	311f0031 	addik	r8, r31, 49

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10001f04:	e301001e 	lbui	r24, r1, 30
	 	
    i++;
  }
}

void Cipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
10001f08:	f8c10040 	swi	r6, r1, 64
10001f0c:	30df0033 	addik	r6, r31, 51

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10001f10:	f861002c 	swi	r3, r1, 44
	 	
    i++;
  }
}

void Cipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
10001f14:	f9010048 	swi	r8, r1, 72
10001f18:	307f0032 	addik	r3, r31, 50
10001f1c:	fbe10030 	swi	r31, r1, 48

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10001f20:	e3c1002b 	lbui	r30, r1, 43
10001f24:	13e60000 	addk	r31, r6, r0
10001f28:	e1810025 	lbui	r12, r1, 37
10001f2c:	10d60000 	addk	r6, r22, r0
10001f30:	e3610022 	lbui	r27, r1, 34
10001f34:	e0a10023 	lbui	r5, r1, 35
10001f38:	e1410026 	lbui	r10, r1, 38
10001f3c:	e341002a 	lbui	r26, r1, 42
10001f40:	e1610021 	lbui	r11, r1, 33
10001f44:	e2610028 	lbui	r19, r1, 40
10001f48:	e3a10027 	lbui	r29, r1, 39
10001f4c:	13270000 	addk	r25, r7, r0
10001f50:	11090000 	addk	r8, r9, r0
10001f54:	12d70000 	addk	r22, r23, r0
10001f58:	f8810050 	swi	r4, r1, 80
	 	
    i++;
  }
}

void Cipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
10001f5c:	30800001 	addik	r4, r0, 1
10001f60:	f8610044 	swi	r3, r1, 68
10001f64:	f881004c 	swi	r4, r1, 76
10001f68:	fb010054 	swi	r24, r1, 84

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = Sbox[state[j][i]];
10001f6c:	b0001000 	imm	4096
10001f70:	e13a3d54 	lbui	r9, r26, 15700
10001f74:	b0001000 	imm	4096
10001f78:	e3163d54 	lbui	r24, r22, 15700
10001f7c:	e8e10050 	lwi	r7, r1, 80
10001f80:	b0001000 	imm	4096
10001f84:	e2cc3d54 	lbui	r22, r12, 15700
10001f88:	eb41002c 	lwi	r26, r1, 44
10001f8c:	b0001000 	imm	4096
10001f90:	e19b3d54 	lbui	r12, r27, 15700
10001f94:	eb610054 	lwi	r27, r1, 84
10001f98:	b0001000 	imm	4096
10001f9c:	e38b3d54 	lbui	r28, r11, 15700
10001fa0:	b0001000 	imm	4096
10001fa4:	e09d3d54 	lbui	r4, r29, 15700
10001fa8:	b0001000 	imm	4096
10001fac:	e07e3d54 	lbui	r3, r30, 15700
10001fb0:	b0001000 	imm	4096
10001fb4:	e0c63d54 	lbui	r6, r6, 15700
10001fb8:	b0001000 	imm	4096
10001fbc:	e2f33d54 	lbui	r23, r19, 15700
10001fc0:	b0001000 	imm	4096
10001fc4:	e14a3d54 	lbui	r10, r10, 15700
10001fc8:	b0001000 	imm	4096
10001fcc:	e0e73d54 	lbui	r7, r7, 15700
10001fd0:	b0001000 	imm	4096
10001fd4:	e2683d54 	lbui	r19, r8, 15700
10001fd8:	b0001000 	imm	4096
10001fdc:	e35a3d54 	lbui	r26, r26, 15700
10001fe0:	b0001000 	imm	4096
10001fe4:	e1053d54 	lbui	r8, r5, 15700
10001fe8:	b0001000 	imm	4096
10001fec:	e37b3d54 	lbui	r27, r27, 15700
10001ff0:	b0001000 	imm	4096
10001ff4:	e3393d54 	lbui	r25, r25, 15700
10001ff8:	f0e1001c 	sbi	r7, r1, 28
  sb_uint8_t buf;

  /* << 1 */
  buf         = state[1][0];
  state[1][0] = state[1][1];
  state[1][1] = state[1][2];
10001ffc:	f1810021 	sbi	r12, r1, 33
  state[1][2] = state[1][3];
10002000:	f1010022 	sbi	r8, r1, 34
  state[1][3] = buf;

  /* << 2 */
  buf         = state[2][0];
  state[2][0] = state[2][2];
10002004:	f1410024 	sbi	r10, r1, 36
  state[2][2] = buf;
10002008:	f0c10026 	sbi	r6, r1, 38
  buf         = state[2][1];
  state[2][1] = state[2][3];
1000200c:	f0810025 	sbi	r4, r1, 37
  state[2][3] = buf;

  /* << 3 */
  buf         = state[3][0];
  state[3][0] = state[3][3];
10002010:	f0610028 	sbi	r3, r1, 40
  state[3][3] = state[3][2];
10002014:	f121002b 	sbi	r9, r1, 43

  for(i=1;i<Nr;i++)
  {
    SubBytes(state);
    ShiftRows(state);
    MixColumns(state);
10002018:	30a1001c 	addik	r5, r1, 28

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = Sbox[state[j][i]];
1000201c:	f341001d 	sbi	r26, r1, 29
10002020:	f361001e 	sbi	r27, r1, 30
10002024:	f321001f 	sbi	r25, r1, 31
{
  sb_uint8_t buf;

  /* << 1 */
  buf         = state[1][0];
  state[1][0] = state[1][1];
10002028:	f3810020 	sbi	r28, r1, 32
  state[1][1] = state[1][2];
  state[1][2] = state[1][3];
  state[1][3] = buf;
1000202c:	f3010023 	sbi	r24, r1, 35
  buf         = state[2][0];
  state[2][0] = state[2][2];
  state[2][2] = buf;
  buf         = state[2][1];
  state[2][1] = state[2][3];
  state[2][3] = buf;
10002030:	f2c10027 	sbi	r22, r1, 39

  /* << 3 */
  buf         = state[3][0];
  state[3][0] = state[3][3];
  state[3][3] = state[3][2];
  state[3][2] = state[3][1];
10002034:	f261002a 	sbi	r19, r1, 42

  for(i=1;i<Nr;i++)
  {
    SubBytes(state);
    ShiftRows(state);
    MixColumns(state);
10002038:	b9f4f618 	brlid	r15, -2536	// 10001650 <MixColumns>
1000203c:	f2e10029 	sbi	r23, r1, 41
	 	
    i++;
  }
}

void Cipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
10002040:	e8c10034 	lwi	r6, r1, 52
10002044:	e8610040 	lwi	r3, r1, 64
10002048:	e8e10048 	lwi	r7, r1, 72

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
1000204c:	e9210040 	lwi	r9, r1, 64
	 	
    i++;
  }
}

void Cipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
10002050:	e9010044 	lwi	r8, r1, 68
10002054:	14861800 	rsubk	r4, r6, r3

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002058:	e1890000 	lbui	r12, r9, 0
	 	
    i++;
  }
}

void Cipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
1000205c:	14663800 	rsubk	r3, r6, r7

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002060:	eb610030 	lwi	r27, r1, 48
10002064:	e0e70000 	lbui	r7, r7, 0
10002068:	e9210030 	lwi	r9, r1, 48
1000206c:	e1410021 	lbui	r10, r1, 33
	 	
    i++;
  }
}

void Cipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
10002070:	14a64000 	rsubk	r5, r6, r8

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002074:	e3480000 	lbui	r26, r8, 0
10002078:	e8c10038 	lwi	r6, r1, 56
1000207c:	e901003c 	lwi	r8, r1, 60
10002080:	e2c10020 	lbui	r22, r1, 32
10002084:	c3c92800 	lbu	r30, r9, r5
10002088:	c31b2000 	lbu	r24, r27, r4
1000208c:	89475000 	xor	r10, r7, r10
10002090:	c37b1800 	lbu	r27, r27, r3
10002094:	e2e1001c 	lbui	r23, r1, 28
10002098:	e161001d 	lbui	r11, r1, 29
1000209c:	e0e1001e 	lbui	r7, r1, 30
100020a0:	c3262000 	lbu	r25, r6, r4
100020a4:	c3861800 	lbu	r28, r6, r3
100020a8:	f341005f 	sbi	r26, r1, 95
100020ac:	c0c62800 	lbu	r6, r6, r5
100020b0:	c3482000 	lbu	r26, r8, r4
100020b4:	c0a82800 	lbu	r5, r8, r5
100020b8:	e0810026 	lbui	r4, r1, 38
100020bc:	8accb000 	xor	r22, r12, r22
100020c0:	e2610024 	lbui	r19, r1, 36
100020c4:	e1810028 	lbui	r12, r1, 40
100020c8:	897b5800 	xor	r11, r27, r11
100020cc:	88fe3800 	xor	r7, r30, r7
100020d0:	8af8b800 	xor	r23, r24, r23
100020d4:	88862000 	xor	r4, r6, r4
100020d8:	f0a1005b 	sbi	r5, r1, 91
100020dc:	a6f700ff 	andi	r23, r23, 255
100020e0:	a56b00ff 	andi	r11, r11, 255
100020e4:	a4e700ff 	andi	r7, r7, 255
100020e8:	c3a81800 	lbu	r29, r8, r3
100020ec:	8a799800 	xor	r19, r25, r19
100020f0:	8b5a6000 	xor	r26, r26, r12
100020f4:	e361005f 	lbui	r27, r1, 95
100020f8:	e1210025 	lbui	r9, r1, 37
100020fc:	e1010029 	lbui	r8, r1, 41
10002100:	e0a10022 	lbui	r5, r1, 34
10002104:	fae10050 	swi	r23, r1, 80
10002108:	f961002c 	swi	r11, r1, 44
1000210c:	f8e10054 	swi	r7, r1, 84
10002110:	e061002a 	lbui	r3, r1, 42
10002114:	a56a00ff 	andi	r11, r10, 255
10002118:	a54400ff 	andi	r10, r4, 255
1000211c:	e081005b 	lbui	r4, r1, 91
	 	
    i++;
  }
}

void Cipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
10002120:	e8e10034 	lwi	r7, r1, 52

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002124:	a4d300ff 	andi	r6, r19, 255
10002128:	a67a00ff 	andi	r19, r26, 255
1000212c:	eb410054 	lwi	r26, r1, 84
10002130:	88641800 	xor	r3, r4, r3
10002134:	893c4800 	xor	r9, r28, r9
10002138:	e8810038 	lwi	r4, r1, 56
	 	
    i++;
  }
}

void Cipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
1000213c:	1787f800 	rsubk	r28, r7, r31

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002140:	f341001e 	sbi	r26, r1, 30
10002144:	e8e1003c 	lwi	r7, r1, 60
10002148:	a74300ff 	andi	r26, r3, 255
1000214c:	e8610030 	lwi	r3, r1, 48
10002150:	a58900ff 	andi	r12, r9, 255
10002154:	e921002c 	lwi	r9, r1, 44
10002158:	c323e000 	lbu	r25, r3, r28
1000215c:	891d4000 	xor	r8, r29, r8
10002160:	88bb2800 	xor	r5, r27, r5
10002164:	c3a4e000 	lbu	r29, r4, r28
10002168:	c387e000 	lbu	r28, r7, r28
1000216c:	e0e1001f 	lbui	r7, r1, 31
10002170:	e3df0000 	lbui	r30, r31, 0
10002174:	a76500ff 	andi	r27, r5, 255
10002178:	f121001d 	sbi	r9, r1, 29
1000217c:	e0a10023 	lbui	r5, r1, 35
  }

  /* KERNEL */
  AddRoundKey(state,w,0);

  for(i=1;i<Nr;i++)
10002180:	e921004c 	lwi	r9, r1, 76

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002184:	e0810027 	lbui	r4, r1, 39
10002188:	e061002b 	lbui	r3, r1, 43
1000218c:	8b393800 	xor	r25, r25, r7
10002190:	88be2800 	xor	r5, r30, r5
  }

  /* KERNEL */
  AddRoundKey(state,w,0);

  for(i=1;i<Nr;i++)
10002194:	31290001 	addik	r9, r9, 1

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002198:	a6d600ff 	andi	r22, r22, 255
1000219c:	a50800ff 	andi	r8, r8, 255
100021a0:	a73900ff 	andi	r25, r25, 255
100021a4:	887c1800 	xor	r3, r28, r3
100021a8:	889d2000 	xor	r4, r29, r4
100021ac:	f2e1001c 	sbi	r23, r1, 28
100021b0:	f2c10020 	sbi	r22, r1, 32
100021b4:	f0c10024 	sbi	r6, r1, 36
100021b8:	f2610028 	sbi	r19, r1, 40
100021bc:	f1610021 	sbi	r11, r1, 33
100021c0:	f1810025 	sbi	r12, r1, 37
100021c4:	f1010029 	sbi	r8, r1, 41
100021c8:	f3610022 	sbi	r27, r1, 34
100021cc:	f1410026 	sbi	r10, r1, 38
100021d0:	f341002a 	sbi	r26, r1, 42
100021d4:	a4a500ff 	andi	r5, r5, 255
  }

  /* KERNEL */
  AddRoundKey(state,w,0);

  for(i=1;i<Nr;i++)
100021d8:	f921004c 	swi	r9, r1, 76

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
100021dc:	f321001f 	sbi	r25, r1, 31
100021e0:	f0a10023 	sbi	r5, r1, 35
100021e4:	a7a400ff 	andi	r29, r4, 255
100021e8:	a7c300ff 	andi	r30, r3, 255
  }

  /* KERNEL */
  AddRoundKey(state,w,0);

  for(i=1;i<Nr;i++)
100021ec:	e8810048 	lwi	r4, r1, 72
100021f0:	e8610040 	lwi	r3, r1, 64
100021f4:	e8e10044 	lwi	r7, r1, 68
100021f8:	30840004 	addik	r4, r4, 4
100021fc:	30630004 	addik	r3, r3, 4
10002200:	30e70004 	addik	r7, r7, 4

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002204:	f3a10027 	sbi	r29, r1, 39
10002208:	f3c1002b 	sbi	r30, r1, 43
  }

  /* KERNEL */
  AddRoundKey(state,w,0);

  for(i=1;i<Nr;i++)
1000220c:	ab89000a 	xori	r28, r9, 10
10002210:	f8610040 	swi	r3, r1, 64
10002214:	f8810048 	swi	r4, r1, 72
10002218:	f8e10044 	swi	r7, r1, 68
1000221c:	be3cfd50 	bneid	r28, -688		// 10001f6c
10002220:	33ff0004 	addik	r31, r31, 4

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = Sbox[state[j][i]];
10002224:	e361001d 	lbui	r27, r1, 29
10002228:	e341001e 	lbui	r26, r1, 30
1000222c:	e3010029 	lbui	r24, r1, 41
10002230:	a47300ff 	andi	r3, r19, 255
10002234:	a48c00ff 	andi	r4, r12, 255
10002238:	a79700ff 	andi	r28, r23, 255
1000223c:	e1810023 	lbui	r12, r1, 35
10002240:	e2e10022 	lbui	r23, r1, 34
10002244:	b0001000 	imm	4096
10002248:	e0633d54 	lbui	r3, r3, 15700
1000224c:	e261002a 	lbui	r19, r1, 42
10002250:	a51600ff 	andi	r8, r22, 255
10002254:	a4a600ff 	andi	r5, r6, 255
10002258:	a73900ff 	andi	r25, r25, 255
1000225c:	a52b00ff 	andi	r9, r11, 255
10002260:	a6ca00ff 	andi	r22, r10, 255
10002264:	a57d00ff 	andi	r11, r29, 255
10002268:	b0001000 	imm	4096
1000226c:	e0f93d54 	lbui	r7, r25, 15700
10002270:	b0001000 	imm	4096
10002274:	e0cc3d54 	lbui	r6, r12, 15700
10002278:	b0001000 	imm	4096
1000227c:	e1083d54 	lbui	r8, r8, 15700
10002280:	b0001000 	imm	4096
10002284:	e0a53d54 	lbui	r5, r5, 15700
10002288:	a55e00ff 	andi	r10, r30, 255
1000228c:	b0001000 	imm	4096
10002290:	e39c3d54 	lbui	r28, r28, 15700
10002294:	b0001000 	imm	4096
10002298:	e3d83d54 	lbui	r30, r24, 15700
1000229c:	b0001000 	imm	4096
100022a0:	e37b3d54 	lbui	r27, r27, 15700
100022a4:	b0001000 	imm	4096
100022a8:	e35a3d54 	lbui	r26, r26, 15700
100022ac:	b0001000 	imm	4096
100022b0:	e2f73d54 	lbui	r23, r23, 15700
100022b4:	b0001000 	imm	4096
100022b8:	e2d63d54 	lbui	r22, r22, 15700
100022bc:	b0001000 	imm	4096
100022c0:	e30b3d54 	lbui	r24, r11, 15700
100022c4:	b0001000 	imm	4096
100022c8:	e1693d54 	lbui	r11, r9, 15700
100022cc:	ebe10030 	lwi	r31, r1, 48
100022d0:	b0001000 	imm	4096
100022d4:	e0843d54 	lbui	r4, r4, 15700
100022d8:	b0001000 	imm	4096
100022dc:	e3b33d54 	lbui	r29, r19, 15700
100022e0:	b0001000 	imm	4096
100022e4:	e18a3d54 	lbui	r12, r10, 15700
  buf         = state[2][1];
  state[2][1] = state[2][3];
  state[2][3] = buf;

  /* << 3 */
  buf         = state[3][0];
100022e8:	13230000 	addk	r25, r3, r0

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = Sbox[state[j][i]];
100022ec:	f381001c 	sbi	r28, r1, 28
100022f0:	f361001d 	sbi	r27, r1, 29
100022f4:	f341001e 	sbi	r26, r1, 30
100022f8:	f0e1001f 	sbi	r7, r1, 31
{
  sb_uint8_t buf;

  /* << 1 */
  buf         = state[1][0];
  state[1][0] = state[1][1];
100022fc:	f1610020 	sbi	r11, r1, 32
  state[1][1] = state[1][2];
10002300:	f2e10021 	sbi	r23, r1, 33
  state[1][2] = state[1][3];
10002304:	f0c10022 	sbi	r6, r1, 34
  state[1][3] = buf;
10002308:	f1010023 	sbi	r8, r1, 35

  /* << 2 */
  buf         = state[2][0];
  state[2][0] = state[2][2];
1000230c:	f2c10024 	sbi	r22, r1, 36
  state[2][2] = buf;
10002310:	f0a10026 	sbi	r5, r1, 38
  buf         = state[2][1];
  state[2][1] = state[2][3];
10002314:	f3010025 	sbi	r24, r1, 37
  /* << 3 */
  buf         = state[3][0];
  state[3][0] = state[3][3];
  state[3][3] = state[3][2];
  state[3][2] = state[3][1];
  state[3][1] = buf;
10002318:	a47f0003 	andi	r3, r31, 3
  buf         = state[2][0];
  state[2][0] = state[2][2];
  state[2][2] = buf;
  buf         = state[2][1];
  state[2][1] = state[2][3];
  state[2][3] = buf;
1000231c:	f0810027 	sbi	r4, r1, 39

  /* << 3 */
  buf         = state[3][0];
  state[3][0] = state[3][3];
10002320:	f1810028 	sbi	r12, r1, 40
  state[3][3] = state[3][2];
10002324:	f3a1002b 	sbi	r29, r1, 43
  state[3][2] = state[3][1];
10002328:	f3c1002a 	sbi	r30, r1, 42
  state[3][1] = buf;
1000232c:	be2301c8 	bneid	r3, 456		// 100024f4
10002330:	f3210029 	sbi	r25, r1, 41

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002334:	e91f0028 	lwi	r8, r31, 40
10002338:	e8e1001c 	lwi	r7, r1, 28
1000233c:	e8bf0054 	lwi	r5, r31, 84
10002340:	e89f0080 	lwi	r4, r31, 128
10002344:	88e83800 	xor	r7, r8, r7
10002348:	e9010020 	lwi	r8, r1, 32
1000234c:	e87f00ac 	lwi	r3, r31, 172
10002350:	f8e1001c 	swi	r7, r1, 28
10002354:	88a54000 	xor	r5, r5, r8
10002358:	e9010024 	lwi	r8, r1, 36
1000235c:	f8a10020 	swi	r5, r1, 32
10002360:	88844000 	xor	r4, r4, r8
10002364:	e9010028 	lwi	r8, r1, 40
10002368:	f8810024 	swi	r4, r1, 36
1000236c:	88634000 	xor	r3, r3, r8
10002370:	f8610028 	swi	r3, r1, 40
  /* EPILOGUE */	
  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      dat_o[i*Nb+j] = state[j][i];
10002374:	e9210094 	lwi	r9, r1, 148
10002378:	e341001c 	lbui	r26, r1, 28
1000237c:	e3610020 	lbui	r27, r1, 32
10002380:	e0610024 	lbui	r3, r1, 36
10002384:	e0810028 	lbui	r4, r1, 40
10002388:	e0a1001d 	lbui	r5, r1, 29
1000238c:	e0c10021 	lbui	r6, r1, 33
10002390:	e0e10025 	lbui	r7, r1, 37
10002394:	e1010029 	lbui	r8, r1, 41
10002398:	f3490000 	sbi	r26, r9, 0
1000239c:	f3690001 	sbi	r27, r9, 1
100023a0:	f0690002 	sbi	r3, r9, 2
100023a4:	f0890003 	sbi	r4, r9, 3
100023a8:	f0a90004 	sbi	r5, r9, 4
100023ac:	f0c90005 	sbi	r6, r9, 5
100023b0:	f0e90006 	sbi	r7, r9, 6
100023b4:	f1090007 	sbi	r8, r9, 7
100023b8:	e341001e 	lbui	r26, r1, 30
100023bc:	e3610022 	lbui	r27, r1, 34
100023c0:	e0610026 	lbui	r3, r1, 38
100023c4:	e081002a 	lbui	r4, r1, 42
100023c8:	e0a1001f 	lbui	r5, r1, 31
100023cc:	e0c10023 	lbui	r6, r1, 35
100023d0:	e0e10027 	lbui	r7, r1, 39
100023d4:	e101002b 	lbui	r8, r1, 43
100023d8:	f3490008 	sbi	r26, r9, 8
100023dc:	f3690009 	sbi	r27, r9, 9
100023e0:	f069000a 	sbi	r3, r9, 10
100023e4:	f089000b 	sbi	r4, r9, 11
100023e8:	f0a9000c 	sbi	r5, r9, 12
100023ec:	f0c9000d 	sbi	r6, r9, 13
100023f0:	f0e9000e 	sbi	r7, r9, 14
100023f4:	f109000f 	sbi	r8, r9, 15
    }	
  }
}
100023f8:	e9e10000 	lwi	r15, r1, 0
100023fc:	ea610060 	lwi	r19, r1, 96
10002400:	eac10064 	lwi	r22, r1, 100
10002404:	eae10068 	lwi	r23, r1, 104
10002408:	eb01006c 	lwi	r24, r1, 108
1000240c:	eb210070 	lwi	r25, r1, 112
10002410:	eb410074 	lwi	r26, r1, 116
10002414:	eb610078 	lwi	r27, r1, 120
10002418:	eb81007c 	lwi	r28, r1, 124
1000241c:	eba10080 	lwi	r29, r1, 128
10002420:	ebc10084 	lwi	r30, r1, 132
10002424:	ebe10088 	lwi	r31, r1, 136
10002428:	b60f0008 	rtsd	r15, 8
1000242c:	3021008c 	addik	r1, r1, 140

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002430:	e07f0000 	lbui	r3, r31, 0
10002434:	e0bf002f 	lbui	r5, r31, 47
10002438:	e3df0003 	lbui	r30, r31, 3
1000243c:	89435000 	xor	r10, r3, r10
10002440:	e07f002c 	lbui	r3, r31, 44
10002444:	88a5d800 	xor	r5, r5, r27
10002448:	e3bf005b 	lbui	r29, r31, 91
1000244c:	89635800 	xor	r11, r3, r11
10002450:	e07f0058 	lbui	r3, r31, 88
10002454:	e37f0087 	lbui	r27, r31, 135
10002458:	88de3000 	xor	r6, r30, r6
1000245c:	89836000 	xor	r12, r3, r12
10002460:	e07f0084 	lbui	r3, r31, 132
10002464:	889d2000 	xor	r4, r29, r4
10002468:	f141001c 	sbi	r10, r1, 28
1000246c:	8a639800 	xor	r19, r3, r19
10002470:	e07f0001 	lbui	r3, r31, 1
10002474:	f1610020 	sbi	r11, r1, 32
10002478:	f1810024 	sbi	r12, r1, 36
1000247c:	8ae3b800 	xor	r23, r3, r23
10002480:	e07f002d 	lbui	r3, r31, 45
10002484:	f2610028 	sbi	r19, r1, 40
10002488:	f2e1001d 	sbi	r23, r1, 29
1000248c:	8b03c000 	xor	r24, r3, r24
10002490:	e07f0059 	lbui	r3, r31, 89
10002494:	f3010021 	sbi	r24, r1, 33
10002498:	f0c1001f 	sbi	r6, r1, 31
1000249c:	8b23c800 	xor	r25, r3, r25
100024a0:	e07f0085 	lbui	r3, r31, 133
100024a4:	f3210025 	sbi	r25, r1, 37
100024a8:	f0a10023 	sbi	r5, r1, 35
100024ac:	8b43d000 	xor	r26, r3, r26
100024b0:	e07f0002 	lbui	r3, r31, 2
100024b4:	f3410029 	sbi	r26, r1, 41
100024b8:	f0810027 	sbi	r4, r1, 39
100024bc:	8ac3b000 	xor	r22, r3, r22
100024c0:	e07f002e 	lbui	r3, r31, 46
100024c4:	f2c1001e 	sbi	r22, r1, 30
100024c8:	89234800 	xor	r9, r3, r9
100024cc:	e07f005a 	lbui	r3, r31, 90
100024d0:	f1210022 	sbi	r9, r1, 34
100024d4:	89034000 	xor	r8, r3, r8
100024d8:	e07f0086 	lbui	r3, r31, 134
100024dc:	f1010026 	sbi	r8, r1, 38
100024e0:	88e33800 	xor	r7, r3, r7
100024e4:	887be000 	xor	r3, r27, r28
100024e8:	f0e1002a 	sbi	r7, r1, 42
100024ec:	b810f9f8 	brid	-1544		// 10001ee4
100024f0:	f061002b 	sbi	r3, r1, 43
100024f4:	e07f00ac 	lbui	r3, r31, 172
100024f8:	e13f0028 	lbui	r9, r31, 40
100024fc:	e27f0080 	lbui	r19, r31, 128
10002500:	f0610037 	sbi	r3, r1, 55
10002504:	e07f0029 	lbui	r3, r31, 41
10002508:	8b89e000 	xor	r28, r9, r28
1000250c:	e1210037 	lbui	r9, r1, 55
10002510:	f061003b 	sbi	r3, r1, 59
10002514:	e07f0055 	lbui	r3, r31, 85
10002518:	89896000 	xor	r12, r9, r12
1000251c:	e121003b 	lbui	r9, r1, 59
10002520:	f061003f 	sbi	r3, r1, 63
10002524:	e07f0081 	lbui	r3, r31, 129
10002528:	8b69d800 	xor	r27, r9, r27
1000252c:	e121003f 	lbui	r9, r1, 63
10002530:	f0610033 	sbi	r3, r1, 51
10002534:	e07f00ad 	lbui	r3, r31, 173
10002538:	8ae9b800 	xor	r23, r9, r23
1000253c:	e1210033 	lbui	r9, r1, 51
10002540:	f0610043 	sbi	r3, r1, 67
10002544:	e07f002a 	lbui	r3, r31, 42
10002548:	8b09c000 	xor	r24, r9, r24
1000254c:	e1210043 	lbui	r9, r1, 67
10002550:	f0610047 	sbi	r3, r1, 71
10002554:	e07f0056 	lbui	r3, r31, 86
10002558:	8b29c800 	xor	r25, r9, r25
1000255c:	e1210047 	lbui	r9, r1, 71
10002560:	f061004b 	sbi	r3, r1, 75
10002564:	e07f0082 	lbui	r3, r31, 130
10002568:	8ad3b000 	xor	r22, r19, r22
1000256c:	8a69d000 	xor	r19, r9, r26
10002570:	f061004f 	sbi	r3, r1, 79
10002574:	e07f00ae 	lbui	r3, r31, 174
10002578:	e341004b 	lbui	r26, r1, 75
1000257c:	e15f0054 	lbui	r10, r31, 84
10002580:	f061002f 	sbi	r3, r1, 47
10002584:	e07f002b 	lbui	r3, r31, 43
10002588:	e121004f 	lbui	r9, r1, 79
1000258c:	88da3000 	xor	r6, r26, r6
10002590:	f0610053 	sbi	r3, r1, 83
10002594:	e07f0057 	lbui	r3, r31, 87
10002598:	e341002f 	lbui	r26, r1, 47
1000259c:	896a5800 	xor	r11, r10, r11
100025a0:	f0610057 	sbi	r3, r1, 87
100025a4:	e07f0083 	lbui	r3, r31, 131
100025a8:	89492800 	xor	r10, r9, r5
100025ac:	e0a10053 	lbui	r5, r1, 83
100025b0:	893af000 	xor	r9, r26, r30
100025b4:	e3410057 	lbui	r26, r1, 87
100025b8:	f061005b 	sbi	r3, r1, 91
100025bc:	88e53800 	xor	r7, r5, r7
100025c0:	e07f00af 	lbui	r3, r31, 175
100025c4:	88ba4000 	xor	r5, r26, r8
100025c8:	e101005b 	lbui	r8, r1, 91
100025cc:	8863e800 	xor	r3, r3, r29
100025d0:	f381001c 	sbi	r28, r1, 28
100025d4:	88882000 	xor	r4, r8, r4
100025d8:	f1610020 	sbi	r11, r1, 32
100025dc:	f2c10024 	sbi	r22, r1, 36
100025e0:	f1810028 	sbi	r12, r1, 40
100025e4:	f361001d 	sbi	r27, r1, 29
100025e8:	f2e10021 	sbi	r23, r1, 33
100025ec:	f3010025 	sbi	r24, r1, 37
100025f0:	f3210029 	sbi	r25, r1, 41
100025f4:	f261001e 	sbi	r19, r1, 30
100025f8:	f0c10022 	sbi	r6, r1, 34
100025fc:	f1410026 	sbi	r10, r1, 38
10002600:	f121002a 	sbi	r9, r1, 42
10002604:	f0e1001f 	sbi	r7, r1, 31
10002608:	f0a10023 	sbi	r5, r1, 35
1000260c:	f0810027 	sbi	r4, r1, 39
10002610:	b810fd64 	brid	-668		// 10002374
10002614:	f061002b 	sbi	r3, r1, 43

10002618 <InvSubBytes>:
    }	
  }
}

void InvSubBytes(sb_uint8_t state[4][Nb])
{
10002618:	3021ffec 	addik	r1, r1, -20

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
1000261c:	b0001000 	imm	4096
10002620:	30603e54 	addik	r3, r0, 15956	// 10003e54 <InvSbox>
10002624:	e1850001 	lbui	r12, r5, 1
10002628:	e1650005 	lbui	r11, r5, 5
1000262c:	e1450009 	lbui	r10, r5, 9
10002630:	e125000d 	lbui	r9, r5, 13
    }	
  }
}

void InvSubBytes(sb_uint8_t state[4][Nb])
{
10002634:	fa610004 	swi	r19, r1, 4
10002638:	fac10008 	swi	r22, r1, 8

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
1000263c:	e265000c 	lbui	r19, r5, 12
10002640:	e2c50008 	lbui	r22, r5, 8
    }	
  }
}

void InvSubBytes(sb_uint8_t state[4][Nb])
{
10002644:	fae1000c 	swi	r23, r1, 12
10002648:	fb010010 	swi	r24, r1, 16

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
1000264c:	e2e50004 	lbui	r23, r5, 4
10002650:	e3050000 	lbui	r24, r5, 0
10002654:	e1050002 	lbui	r8, r5, 2
10002658:	c2f71800 	lbu	r23, r23, r3
1000265c:	c3181800 	lbu	r24, r24, r3
10002660:	c2d61800 	lbu	r22, r22, r3
10002664:	c2731800 	lbu	r19, r19, r3
10002668:	c18c1800 	lbu	r12, r12, r3
1000266c:	c16b1800 	lbu	r11, r11, r3
10002670:	c14a1800 	lbu	r10, r10, r3
10002674:	c1291800 	lbu	r9, r9, r3
10002678:	e0e50006 	lbui	r7, r5, 6
1000267c:	e0c5000a 	lbui	r6, r5, 10
10002680:	e085000e 	lbui	r4, r5, 14
10002684:	c1081800 	lbu	r8, r8, r3
10002688:	f3050000 	sbi	r24, r5, 0
1000268c:	f2e50004 	sbi	r23, r5, 4
10002690:	f2c50008 	sbi	r22, r5, 8
10002694:	f265000c 	sbi	r19, r5, 12
10002698:	f1850001 	sbi	r12, r5, 1
1000269c:	f1650005 	sbi	r11, r5, 5
100026a0:	f1450009 	sbi	r10, r5, 9
100026a4:	f125000d 	sbi	r9, r5, 13
100026a8:	f1050002 	sbi	r8, r5, 2
100026ac:	c0e71800 	lbu	r7, r7, r3
100026b0:	c0c61800 	lbu	r6, r6, r3
100026b4:	c0841800 	lbu	r4, r4, r3
100026b8:	e1050003 	lbui	r8, r5, 3
100026bc:	f0e50006 	sbi	r7, r5, 6
100026c0:	f0c5000a 	sbi	r6, r5, 10
100026c4:	e0e50007 	lbui	r7, r5, 7
100026c8:	e0c5000b 	lbui	r6, r5, 11
100026cc:	f085000e 	sbi	r4, r5, 14
100026d0:	e085000f 	lbui	r4, r5, 15
100026d4:	c1081800 	lbu	r8, r8, r3
100026d8:	c0e71800 	lbu	r7, r7, r3
100026dc:	c0c61800 	lbu	r6, r6, r3
100026e0:	c0841800 	lbu	r4, r4, r3
    }
  }
}
100026e4:	ea610004 	lwi	r19, r1, 4
100026e8:	eac10008 	lwi	r22, r1, 8
100026ec:	eae1000c 	lwi	r23, r1, 12
100026f0:	eb010010 	lwi	r24, r1, 16

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
100026f4:	f1050003 	sbi	r8, r5, 3
100026f8:	f0e50007 	sbi	r7, r5, 7
100026fc:	f0c5000b 	sbi	r6, r5, 11
10002700:	f085000f 	sbi	r4, r5, 15
    }
  }
}
10002704:	b60f0008 	rtsd	r15, 8
10002708:	30210014 	addik	r1, r1, 20

1000270c <InvShiftRows>:
{
  sb_uint8_t buf;

  /* >> 1 */
  buf         = state[1][3];
  state[1][3] = state[1][2];
1000270c:	e1050006 	lbui	r8, r5, 6
void InvShiftRows(sb_uint8_t state[4][Nb])
{
  sb_uint8_t buf;

  /* >> 1 */
  buf         = state[1][3];
10002710:	e0e50007 	lbui	r7, r5, 7
  state[1][2] = state[1][1];
  state[1][1] = state[1][0];
  state[1][0] = buf;

  /* >> 2 */
  buf         = state[2][2];
10002714:	e0c5000a 	lbui	r6, r5, 10
{
  sb_uint8_t buf;

  /* >> 1 */
  buf         = state[1][3];
  state[1][3] = state[1][2];
10002718:	f1050007 	sbi	r8, r5, 7
  state[1][1] = state[1][0];
  state[1][0] = buf;

  /* >> 2 */
  buf         = state[2][2];
  state[2][2] = state[2][0];
1000271c:	e1050008 	lbui	r8, r5, 8
  state[2][0] = buf;
  buf         = state[2][1];
10002720:	e0850009 	lbui	r4, r5, 9
  state[2][1] = state[2][3];
  state[2][3] = buf;

  /* >> 3 */
  buf         = state[3][1];
10002724:	e065000d 	lbui	r3, r5, 13
  state[1][1] = state[1][0];
  state[1][0] = buf;

  /* >> 2 */
  buf         = state[2][2];
  state[2][2] = state[2][0];
10002728:	f105000a 	sbi	r8, r5, 10
  sb_uint8_t buf;

  /* >> 1 */
  buf         = state[1][3];
  state[1][3] = state[1][2];
  state[1][2] = state[1][1];
1000272c:	e1050005 	lbui	r8, r5, 5
  state[1][0] = buf;

  /* >> 2 */
  buf         = state[2][2];
  state[2][2] = state[2][0];
  state[2][0] = buf;
10002730:	f0c50008 	sbi	r6, r5, 8
  sb_uint8_t buf;

  /* >> 1 */
  buf         = state[1][3];
  state[1][3] = state[1][2];
  state[1][2] = state[1][1];
10002734:	f1050006 	sbi	r8, r5, 6
  /* >> 2 */
  buf         = state[2][2];
  state[2][2] = state[2][0];
  state[2][0] = buf;
  buf         = state[2][1];
  state[2][1] = state[2][3];
10002738:	e105000b 	lbui	r8, r5, 11
  state[2][3] = buf;
1000273c:	f085000b 	sbi	r4, r5, 11
  /* >> 2 */
  buf         = state[2][2];
  state[2][2] = state[2][0];
  state[2][0] = buf;
  buf         = state[2][1];
  state[2][1] = state[2][3];
10002740:	f1050009 	sbi	r8, r5, 9

  /* >> 1 */
  buf         = state[1][3];
  state[1][3] = state[1][2];
  state[1][2] = state[1][1];
  state[1][1] = state[1][0];
10002744:	e1050004 	lbui	r8, r5, 4
  state[1][0] = buf;
10002748:	f0e50004 	sbi	r7, r5, 4
  state[2][3] = buf;

  /* >> 3 */
  buf         = state[3][1];
  state[3][1] = state[3][2];
  state[3][2] = state[3][3];
1000274c:	e0e5000f 	lbui	r7, r5, 15

  /* >> 1 */
  buf         = state[1][3];
  state[1][3] = state[1][2];
  state[1][2] = state[1][1];
  state[1][1] = state[1][0];
10002750:	f1050005 	sbi	r8, r5, 5
  state[2][1] = state[2][3];
  state[2][3] = buf;

  /* >> 3 */
  buf         = state[3][1];
  state[3][1] = state[3][2];
10002754:	e105000e 	lbui	r8, r5, 14
  state[3][2] = state[3][3];
10002758:	f0e5000e 	sbi	r7, r5, 14
  state[2][1] = state[2][3];
  state[2][3] = buf;

  /* >> 3 */
  buf         = state[3][1];
  state[3][1] = state[3][2];
1000275c:	f105000d 	sbi	r8, r5, 13
  state[3][2] = state[3][3];
  state[3][3] = state[3][0];
10002760:	e105000c 	lbui	r8, r5, 12
  state[3][0] = buf;
10002764:	f065000c 	sbi	r3, r5, 12
}
10002768:	b60f0008 	rtsd	r15, 8
1000276c:	f105000f 	sbi	r8, r5, 15

10002770 <InvMixColumns>:

void InvMixColumns(sb_uint8_t state[4][Nb])
{
10002770:	3021ffb0 	addik	r1, r1, -80
10002774:	f8a10054 	swi	r5, r1, 84
10002778:	fbe1004c 	swi	r31, r1, 76
1000277c:	ebe10054 	lwi	r31, r1, 84
  sb_int32_t i;
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
10002780:	10a00000 	addk	r5, r0, r0
  state[3][3] = state[3][0];
  state[3][0] = buf;
}

void InvMixColumns(sb_uint8_t state[4][Nb])
{
10002784:	fa610024 	swi	r19, r1, 36
10002788:	309f0008 	addik	r4, r31, 8
1000278c:	307f0004 	addik	r3, r31, 4
10002790:	f881001c 	swi	r4, r1, 28
10002794:	109f0000 	addk	r4, r31, r0
10002798:	f8610018 	swi	r3, r1, 24
1000279c:	307f000c 	addik	r3, r31, 12
100027a0:	fac10028 	swi	r22, r1, 40
100027a4:	fae1002c 	swi	r23, r1, 44
100027a8:	fb010030 	swi	r24, r1, 48
100027ac:	fb210034 	swi	r25, r1, 52
100027b0:	fb410038 	swi	r26, r1, 56
100027b4:	fb61003c 	swi	r27, r1, 60
100027b8:	fb810040 	swi	r28, r1, 64
100027bc:	fba10044 	swi	r29, r1, 68
100027c0:	fbc10048 	swi	r30, r1, 72
100027c4:	f8610020 	swi	r3, r1, 32
100027c8:	f8a10014 	swi	r5, r1, 20
100027cc:	fbe10010 	swi	r31, r1, 16
  state[3][2] = state[3][3];
  state[3][3] = state[3][0];
  state[3][0] = buf;
}

void InvMixColumns(sb_uint8_t state[4][Nb])
100027d0:	e8a10054 	lwi	r5, r1, 84
  sb_int32_t i;
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
100027d4:	e3a40000 	lbui	r29, r4, 0
    buf1 = state[1][i];
100027d8:	e8610018 	lwi	r3, r1, 24
  state[3][2] = state[3][3];
  state[3][3] = state[3][0];
  state[3][0] = buf;
}

void InvMixColumns(sb_uint8_t state[4][Nb])
100027dc:	17c52000 	rsubk	r30, r5, r4

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
100027e0:	e8a1001c 	lwi	r5, r1, 28
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
100027e4:	c363f000 	lbu	r27, r3, r30
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
100027e8:	107de800 	addk	r3, r29, r29

  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
100027ec:	c185f000 	lbu	r12, r5, r30
    buf3 = state[3][i];
100027f0:	e8a10020 	lwi	r5, r1, 32
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
100027f4:	a46300ff 	andi	r3, r3, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
100027f8:	a49dff80 	andi	r4, r29, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
100027fc:	f8610004 	swi	r3, r1, 4
  for(i=0;i<4;i++)
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
10002800:	c265f000 	lbu	r19, r5, r30
    sign_a = (a_buf & 0x80);
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
10002804:	be040010 	beqid	r4, 16		// 10002814
10002808:	a8c3001b 	xori	r6, r3, 27
1000280c:	10660000 	addk	r3, r6, r0
10002810:	f8c10004 	swi	r6, r1, 4
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
10002814:	e8a10004 	lwi	r5, r1, 4
    a_buf <<= 1;
10002818:	10831800 	addk	r4, r3, r3
1000281c:	a46400ff 	andi	r3, r4, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
10002820:	a485ff80 	andi	r4, r5, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
10002824:	a8e3001b 	xori	r7, r3, 27
10002828:	be04000c 	beqid	r4, 12		// 10002834
1000282c:	10c30000 	addk	r6, r3, r0
10002830:	10c70000 	addk	r6, r7, r0
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
10002834:	10863000 	addk	r4, r6, r6
10002838:	a46400ff 	andi	r3, r4, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
1000283c:	a506ff80 	andi	r8, r6, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
10002840:	f8610008 	swi	r3, r1, 8
10002844:	be08000c 	beqid	r8, 12		// 10002850
10002848:	a923001b 	xori	r9, r3, 27
1000284c:	f9210008 	swi	r9, r1, 8
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
10002850:	111bd800 	addk	r8, r27, r27
10002854:	a46800ff 	andi	r3, r8, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
10002858:	a53bff80 	andi	r9, r27, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
1000285c:	a943001b 	xori	r10, r3, 27
10002860:	be09000c 	beqid	r9, 12		// 1000286c
10002864:	13830000 	addk	r28, r3, r0
10002868:	138a0000 	addk	r28, r10, r0
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
1000286c:	113ce000 	addk	r9, r28, r28
10002870:	a46900ff 	andi	r3, r9, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
10002874:	a53cff80 	andi	r9, r28, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
10002878:	aac3001b 	xori	r22, r3, 27
1000287c:	be09000c 	beqid	r9, 12		// 10002888
10002880:	13e30000 	addk	r31, r3, r0
10002884:	13f60000 	addk	r31, r22, r0
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
10002888:	113ff800 	addk	r9, r31, r31
1000288c:	a46900ff 	andi	r3, r9, 255

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
10002890:	f861000c 	swi	r3, r1, 12
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
10002894:	a53fff80 	andi	r9, r31, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
10002898:	be09000c 	beqid	r9, 12		// 100028a4
1000289c:	aac3001b 	xori	r22, r3, 27
100028a0:	fac1000c 	swi	r22, r1, 12
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
100028a4:	112c6000 	addk	r9, r12, r12
100028a8:	a46900ff 	andi	r3, r9, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
100028ac:	a52cff80 	andi	r9, r12, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
100028b0:	aac3001b 	xori	r22, r3, 27
100028b4:	be09000c 	beqid	r9, 12		// 100028c0
100028b8:	10a30000 	addk	r5, r3, r0
100028bc:	10b60000 	addk	r5, r22, r0
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
100028c0:	11252800 	addk	r9, r5, r5
100028c4:	a46900ff 	andi	r3, r9, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
100028c8:	a525ff80 	andi	r9, r5, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
100028cc:	aac3001b 	xori	r22, r3, 27
100028d0:	be09000c 	beqid	r9, 12		// 100028dc
100028d4:	10e30000 	addk	r7, r3, r0
100028d8:	10f60000 	addk	r7, r22, r0
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
100028dc:	11273800 	addk	r9, r7, r7
100028e0:	a48900ff 	andi	r4, r9, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
100028e4:	a6c7ff80 	andi	r22, r7, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
100028e8:	be16000c 	beqid	r22, 12		// 100028f4
100028ec:	aae4001b 	xori	r23, r4, 27
100028f0:	10970000 	addk	r4, r23, r0
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
100028f4:	11339800 	addk	r9, r19, r19
100028f8:	a56900ff 	andi	r11, r9, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
100028fc:	a6d3ff80 	andi	r22, r19, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
10002900:	be16000c 	beqid	r22, 12		// 1000290c
10002904:	aaeb001b 	xori	r23, r11, 27
10002908:	11770000 	addk	r11, r23, r0
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
1000290c:	12cb5800 	addk	r22, r11, r11
10002910:	a55600ff 	andi	r10, r22, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
10002914:	a6ebff80 	andi	r23, r11, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
10002918:	be17000c 	beqid	r23, 12		// 10002924
1000291c:	ab0a001b 	xori	r24, r10, 27
10002920:	11580000 	addk	r10, r24, r0
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
10002924:	12ca5000 	addk	r22, r10, r10
10002928:	a6f600ff 	andi	r23, r22, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
1000292c:	a70aff80 	andi	r24, r10, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
10002930:	ab37001b 	xori	r25, r23, 27
10002934:	be18000c 	beqid	r24, 12		// 10002940
10002938:	13570000 	addk	r26, r23, r0
1000293c:	13590000 	addk	r26, r25, r0

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
10002940:	e8610004 	lwi	r3, r1, 4
10002944:	8b0c9800 	xor	r24, r12, r19
10002948:	8accd800 	xor	r22, r12, r27
1000294c:	8b369800 	xor	r25, r22, r19
10002950:	8b7be800 	xor	r27, r27, r29
10002954:	891dc000 	xor	r8, r29, r24
10002958:	8ae3c800 	xor	r23, r3, r25
1000295c:	891c4000 	xor	r8, r28, r8
10002960:	8a7b9800 	xor	r19, r27, r19
10002964:	899b6000 	xor	r12, r27, r12
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = MultGF(buf0,0xE) ^ MultGF(buf1,0xB) ^ MultGF(buf2,0xD) ^ MultGF(buf3,0x9);
    state[1][i] = MultGF(buf0,0x9) ^ MultGF(buf1,0xE) ^ MultGF(buf2,0xB) ^ MultGF(buf3,0xD);
10002968:	89054000 	xor	r8, r5, r8

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
1000296c:	8a659800 	xor	r19, r5, r19
10002970:	89836000 	xor	r12, r3, r12
10002974:	e8a10008 	lwi	r5, r1, 8
10002978:	8b17e000 	xor	r24, r23, r28
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = MultGF(buf0,0xE) ^ MultGF(buf1,0xB) ^ MultGF(buf2,0xD) ^ MultGF(buf3,0x9);
1000297c:	e861000c 	lwi	r3, r1, 12
10002980:	8b06c000 	xor	r24, r6, r24
    state[1][i] = MultGF(buf0,0x9) ^ MultGF(buf1,0xE) ^ MultGF(buf2,0xB) ^ MultGF(buf3,0xD);
    state[2][i] = MultGF(buf0,0xD) ^ MultGF(buf1,0x9) ^ MultGF(buf2,0xE) ^ MultGF(buf3,0xB);
10002984:	8a6b9800 	xor	r19, r11, r19

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
10002988:	896b6000 	xor	r11, r11, r12
1000298c:	8927c000 	xor	r9, r7, r24
10002990:	891f4000 	xor	r8, r31, r8
10002994:	88c69800 	xor	r6, r6, r19
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = MultGF(buf0,0xE) ^ MultGF(buf1,0xB) ^ MultGF(buf2,0xD) ^ MultGF(buf3,0x9);
    state[1][i] = MultGF(buf0,0x9) ^ MultGF(buf1,0xE) ^ MultGF(buf2,0xB) ^ MultGF(buf3,0xD);
    state[2][i] = MultGF(buf0,0xD) ^ MultGF(buf1,0x9) ^ MultGF(buf2,0xE) ^ MultGF(buf3,0xB);
    state[3][i] = MultGF(buf0,0xB) ^ MultGF(buf1,0xD) ^ MultGF(buf2,0x9) ^ MultGF(buf3,0xE);
10002998:	897f5800 	xor	r11, r31, r11

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
1000299c:	89292800 	xor	r9, r9, r5
100029a0:	890a4000 	xor	r8, r10, r8
100029a4:	88c73000 	xor	r6, r7, r6
100029a8:	894a5800 	xor	r10, r10, r11
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = MultGF(buf0,0xE) ^ MultGF(buf1,0xB) ^ MultGF(buf2,0xD) ^ MultGF(buf3,0x9);
100029ac:	89234800 	xor	r9, r3, r9
    state[1][i] = MultGF(buf0,0x9) ^ MultGF(buf1,0xE) ^ MultGF(buf2,0xB) ^ MultGF(buf3,0xD);
100029b0:	89054000 	xor	r8, r5, r8
    state[2][i] = MultGF(buf0,0xD) ^ MultGF(buf1,0x9) ^ MultGF(buf2,0xE) ^ MultGF(buf3,0xB);
100029b4:	88c53000 	xor	r6, r5, r6
    state[3][i] = MultGF(buf0,0xB) ^ MultGF(buf1,0xD) ^ MultGF(buf2,0x9) ^ MultGF(buf3,0xE);
100029b8:	88e55000 	xor	r7, r5, r10
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = MultGF(buf0,0xE) ^ MultGF(buf1,0xB) ^ MultGF(buf2,0xD) ^ MultGF(buf3,0x9);
100029bc:	e8a10010 	lwi	r5, r1, 16

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
100029c0:	89244800 	xor	r9, r4, r9
100029c4:	89034000 	xor	r8, r3, r8
100029c8:	88c33000 	xor	r6, r3, r6
100029cc:	88e33800 	xor	r7, r3, r7
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = MultGF(buf0,0xE) ^ MultGF(buf1,0xB) ^ MultGF(buf2,0xD) ^ MultGF(buf3,0x9);
100029d0:	893a4800 	xor	r9, r26, r9
    state[1][i] = MultGF(buf0,0x9) ^ MultGF(buf1,0xE) ^ MultGF(buf2,0xB) ^ MultGF(buf3,0xD);
100029d4:	e8610018 	lwi	r3, r1, 24
  {
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = MultGF(buf0,0xE) ^ MultGF(buf1,0xB) ^ MultGF(buf2,0xD) ^ MultGF(buf3,0x9);
100029d8:	f1250000 	sbi	r9, r5, 0

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
100029dc:	89044000 	xor	r8, r4, r8
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = MultGF(buf0,0xE) ^ MultGF(buf1,0xB) ^ MultGF(buf2,0xD) ^ MultGF(buf3,0x9);
    state[1][i] = MultGF(buf0,0x9) ^ MultGF(buf1,0xE) ^ MultGF(buf2,0xB) ^ MultGF(buf3,0xD);
    state[2][i] = MultGF(buf0,0xD) ^ MultGF(buf1,0x9) ^ MultGF(buf2,0xE) ^ MultGF(buf3,0xB);
100029e0:	e8a1001c 	lwi	r5, r1, 28

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
100029e4:	88c43000 	xor	r6, r4, r6
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = MultGF(buf0,0xE) ^ MultGF(buf1,0xB) ^ MultGF(buf2,0xD) ^ MultGF(buf3,0x9);
    state[1][i] = MultGF(buf0,0x9) ^ MultGF(buf1,0xE) ^ MultGF(buf2,0xB) ^ MultGF(buf3,0xD);
100029e8:	891a4000 	xor	r8, r26, r8

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
100029ec:	88843800 	xor	r4, r4, r7
    buf0 = state[0][i];
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = MultGF(buf0,0xE) ^ MultGF(buf1,0xB) ^ MultGF(buf2,0xD) ^ MultGF(buf3,0x9);
    state[1][i] = MultGF(buf0,0x9) ^ MultGF(buf1,0xE) ^ MultGF(buf2,0xB) ^ MultGF(buf3,0xD);
100029f0:	d103f000 	sb	r8, r3, r30
    state[2][i] = MultGF(buf0,0xD) ^ MultGF(buf1,0x9) ^ MultGF(buf2,0xE) ^ MultGF(buf3,0xB);
100029f4:	88da3000 	xor	r6, r26, r6
    state[3][i] = MultGF(buf0,0xB) ^ MultGF(buf1,0xD) ^ MultGF(buf2,0x9) ^ MultGF(buf3,0xE);
100029f8:	887a2000 	xor	r3, r26, r4
void InvMixColumns(sb_uint8_t state[4][Nb])
{
  sb_int32_t i;
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
100029fc:	e8810014 	lwi	r4, r1, 20
    buf1 = state[1][i];
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = MultGF(buf0,0xE) ^ MultGF(buf1,0xB) ^ MultGF(buf2,0xD) ^ MultGF(buf3,0x9);
    state[1][i] = MultGF(buf0,0x9) ^ MultGF(buf1,0xE) ^ MultGF(buf2,0xB) ^ MultGF(buf3,0xD);
    state[2][i] = MultGF(buf0,0xD) ^ MultGF(buf1,0x9) ^ MultGF(buf2,0xE) ^ MultGF(buf3,0xB);
10002a00:	d0c5f000 	sb	r6, r5, r30
    state[3][i] = MultGF(buf0,0xB) ^ MultGF(buf1,0xD) ^ MultGF(buf2,0x9) ^ MultGF(buf3,0xE);
10002a04:	e8a10020 	lwi	r5, r1, 32
void InvMixColumns(sb_uint8_t state[4][Nb])
{
  sb_int32_t i;
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
10002a08:	30840001 	addik	r4, r4, 1
10002a0c:	f8810014 	swi	r4, r1, 20
    buf2 = state[2][i];
    buf3 = state[3][i];
    state[0][i] = MultGF(buf0,0xE) ^ MultGF(buf1,0xB) ^ MultGF(buf2,0xD) ^ MultGF(buf3,0x9);
    state[1][i] = MultGF(buf0,0x9) ^ MultGF(buf1,0xE) ^ MultGF(buf2,0xB) ^ MultGF(buf3,0xD);
    state[2][i] = MultGF(buf0,0xD) ^ MultGF(buf1,0x9) ^ MultGF(buf2,0xE) ^ MultGF(buf3,0xB);
    state[3][i] = MultGF(buf0,0xB) ^ MultGF(buf1,0xD) ^ MultGF(buf2,0x9) ^ MultGF(buf3,0xE);
10002a10:	d065f000 	sb	r3, r5, r30
void InvMixColumns(sb_uint8_t state[4][Nb])
{
  sb_int32_t i;
  sb_uint8_t buf0,buf1,buf2,buf3;

  for(i=0;i<4;i++)
10002a14:	a8640004 	xori	r3, r4, 4
10002a18:	e8810010 	lwi	r4, r1, 16
10002a1c:	30840001 	addik	r4, r4, 1
10002a20:	be23fdb0 	bneid	r3, -592		// 100027d0
10002a24:	f8810010 	swi	r4, r1, 16
    state[0][i] = MultGF(buf0,0xE) ^ MultGF(buf1,0xB) ^ MultGF(buf2,0xD) ^ MultGF(buf3,0x9);
    state[1][i] = MultGF(buf0,0x9) ^ MultGF(buf1,0xE) ^ MultGF(buf2,0xB) ^ MultGF(buf3,0xD);
    state[2][i] = MultGF(buf0,0xD) ^ MultGF(buf1,0x9) ^ MultGF(buf2,0xE) ^ MultGF(buf3,0xB);
    state[3][i] = MultGF(buf0,0xB) ^ MultGF(buf1,0xD) ^ MultGF(buf2,0x9) ^ MultGF(buf3,0xE);
  }
}
10002a28:	ea610024 	lwi	r19, r1, 36
10002a2c:	eac10028 	lwi	r22, r1, 40
10002a30:	eae1002c 	lwi	r23, r1, 44
10002a34:	eb010030 	lwi	r24, r1, 48
10002a38:	eb210034 	lwi	r25, r1, 52
10002a3c:	eb410038 	lwi	r26, r1, 56
10002a40:	eb61003c 	lwi	r27, r1, 60
10002a44:	eb810040 	lwi	r28, r1, 64
10002a48:	eba10044 	lwi	r29, r1, 68
10002a4c:	ebc10048 	lwi	r30, r1, 72
10002a50:	ebe1004c 	lwi	r31, r1, 76
10002a54:	b60f0008 	rtsd	r15, 8
10002a58:	30210050 	addik	r1, r1, 80

10002a5c <InvCipher>:
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
  }
}

void InvCipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
{
10002a5c:	3021ff44 	addik	r1, r1, -188
10002a60:	fba100b0 	swi	r29, r1, 176
10002a64:	f9e10000 	swi	r15, r1, 0
10002a68:	fa610090 	swi	r19, r1, 144
10002a6c:	fac10094 	swi	r22, r1, 148
10002a70:	fae10098 	swi	r23, r1, 152
10002a74:	fb01009c 	swi	r24, r1, 156
10002a78:	fb2100a0 	swi	r25, r1, 160
10002a7c:	fb4100a4 	swi	r26, r1, 164
10002a80:	fb6100a8 	swi	r27, r1, 168
10002a84:	fb8100ac 	swi	r28, r1, 172
10002a88:	fbc100b4 	swi	r30, r1, 180
10002a8c:	fbe100b8 	swi	r31, r1, 184
  /* PROLOGUE */	
  for(i=0;i<Nb;i++)
  { 
    for(j=0;j<4;j++)
    {
      state[j][i] = dat_i[i*Nb+j];
10002a90:	e1250000 	lbui	r9, r5, 0
10002a94:	e1450001 	lbui	r10, r5, 1
10002a98:	e1650002 	lbui	r11, r5, 2
10002a9c:	e1850003 	lbui	r12, r5, 3
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
  }
}

void InvCipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
{
10002aa0:	f8e100c8 	swi	r7, r1, 200
10002aa4:	f8c100c4 	swi	r6, r1, 196
  /* PROLOGUE */	
  for(i=0;i<Nb;i++)
  { 
    for(j=0;j<4;j++)
    {
      state[j][i] = dat_i[i*Nb+j];
10002aa8:	f121001c 	sbi	r9, r1, 28
10002aac:	f1410020 	sbi	r10, r1, 32
10002ab0:	f1610024 	sbi	r11, r1, 36
10002ab4:	e2c50004 	lbui	r22, r5, 4
10002ab8:	e2e50005 	lbui	r23, r5, 5
10002abc:	e3050006 	lbui	r24, r5, 6
10002ac0:	e3250007 	lbui	r25, r5, 7
10002ac4:	e3450008 	lbui	r26, r5, 8
10002ac8:	e2650009 	lbui	r19, r5, 9
10002acc:	e105000a 	lbui	r8, r5, 10
10002ad0:	e0c5000b 	lbui	r6, r5, 11
10002ad4:	e0e5000c 	lbui	r7, r5, 12
10002ad8:	e385000d 	lbui	r28, r5, 13
10002adc:	e085000e 	lbui	r4, r5, 14
10002ae0:	e365000f 	lbui	r27, r5, 15
10002ae4:	f1810028 	sbi	r12, r1, 40
10002ae8:	eba100c8 	lwi	r29, r1, 200
10002aec:	f2c1001d 	sbi	r22, r1, 29
10002af0:	f2e10021 	sbi	r23, r1, 33
10002af4:	f3010025 	sbi	r24, r1, 37
10002af8:	f3210029 	sbi	r25, r1, 41
10002afc:	f341001e 	sbi	r26, r1, 30
10002b00:	f2610022 	sbi	r19, r1, 34
10002b04:	f1010026 	sbi	r8, r1, 38
10002b08:	f0c1002a 	sbi	r6, r1, 42
10002b0c:	f0e1001f 	sbi	r7, r1, 31
10002b10:	f3810023 	sbi	r28, r1, 35
10002b14:	f0810027 	sbi	r4, r1, 39
10002b18:	a47d0003 	andi	r3, r29, 3
10002b1c:	be230494 	bneid	r3, 1172		// 10002fb0
10002b20:	f361002b 	sbi	r27, r1, 43

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002b24:	e861001c 	lwi	r3, r1, 28
10002b28:	e91d0028 	lwi	r8, r29, 40
10002b2c:	e8bd0054 	lwi	r5, r29, 84
10002b30:	e89d0080 	lwi	r4, r29, 128
10002b34:	89081800 	xor	r8, r8, r3
10002b38:	e8610020 	lwi	r3, r1, 32
10002b3c:	e93d00ac 	lwi	r9, r29, 172
10002b40:	f901001c 	swi	r8, r1, 28
10002b44:	88a51800 	xor	r5, r5, r3
10002b48:	e8610024 	lwi	r3, r1, 36
10002b4c:	f8a10020 	swi	r5, r1, 32
10002b50:	88841800 	xor	r4, r4, r3
10002b54:	e8610028 	lwi	r3, r1, 40
10002b58:	f8810024 	swi	r4, r1, 36
10002b5c:	88691800 	xor	r3, r9, r3
10002b60:	f8610028 	swi	r3, r1, 40
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
  }
}

void InvCipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
10002b64:	eb0100c8 	lwi	r24, r1, 200
10002b68:	30600009 	addik	r3, r0, 9
10002b6c:	f861002c 	swi	r3, r1, 44
10002b70:	30980051 	addik	r4, r24, 81
10002b74:	12640000 	addk	r19, r4, r0
10002b78:	30d8002c 	addik	r6, r24, 44
10002b7c:	32d8007d 	addik	r22, r24, 125
10002b80:	32f800a9 	addik	r23, r24, 169
10002b84:	f8c10058 	swi	r6, r1, 88

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
10002b88:	e061001c 	lbui	r3, r1, 28

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002b8c:	e0f80024 	lbui	r7, r24, 36

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
10002b90:	e0a10026 	lbui	r5, r1, 38

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002b94:	b0001000 	imm	4096
10002b98:	e0633e54 	lbui	r3, r3, 15956

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
10002b9c:	e0c10029 	lbui	r6, r1, 41
10002ba0:	e101001d 	lbui	r8, r1, 29
10002ba4:	e1210020 	lbui	r9, r1, 32
10002ba8:	e161002a 	lbui	r11, r1, 42
10002bac:	e3410025 	lbui	r26, r1, 37

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002bb0:	88671800 	xor	r3, r7, r3
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
  }
}

void InvCipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
10002bb4:	e8e10058 	lwi	r7, r1, 88

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
10002bb8:	b0001000 	imm	4096
10002bbc:	e0a53e54 	lbui	r5, r5, 15956
10002bc0:	b0001000 	imm	4096
10002bc4:	e0c63e54 	lbui	r6, r6, 15956
10002bc8:	b0001000 	imm	4096
10002bcc:	e1083e54 	lbui	r8, r8, 15956
10002bd0:	b0001000 	imm	4096
10002bd4:	e1293e54 	lbui	r9, r9, 15956
10002bd8:	b0001000 	imm	4096
10002bdc:	e16b3e54 	lbui	r11, r11, 15956
10002be0:	e0810023 	lbui	r4, r1, 35
10002be4:	e1410027 	lbui	r10, r1, 39
10002be8:	e3810021 	lbui	r28, r1, 33
10002bec:	e3a10024 	lbui	r29, r1, 36
10002bf0:	e3e1002b 	lbui	r31, r1, 43
10002bf4:	e3c1001f 	lbui	r30, r1, 31
10002bf8:	e3610022 	lbui	r27, r1, 34
10002bfc:	e181001e 	lbui	r12, r1, 30
10002c00:	b0001000 	imm	4096
10002c04:	e35a3e54 	lbui	r26, r26, 15956
    state[2][i] = buf0 ^ buf1 ^ Mult2GF(buf2) ^ Mult3GF(buf3);
    state[3][i] = Mult3GF(buf0) ^ buf1 ^ buf2 ^ Mult2GF(buf3);
  }
}

void InvCipher(const sb_uint8_t dat_i[4*Nb], sb_uint8_t dat_o[4*Nb], sb_uint8_t w[4][Nb*(Nr+1)])
10002c08:	14e79800 	rsubk	r7, r7, r19
10002c0c:	f8e10054 	swi	r7, r1, 84

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
10002c10:	f8a10044 	swi	r5, r1, 68
10002c14:	f8c10038 	swi	r6, r1, 56
10002c18:	f901004c 	swi	r8, r1, 76
10002c1c:	f9210048 	swi	r9, r1, 72
10002c20:	f9610040 	swi	r11, r1, 64
10002c24:	b0001000 	imm	4096
10002c28:	e0e43e54 	lbui	r7, r4, 15956
10002c2c:	b0001000 	imm	4096
10002c30:	e17c3e54 	lbui	r11, r28, 15956
10002c34:	b0001000 	imm	4096
10002c38:	e08a3e54 	lbui	r4, r10, 15956
10002c3c:	b0001000 	imm	4096
10002c40:	e13f3e54 	lbui	r9, r31, 15956
10002c44:	b0001000 	imm	4096
10002c48:	e15d3e54 	lbui	r10, r29, 15956
10002c4c:	b0001000 	imm	4096
10002c50:	e3fb3e54 	lbui	r31, r27, 15956
10002c54:	b0001000 	imm	4096
10002c58:	e11e3e54 	lbui	r8, r30, 15956
10002c5c:	e3210028 	lbui	r25, r1, 40
10002c60:	b0001000 	imm	4096
10002c64:	e18c3e54 	lbui	r12, r12, 15956
10002c68:	fb410050 	swi	r26, r1, 80

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002c6c:	e8a10054 	lwi	r5, r1, 84
10002c70:	f061001c 	sbi	r3, r1, 28
10002c74:	e86100c8 	lwi	r3, r1, 200
10002c78:	e397ffff 	lbui	r28, r23, -1
10002c7c:	e3d3ffff 	lbui	r30, r19, -1
10002c80:	c0c51800 	lbu	r6, r5, r3
10002c84:	e8610038 	lwi	r3, r1, 56

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
10002c88:	b0001000 	imm	4096
10002c8c:	e3393e54 	lbui	r25, r25, 15956

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002c90:	e3b6ffff 	lbui	r29, r22, -1
10002c94:	8b83e000 	xor	r28, r3, r28
10002c98:	e3730000 	lbui	r27, r19, 0
10002c9c:	fb810034 	swi	r28, r1, 52
10002ca0:	8bc7f000 	xor	r30, r7, r30
10002ca4:	eb810048 	lwi	r28, r1, 72
10002ca8:	e8e10044 	lwi	r7, r1, 68

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
10002cac:	fb21008c 	swi	r25, r1, 140

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002cb0:	e3560000 	lbui	r26, r22, 0
10002cb4:	e3370000 	lbui	r25, r23, 0
10002cb8:	8ba7e800 	xor	r29, r7, r29
10002cbc:	e8610040 	lwi	r3, r1, 64
10002cc0:	e8e1004c 	lwi	r7, r1, 76
10002cc4:	8b7cd800 	xor	r27, r28, r27
10002cc8:	e3960001 	lbui	r28, r22, 1
10002ccc:	88c73000 	xor	r6, r7, r6
10002cd0:	8b44d000 	xor	r26, r4, r26
10002cd4:	e0f30001 	lbui	r7, r19, 1
10002cd8:	e0980026 	lbui	r4, r24, 38
10002cdc:	894ae000 	xor	r10, r10, r28
10002ce0:	8b23c800 	xor	r25, r3, r25
10002ce4:	e3930002 	lbui	r28, r19, 2
10002ce8:	e0770001 	lbui	r3, r23, 1
10002cec:	898c2000 	xor	r12, r12, r4
10002cf0:	896b3800 	xor	r11, r11, r7
10002cf4:	e0980027 	lbui	r4, r24, 39
10002cf8:	88ffe000 	xor	r7, r31, r28
10002cfc:	89291800 	xor	r9, r9, r3
10002d00:	ebe10050 	lwi	r31, r1, 80
10002d04:	e0760002 	lbui	r3, r22, 2
10002d08:	89082000 	xor	r8, r8, r4
10002d0c:	eb81008c 	lwi	r28, r1, 140
10002d10:	889f1800 	xor	r4, r31, r3
10002d14:	e3f70002 	lbui	r31, r23, 2
10002d18:	f3a10024 	sbi	r29, r1, 36
10002d1c:	eba10034 	lwi	r29, r1, 52
10002d20:	887cf800 	xor	r3, r28, r31
  }

  /* KERNEL */
  AddRoundKey(state,w,Nr);

  for(i=(Nr-1);i>0;i--)
10002d24:	eb81002c 	lwi	r28, r1, 44
  {
    InvShiftRows(state);
    InvSubBytes(state);
    AddRoundKey(state,w,i);
    InvMixColumns(state);
10002d28:	30a1001c 	addik	r5, r1, 28

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002d2c:	f3c10020 	sbi	r30, r1, 32
  }

  /* KERNEL */
  AddRoundKey(state,w,Nr);

  for(i=(Nr-1);i>0;i--)
10002d30:	339cffff 	addik	r28, r28, -1
10002d34:	fb81002c 	swi	r28, r1, 44

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002d38:	f3a10028 	sbi	r29, r1, 40
  }

  /* KERNEL */
  AddRoundKey(state,w,Nr);

  for(i=(Nr-1);i>0;i--)
10002d3c:	3318fffc 	addik	r24, r24, -4

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002d40:	f0c1001d 	sbi	r6, r1, 29
10002d44:	f3610021 	sbi	r27, r1, 33
10002d48:	f3410025 	sbi	r26, r1, 37
10002d4c:	f3210029 	sbi	r25, r1, 41
10002d50:	f181001e 	sbi	r12, r1, 30
10002d54:	f1610022 	sbi	r11, r1, 34
10002d58:	f1410026 	sbi	r10, r1, 38
10002d5c:	f121002a 	sbi	r9, r1, 42
10002d60:	f101001f 	sbi	r8, r1, 31
10002d64:	f0e10023 	sbi	r7, r1, 35
10002d68:	f0810027 	sbi	r4, r1, 39
10002d6c:	f061002b 	sbi	r3, r1, 43
  for(i=(Nr-1);i>0;i--)
  {
    InvShiftRows(state);
    InvSubBytes(state);
    AddRoundKey(state,w,i);
    InvMixColumns(state);
10002d70:	b9f4fa00 	brlid	r15, -1536	// 10002770 <InvMixColumns>
10002d74:	3273fffc 	addik	r19, r19, -4
  }

  /* KERNEL */
  AddRoundKey(state,w,Nr);

  for(i=(Nr-1);i>0;i--)
10002d78:	32d6fffc 	addik	r22, r22, -4
10002d7c:	be3cfe0c 	bneid	r28, -500		// 10002b88
10002d80:	32f7fffc 	addik	r23, r23, -4

  /* >> 1 */
  buf         = state[1][3];
  state[1][3] = state[1][2];
  state[1][2] = state[1][1];
  state[1][1] = state[1][0];
10002d84:	e1410020 	lbui	r10, r1, 32
  /* >> 3 */
  buf         = state[3][1];
  state[3][1] = state[3][2];
  state[3][2] = state[3][3];
  state[3][3] = state[3][0];
  state[3][0] = buf;
10002d88:	e1810029 	lbui	r12, r1, 41

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
10002d8c:	e161001d 	lbui	r11, r1, 29
  /* >> 2 */
  buf         = state[2][2];
  state[2][2] = state[2][0];
  state[2][0] = buf;
  buf         = state[2][1];
  state[2][1] = state[2][3];
10002d90:	e1210027 	lbui	r9, r1, 39
  state[2][3] = buf;

  /* >> 3 */
  buf         = state[3][1];
  state[3][1] = state[3][2];
10002d94:	e101002a 	lbui	r8, r1, 42

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
10002d98:	e2e1001c 	lbui	r23, r1, 28
  /* >> 1 */
  buf         = state[1][3];
  state[1][3] = state[1][2];
  state[1][2] = state[1][1];
  state[1][1] = state[1][0];
  state[1][0] = buf;
10002d9c:	e2c10023 	lbui	r22, r1, 35

  /* >> 2 */
  buf         = state[2][2];
  state[2][2] = state[2][0];
  state[2][0] = buf;
10002da0:	e2610026 	lbui	r19, r1, 38

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
10002da4:	e0a1001e 	lbui	r5, r1, 30
10002da8:	b0001000 	imm	4096
10002dac:	e30c3e54 	lbui	r24, r12, 15956
10002db0:	b0001000 	imm	4096
10002db4:	e32b3e54 	lbui	r25, r11, 15956
10002db8:	b0001000 	imm	4096
10002dbc:	e34a3e54 	lbui	r26, r10, 15956
10002dc0:	b0001000 	imm	4096
10002dc4:	e3693e54 	lbui	r27, r9, 15956
10002dc8:	b0001000 	imm	4096
10002dcc:	e3883e54 	lbui	r28, r8, 15956
10002dd0:	b0001000 	imm	4096
10002dd4:	e2f73e54 	lbui	r23, r23, 15956
10002dd8:	b0001000 	imm	4096
10002ddc:	e2d63e54 	lbui	r22, r22, 15956
10002de0:	b0001000 	imm	4096
10002de4:	e2733e54 	lbui	r19, r19, 15956
  sb_uint8_t buf;

  /* >> 1 */
  buf         = state[1][3];
  state[1][3] = state[1][2];
  state[1][2] = state[1][1];
10002de8:	e0810021 	lbui	r4, r1, 33

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
10002dec:	b0001000 	imm	4096
10002df0:	e3a53e54 	lbui	r29, r5, 15956
  state[1][1] = state[1][0];
  state[1][0] = buf;

  /* >> 2 */
  buf         = state[2][2];
  state[2][2] = state[2][0];
10002df4:	e1810024 	lbui	r12, r1, 36
  state[2][0] = buf;
  buf         = state[2][1];
  state[2][1] = state[2][3];
  state[2][3] = buf;
10002df8:	e1010025 	lbui	r8, r1, 37

  /* >> 3 */
  buf         = state[3][1];
  state[3][1] = state[3][2];
  state[3][2] = state[3][3];
  state[3][3] = state[3][0];
10002dfc:	e0a10028 	lbui	r5, r1, 40

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
10002e00:	f2e1001c 	sbi	r23, r1, 28
10002e04:	f2c10020 	sbi	r22, r1, 32
10002e08:	f2610024 	sbi	r19, r1, 36
10002e0c:	f3010028 	sbi	r24, r1, 40
10002e10:	f321001d 	sbi	r25, r1, 29
10002e14:	f3410021 	sbi	r26, r1, 33
10002e18:	f3610025 	sbi	r27, r1, 37
10002e1c:	f3810029 	sbi	r28, r1, 41
10002e20:	b0001000 	imm	4096
10002e24:	e3c43e54 	lbui	r30, r4, 15956
{
  sb_uint8_t buf;

  /* >> 1 */
  buf         = state[1][3];
  state[1][3] = state[1][2];
10002e28:	e1210022 	lbui	r9, r1, 34
  state[2][3] = buf;

  /* >> 3 */
  buf         = state[3][1];
  state[3][1] = state[3][2];
  state[3][2] = state[3][3];
10002e2c:	e161002b 	lbui	r11, r1, 43

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] = InvSbox[state[j][i]];
10002e30:	f3a1001e 	sbi	r29, r1, 30
10002e34:	ebe100c8 	lwi	r31, r1, 200
10002e38:	e141001f 	lbui	r10, r1, 31
10002e3c:	b0001000 	imm	4096
10002e40:	e16b3e54 	lbui	r11, r11, 15956
10002e44:	309f0084 	addik	r4, r31, 132
10002e48:	307f0058 	addik	r3, r31, 88
10002e4c:	80632000 	or	r3, r3, r4
10002e50:	e8810058 	lwi	r4, r1, 88
10002e54:	f161002f 	sbi	r11, r1, 47
10002e58:	b0001000 	imm	4096
10002e5c:	e0ea3e54 	lbui	r7, r10, 15956
10002e60:	e94100c8 	lwi	r10, r1, 200
10002e64:	b0001000 	imm	4096
10002e68:	e0cc3e54 	lbui	r6, r12, 15956
10002e6c:	80641800 	or	r3, r4, r3
10002e70:	b0001000 	imm	4096
10002e74:	e3e93e54 	lbui	r31, r9, 15956
10002e78:	b0001000 	imm	4096
10002e7c:	e1883e54 	lbui	r12, r8, 15956
10002e80:	b0001000 	imm	4096
10002e84:	e1653e54 	lbui	r11, r5, 15956
10002e88:	e081002f 	lbui	r4, r1, 47
10002e8c:	806a1800 	or	r3, r10, r3
10002e90:	f3c10022 	sbi	r30, r1, 34
10002e94:	f0c10026 	sbi	r6, r1, 38
10002e98:	f081002a 	sbi	r4, r1, 42
10002e9c:	f0e1001f 	sbi	r7, r1, 31
10002ea0:	f3e10023 	sbi	r31, r1, 35
10002ea4:	f1810027 	sbi	r12, r1, 39
10002ea8:	a4630003 	andi	r3, r3, 3
10002eac:	be230260 	bneid	r3, 608		// 1000310c
10002eb0:	f161002b 	sbi	r11, r1, 43

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002eb4:	e90a0000 	lwi	r8, r10, 0
10002eb8:	e8e1001c 	lwi	r7, r1, 28
10002ebc:	e8aa002c 	lwi	r5, r10, 44
10002ec0:	e88a0058 	lwi	r4, r10, 88
10002ec4:	88e83800 	xor	r7, r8, r7
10002ec8:	e9010020 	lwi	r8, r1, 32
10002ecc:	e86a0084 	lwi	r3, r10, 132
10002ed0:	f8e1001c 	swi	r7, r1, 28
10002ed4:	88a54000 	xor	r5, r5, r8
10002ed8:	e9010024 	lwi	r8, r1, 36
10002edc:	f8a10020 	swi	r5, r1, 32
10002ee0:	88844000 	xor	r4, r4, r8
10002ee4:	e9010028 	lwi	r8, r1, 40
10002ee8:	f8810024 	swi	r4, r1, 36
10002eec:	88634000 	xor	r3, r3, r8
10002ef0:	f8610028 	swi	r3, r1, 40
  /* EPILOGUE */	
  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      dat_o[i*Nb+j] = state[j][i];
10002ef4:	ebe100c4 	lwi	r31, r1, 196
10002ef8:	e061001c 	lbui	r3, r1, 28
10002efc:	e0810020 	lbui	r4, r1, 32
10002f00:	e0a10024 	lbui	r5, r1, 36
10002f04:	e0c10028 	lbui	r6, r1, 40
10002f08:	e0e1001d 	lbui	r7, r1, 29
10002f0c:	e1410021 	lbui	r10, r1, 33
10002f10:	e3810025 	lbui	r28, r1, 37
10002f14:	e3a10029 	lbui	r29, r1, 41
10002f18:	f07f0000 	sbi	r3, r31, 0
10002f1c:	f09f0001 	sbi	r4, r31, 1
10002f20:	f0bf0002 	sbi	r5, r31, 2
10002f24:	f0df0003 	sbi	r6, r31, 3
10002f28:	f0ff0004 	sbi	r7, r31, 4
10002f2c:	f15f0005 	sbi	r10, r31, 5
10002f30:	f39f0006 	sbi	r28, r31, 6
10002f34:	f3bf0007 	sbi	r29, r31, 7
10002f38:	e3810027 	lbui	r28, r1, 39
10002f3c:	e3a1002b 	lbui	r29, r1, 43
10002f40:	e061001e 	lbui	r3, r1, 30
10002f44:	e0810022 	lbui	r4, r1, 34
10002f48:	e0a10026 	lbui	r5, r1, 38
10002f4c:	e0c1002a 	lbui	r6, r1, 42
10002f50:	e0e1001f 	lbui	r7, r1, 31
10002f54:	e1410023 	lbui	r10, r1, 35
10002f58:	f07f0008 	sbi	r3, r31, 8
10002f5c:	f09f0009 	sbi	r4, r31, 9
10002f60:	f0bf000a 	sbi	r5, r31, 10
10002f64:	f0df000b 	sbi	r6, r31, 11
10002f68:	f0ff000c 	sbi	r7, r31, 12
10002f6c:	f15f000d 	sbi	r10, r31, 13
10002f70:	f39f000e 	sbi	r28, r31, 14
10002f74:	f3bf000f 	sbi	r29, r31, 15
    }	
  }
}
10002f78:	e9e10000 	lwi	r15, r1, 0
10002f7c:	ea610090 	lwi	r19, r1, 144
10002f80:	eac10094 	lwi	r22, r1, 148
10002f84:	eae10098 	lwi	r23, r1, 152
10002f88:	eb01009c 	lwi	r24, r1, 156
10002f8c:	eb2100a0 	lwi	r25, r1, 160
10002f90:	eb4100a4 	lwi	r26, r1, 164
10002f94:	eb6100a8 	lwi	r27, r1, 168
10002f98:	eb8100ac 	lwi	r28, r1, 172
10002f9c:	eba100b0 	lwi	r29, r1, 176
10002fa0:	ebc100b4 	lwi	r30, r1, 180
10002fa4:	ebe100b8 	lwi	r31, r1, 184
10002fa8:	b60f0008 	rtsd	r15, 8
10002fac:	302100bc 	addik	r1, r1, 188
10002fb0:	107d0000 	addk	r3, r29, r0
10002fb4:	13fd0000 	addk	r31, r29, r0

  for(i=0;i<Nb;i++)
  {
    for(j=0;j<4;j++)
    {
      state[j][i] ^= w[j][round*Nb+i];
10002fb8:	e3bd0028 	lbui	r29, r29, 40
10002fbc:	e0630080 	lbui	r3, r3, 128
10002fc0:	e3ff0054 	lbui	r31, r31, 84
10002fc4:	893d4800 	xor	r9, r29, r9
10002fc8:	f061005f 	sbi	r3, r1, 95
10002fcc:	e86100c8 	lwi	r3, r1, 200
10002fd0:	895f5000 	xor	r10, r31, r10
10002fd4:	e06300ac 	lbui	r3, r3, 172
10002fd8:	f0610063 	sbi	r3, r1, 99
10002fdc:	e86100c8 	lwi	r3, r1, 200
10002fe0:	e0630029 	lbui	r3, r3, 41
10002fe4:	f0610067 	sbi	r3, r1, 103
10002fe8:	e86100c8 	lwi	r3, r1, 200
10002fec:	e0630055 	lbui	r3, r3, 85
10002ff0:	f061006b 	sbi	r3, r1, 107
10002ff4:	e86100c8 	lwi	r3, r1, 200
10002ff8:	e0630081 	lbui	r3, r3, 129
10002ffc:	f061006f 	sbi	r3, r1, 111
10003000:	e86100c8 	lwi	r3, r1, 200
10003004:	e06300ad 	lbui	r3, r3, 173
10003008:	f0610073 	sbi	r3, r1, 115
1000300c:	e86100c8 	lwi	r3, r1, 200
10003010:	e063002a 	lbui	r3, r3, 42
10003014:	f0610077 	sbi	r3, r1, 119
10003018:	e86100c8 	lwi	r3, r1, 200
1000301c:	e0630056 	lbui	r3, r3, 86
10003020:	f061007b 	sbi	r3, r1, 123
10003024:	e86100c8 	lwi	r3, r1, 200
10003028:	e0630082 	lbui	r3, r3, 130
1000302c:	f061007f 	sbi	r3, r1, 127
10003030:	e86100c8 	lwi	r3, r1, 200
10003034:	e06300ae 	lbui	r3, r3, 174
10003038:	f0610083 	sbi	r3, r1, 131
1000303c:	e86100c8 	lwi	r3, r1, 200
10003040:	e063002b 	lbui	r3, r3, 43
10003044:	f0610087 	sbi	r3, r1, 135
10003048:	e0a1005f 	lbui	r5, r1, 95
1000304c:	e3a10063 	lbui	r29, r1, 99
10003050:	e3e10067 	lbui	r31, r1, 103
10003054:	e86100c8 	lwi	r3, r1, 200
10003058:	89655800 	xor	r11, r5, r11
1000305c:	899d6000 	xor	r12, r29, r12
10003060:	e0630057 	lbui	r3, r3, 87
10003064:	e0a1006b 	lbui	r5, r1, 107
10003068:	e3a1006f 	lbui	r29, r1, 111
1000306c:	8adfb000 	xor	r22, r31, r22
10003070:	e3e10073 	lbui	r31, r1, 115
10003074:	f061008b 	sbi	r3, r1, 139
10003078:	8ae5b800 	xor	r23, r5, r23
1000307c:	e86100c8 	lwi	r3, r1, 200
10003080:	e0a10077 	lbui	r5, r1, 119
10003084:	8b1dc000 	xor	r24, r29, r24
10003088:	8b3fc800 	xor	r25, r31, r25
1000308c:	e3a1007b 	lbui	r29, r1, 123
10003090:	e3e1007f 	lbui	r31, r1, 127
10003094:	e3c30083 	lbui	r30, r3, 131
10003098:	8b45d000 	xor	r26, r5, r26
1000309c:	8a7d9800 	xor	r19, r29, r19
100030a0:	e0a10083 	lbui	r5, r1, 131
100030a4:	891f4000 	xor	r8, r31, r8
100030a8:	e3a10087 	lbui	r29, r1, 135
100030ac:	e3e1008b 	lbui	r31, r1, 139
100030b0:	e06300af 	lbui	r3, r3, 175
100030b4:	88c53000 	xor	r6, r5, r6
100030b8:	88fd3800 	xor	r7, r29, r7
100030bc:	88bfe000 	xor	r5, r31, r28
100030c0:	889e2000 	xor	r4, r30, r4
100030c4:	8863d800 	xor	r3, r3, r27
100030c8:	f121001c 	sbi	r9, r1, 28
100030cc:	f1410020 	sbi	r10, r1, 32
100030d0:	f1610024 	sbi	r11, r1, 36
100030d4:	f1810028 	sbi	r12, r1, 40
100030d8:	f2c1001d 	sbi	r22, r1, 29
100030dc:	f2e10021 	sbi	r23, r1, 33
100030e0:	f3010025 	sbi	r24, r1, 37
100030e4:	f3210029 	sbi	r25, r1, 41
100030e8:	f341001e 	sbi	r26, r1, 30
100030ec:	f2610022 	sbi	r19, r1, 34
100030f0:	f1010026 	sbi	r8, r1, 38
100030f4:	f0c1002a 	sbi	r6, r1, 42
100030f8:	f0e1001f 	sbi	r7, r1, 31
100030fc:	f0a10023 	sbi	r5, r1, 35
10003100:	f0810027 	sbi	r4, r1, 39
10003104:	b810fa60 	brid	-1440		// 10002b64
10003108:	f061002b 	sbi	r3, r1, 43
1000310c:	e06a0084 	lbui	r3, r10, 132
10003110:	e08a0001 	lbui	r4, r10, 1
10003114:	e0aa0000 	lbui	r5, r10, 0
10003118:	e10a002c 	lbui	r8, r10, 44
1000311c:	e12a0058 	lbui	r9, r10, 88
10003120:	f0610033 	sbi	r3, r1, 51
10003124:	f0810037 	sbi	r4, r1, 55
10003128:	e14a002d 	lbui	r10, r10, 45
1000312c:	e86100c8 	lwi	r3, r1, 200
10003130:	e88100c8 	lwi	r4, r1, 200
10003134:	f141003b 	sbi	r10, r1, 59
10003138:	e0630059 	lbui	r3, r3, 89
1000313c:	e0840085 	lbui	r4, r4, 133
10003140:	e94100c8 	lwi	r10, r1, 200
10003144:	f061003f 	sbi	r3, r1, 63
10003148:	f0810043 	sbi	r4, r1, 67
1000314c:	e14a0002 	lbui	r10, r10, 2
10003150:	e86100c8 	lwi	r3, r1, 200
10003154:	e88100c8 	lwi	r4, r1, 200
10003158:	f141005b 	sbi	r10, r1, 91
1000315c:	e063002e 	lbui	r3, r3, 46
10003160:	e084005a 	lbui	r4, r4, 90
10003164:	e94100c8 	lwi	r10, r1, 200
10003168:	f0610047 	sbi	r3, r1, 71
1000316c:	f081004b 	sbi	r4, r1, 75
10003170:	e14a0086 	lbui	r10, r10, 134
10003174:	e86100c8 	lwi	r3, r1, 200
10003178:	e88100c8 	lwi	r4, r1, 200
1000317c:	8ae5b800 	xor	r23, r5, r23
10003180:	e0a10033 	lbui	r5, r1, 51
10003184:	f141004f 	sbi	r10, r1, 79
10003188:	e0630003 	lbui	r3, r3, 3
1000318c:	e94100c8 	lwi	r10, r1, 200
10003190:	e084002f 	lbui	r4, r4, 47
10003194:	8b05c000 	xor	r24, r5, r24
10003198:	e0a1003b 	lbui	r5, r1, 59
1000319c:	f0610053 	sbi	r3, r1, 83
100031a0:	f0810057 	sbi	r4, r1, 87
100031a4:	e06a0087 	lbui	r3, r10, 135
100031a8:	e08a005b 	lbui	r4, r10, 91
100031ac:	8b45d000 	xor	r26, r5, r26
100031b0:	e1410037 	lbui	r10, r1, 55
100031b4:	e0a10043 	lbui	r5, r1, 67
100031b8:	8a699800 	xor	r19, r9, r19
100031bc:	8b2ac800 	xor	r25, r10, r25
100031c0:	8b85e000 	xor	r28, r5, r28
100031c4:	e141003f 	lbui	r10, r1, 63
100031c8:	e0a1005b 	lbui	r5, r1, 91
100031cc:	8ac8b000 	xor	r22, r8, r22
100031d0:	8b6ad800 	xor	r27, r10, r27
100031d4:	8945e800 	xor	r10, r5, r29
100031d8:	e3a10047 	lbui	r29, r1, 71
100031dc:	e0a1004b 	lbui	r5, r1, 75
100031e0:	888c2000 	xor	r4, r12, r4
100031e4:	893df000 	xor	r9, r29, r30
100031e8:	88c53000 	xor	r6, r5, r6
100031ec:	e3a1004f 	lbui	r29, r1, 79
100031f0:	e0a1002f 	lbui	r5, r1, 47
100031f4:	88635800 	xor	r3, r3, r11
100031f8:	891d2800 	xor	r8, r29, r5
100031fc:	e3a10053 	lbui	r29, r1, 83
10003200:	88e7e800 	xor	r7, r7, r29
10003204:	e3a10057 	lbui	r29, r1, 87
10003208:	f2e1001c 	sbi	r23, r1, 28
1000320c:	f2c10020 	sbi	r22, r1, 32
10003210:	88bfe800 	xor	r5, r31, r29
10003214:	f2610024 	sbi	r19, r1, 36
10003218:	f3010028 	sbi	r24, r1, 40
1000321c:	f321001d 	sbi	r25, r1, 29
10003220:	f3410021 	sbi	r26, r1, 33
10003224:	f3610025 	sbi	r27, r1, 37
10003228:	f3810029 	sbi	r28, r1, 41
1000322c:	f141001e 	sbi	r10, r1, 30
10003230:	f1210022 	sbi	r9, r1, 34
10003234:	f0c10026 	sbi	r6, r1, 38
10003238:	f101002a 	sbi	r8, r1, 42
1000323c:	f0e1001f 	sbi	r7, r1, 31
10003240:	f0a10023 	sbi	r5, r1, 35
10003244:	f0810027 	sbi	r4, r1, 39
10003248:	b810fcac 	brid	-852		// 10002ef4
1000324c:	f061002b 	sbi	r3, r1, 43

10003250 <Mult2GF>:
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10003250:	64650007 	bsrli	r3, r5, 7
10003254:	10831800 	addk	r4, r3, r3
10003258:	10641800 	addk	r3, r4, r3
1000325c:	64830403 	bslli	r4, r3, 3
10003260:	10a52800 	addk	r5, r5, r5
10003264:	10632000 	addk	r3, r3, r4
10003268:	88632800 	xor	r3, r3, r5
}
1000326c:	b60f0008 	rtsd	r15, 8
10003270:	a46300ff 	andi	r3, r3, 255

10003274 <Mult3GF>:
  }
}

sb_uint8_t Mult2GF(const sb_uint8_t val)
{
  return ((val<<1) ^ (((val>>7) & 1) * 0x1b));
10003274:	64650007 	bsrli	r3, r5, 7
10003278:	10831800 	addk	r4, r3, r3
1000327c:	10641800 	addk	r3, r4, r3
10003280:	64c30403 	bslli	r6, r3, 3
10003284:	10852800 	addk	r4, r5, r5
10003288:	10633000 	addk	r3, r3, r6
1000328c:	88632000 	xor	r3, r3, r4
}

sb_uint8_t Mult3GF(const sb_uint8_t val)
{	
  return (Mult2GF(val) ^ val);
10003290:	88651800 	xor	r3, r5, r3
}
10003294:	b60f0008 	rtsd	r15, 8
10003298:	a46300ff 	andi	r3, r3, 255

1000329c <MultGF>:
  sb_uint8_t b_buf = b;
  sb_uint8_t sign_a;

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
1000329c:	a4860001 	andi	r4, r6, 1
{	
  return (Mult2GF(val) ^ val);
}

sb_uint8_t MultGF(const sb_uint8_t a, const sb_uint8_t b)
{
100032a0:	be04000c 	beqid	r4, 12		// 100032ac
100032a4:	10652800 	addk	r3, r5, r5
100032a8:	10850000 	addk	r4, r5, r0
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
100032ac:	a46300ff 	andi	r3, r3, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
100032b0:	a4a5ff80 	andi	r5, r5, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
100032b4:	be05000c 	beqid	r5, 12		// 100032c0
100032b8:	a8e3001b 	xori	r7, r3, 27
100032bc:	10670000 	addk	r3, r7, r0
    } 

    b_buf >>= 1;
100032c0:	90c60041 	srl	r6, r6
  sb_uint8_t b_buf = b;
  sb_uint8_t sign_a;

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
100032c4:	a4e60001 	andi	r7, r6, 1
    { 
      res ^= a_buf;
100032c8:	89032000 	xor	r8, r3, r4
100032cc:	be07000c 	beqid	r7, 12		// 100032d8
100032d0:	10a40000 	addk	r5, r4, r0
100032d4:	10a80000 	addk	r5, r8, r0
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
100032d8:	10831800 	addk	r4, r3, r3
100032dc:	a48400ff 	andi	r4, r4, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
100032e0:	a463ff80 	andi	r3, r3, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
100032e4:	be03000c 	beqid	r3, 12		// 100032f0
100032e8:	a8e4001b 	xori	r7, r4, 27
100032ec:	10870000 	addk	r4, r7, r0
    } 

    b_buf >>= 1;
100032f0:	90c60041 	srl	r6, r6

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
100032f4:	88e42800 	xor	r7, r4, r5
  sb_uint8_t b_buf = b;
  sb_uint8_t sign_a;

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
100032f8:	a4660001 	andi	r3, r6, 1
    { 
      res ^= a_buf;
100032fc:	be03000c 	beqid	r3, 12		// 10003308
10003300:	a4e700ff 	andi	r7, r7, 255
10003304:	10a70000 	addk	r5, r7, r0
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
10003308:	10642000 	addk	r3, r4, r4
1000330c:	a46300ff 	andi	r3, r3, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
10003310:	a484ff80 	andi	r4, r4, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
10003314:	be04000c 	beqid	r4, 12		// 10003320
10003318:	a8e3001b 	xori	r7, r3, 27
1000331c:	10670000 	addk	r3, r7, r0
    } 

    b_buf >>= 1;
10003320:	90c60041 	srl	r6, r6

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
10003324:	88e32800 	xor	r7, r3, r5
  sb_uint8_t b_buf = b;
  sb_uint8_t sign_a;

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
10003328:	a4860001 	andi	r4, r6, 1
    { 
      res ^= a_buf;
1000332c:	be04000c 	beqid	r4, 12		// 10003338
10003330:	a4e700ff 	andi	r7, r7, 255
10003334:	10a70000 	addk	r5, r7, r0
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
10003338:	10831800 	addk	r4, r3, r3
1000333c:	a48400ff 	andi	r4, r4, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
10003340:	a463ff80 	andi	r3, r3, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
10003344:	be03000c 	beqid	r3, 12		// 10003350
10003348:	a8e4001b 	xori	r7, r4, 27
1000334c:	10870000 	addk	r4, r7, r0
    } 

    b_buf >>= 1;
10003350:	90c60041 	srl	r6, r6

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
10003354:	88e42800 	xor	r7, r4, r5
  sb_uint8_t b_buf = b;
  sb_uint8_t sign_a;

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
10003358:	a4660001 	andi	r3, r6, 1
    { 
      res ^= a_buf;
1000335c:	be03000c 	beqid	r3, 12		// 10003368
10003360:	a4e700ff 	andi	r7, r7, 255
10003364:	10a70000 	addk	r5, r7, r0
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
10003368:	10642000 	addk	r3, r4, r4
1000336c:	a46300ff 	andi	r3, r3, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
10003370:	a484ff80 	andi	r4, r4, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
10003374:	be04000c 	beqid	r4, 12		// 10003380
10003378:	a8e3001b 	xori	r7, r3, 27
1000337c:	10670000 	addk	r3, r7, r0
    } 

    b_buf >>= 1;
10003380:	90c60041 	srl	r6, r6

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
10003384:	88e32800 	xor	r7, r3, r5
  sb_uint8_t b_buf = b;
  sb_uint8_t sign_a;

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
10003388:	a4860001 	andi	r4, r6, 1
    { 
      res ^= a_buf;
1000338c:	be04000c 	beqid	r4, 12		// 10003398
10003390:	a4e700ff 	andi	r7, r7, 255
10003394:	10a70000 	addk	r5, r7, r0
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
10003398:	10831800 	addk	r4, r3, r3
1000339c:	a48400ff 	andi	r4, r4, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
100033a0:	a463ff80 	andi	r3, r3, -128
    a_buf <<= 1;

    if((sign_a == 0x80))
    {
      a_buf ^= 0x1b;
100033a4:	be03000c 	beqid	r3, 12		// 100033b0
100033a8:	a8e4001b 	xori	r7, r4, 27
100033ac:	10870000 	addk	r4, r7, r0
    } 

    b_buf >>= 1;
100033b0:	90c60041 	srl	r6, r6

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
100033b4:	88642800 	xor	r3, r4, r5
  sb_uint8_t b_buf = b;
  sb_uint8_t sign_a;

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
100033b8:	a4e60001 	andi	r7, r6, 1
    { 
      res ^= a_buf;
100033bc:	a50300ff 	andi	r8, r3, 255
100033c0:	be07000c 	beqid	r7, 12		// 100033cc
100033c4:	10650000 	addk	r3, r5, r0
100033c8:	10680000 	addk	r3, r8, r0
    }

    sign_a = (a_buf & 0x80);
    a_buf <<= 1;
100033cc:	10a42000 	addk	r5, r4, r4
100033d0:	a4a500ff 	andi	r5, r5, 255
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
    }

    sign_a = (a_buf & 0x80);
100033d4:	a484ff80 	andi	r4, r4, -128

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
    { 
      res ^= a_buf;
100033d8:	be04000c 	beqid	r4, 12		// 100033e4
100033dc:	a8e5001b 	xori	r7, r5, 27
100033e0:	10a70000 	addk	r5, r7, r0
100033e4:	88a32800 	xor	r5, r3, r5
  sb_uint8_t b_buf = b;
  sb_uint8_t sign_a;

  for(i=0;i<8;i++) 
  {
    if((b_buf & 1) == 1)
100033e8:	90c60041 	srl	r6, r6
    } 

    b_buf >>= 1;
  }

  return res;
100033ec:	be06000c 	beqid	r6, 12		// 100033f8
100033f0:	a4a500ff 	andi	r5, r5, 255
100033f4:	10650000 	addk	r3, r5, r0
}
100033f8:	b60f0008 	rtsd	r15, 8
100033fc:	a46300ff 	andi	r3, r3, 255

10003400 <_exception_handler>:
10003400:	b6110000 	rtsd	r17, 0
10003404:	80000000 	or	r0, r0, r0

10003408 <_hw_exception_handler>:
10003408:	b6910000 	rted	r17, 0
1000340c:	80000000 	or	r0, r0, r0

10003410 <_interrupt_handler>:
10003410:	b62e0000 	rtid	r14, 0
10003414:	80000000 	or	r0, r0, r0

10003418 <_program_clean>:
10003418:	b60f0008 	rtsd	r15, 8
1000341c:	80000000 	or	r0, r0, r0

10003420 <_program_init>:
10003420:	b60f0008 	rtsd	r15, 8
10003424:	80000000 	or	r0, r0, r0

10003428 <exit>:
10003428:	3021ffe0 	addik	r1, r1, -32
1000342c:	10c00000 	addk	r6, r0, r0
10003430:	fa61001c 	swi	r19, r1, 28
10003434:	f9e10000 	swi	r15, r1, 0
10003438:	b9f40028 	brlid	r15, 40	// 10003460 <__call_exitprocs>
1000343c:	12650000 	addk	r19, r5, r0
10003440:	b0001000 	imm	4096
10003444:	e8803fa4 	lwi	r4, r0, 16292	// 10003fa4 <_global_impure_ptr>
10003448:	e8640028 	lwi	r3, r4, 40
1000344c:	bc03000c 	beqi	r3, 12		// 10003458
10003450:	99fc1800 	brald	r15, r3
10003454:	10a40000 	addk	r5, r4, r0
10003458:	b9f4cc20 	brlid	r15, -13280	// 10000078 <_exit>
1000345c:	10b30000 	addk	r5, r19, r0

10003460 <__call_exitprocs>:
10003460:	3021ffb8 	addik	r1, r1, -72
10003464:	fbc10040 	swi	r30, r1, 64
10003468:	b0001000 	imm	4096
1000346c:	ebc03fa4 	lwi	r30, r0, 16292	// 10003fa4 <_global_impure_ptr>
10003470:	fb610034 	swi	r27, r1, 52
10003474:	13660000 	addk	r27, r6, r0
10003478:	fba1003c 	swi	r29, r1, 60
1000347c:	fbe10044 	swi	r31, r1, 68
10003480:	f9e10000 	swi	r15, r1, 0
10003484:	fa61001c 	swi	r19, r1, 28
10003488:	fac10020 	swi	r22, r1, 32
1000348c:	fae10024 	swi	r23, r1, 36
10003490:	fb010028 	swi	r24, r1, 40
10003494:	fb21002c 	swi	r25, r1, 44
10003498:	fb410030 	swi	r26, r1, 48
1000349c:	fb810038 	swi	r28, r1, 56
100034a0:	f8a1004c 	swi	r5, r1, 76
100034a4:	33fe0048 	addik	r31, r30, 72
100034a8:	33a00001 	addik	r29, r0, 1
100034ac:	eafe0048 	lwi	r23, r30, 72
100034b0:	be1700d8 	beqid	r23, 216		// 10003588
100034b4:	139f0000 	addk	r28, r31, r0
100034b8:	e8770004 	lwi	r3, r23, 4
100034bc:	3263ffff 	addik	r19, r3, -1
100034c0:	be5300bc 	bltid	r19, 188		// 1000357c
100034c4:	eb370088 	lwi	r25, r23, 136
100034c8:	be1b0124 	beqid	r27, 292		// 100035ec
100034cc:	32c30001 	addik	r22, r3, 1
100034d0:	bc1900ac 	beqi	r25, 172		// 1000357c
100034d4:	33030001 	addik	r24, r3, 1
100034d8:	66d30402 	bslli	r22, r19, 2
100034dc:	67180402 	bslli	r24, r24, 2
100034e0:	12d9b000 	addk	r22, r25, r22
100034e4:	b810001c 	brid	28		// 10003500
100034e8:	1317c000 	addk	r24, r23, r24
100034ec:	3273ffff 	addik	r19, r19, -1
100034f0:	a873ffff 	xori	r3, r19, -1
100034f4:	32d6fffc 	addik	r22, r22, -4
100034f8:	be030084 	beqid	r3, 132		// 1000357c
100034fc:	3318fffc 	addik	r24, r24, -4
10003500:	e8760080 	lwi	r3, r22, 128
10003504:	8863d800 	xor	r3, r3, r27
10003508:	bc23ffe4 	bnei	r3, -28		// 100034ec
1000350c:	eb570004 	lwi	r26, r23, 4
10003510:	30daffff 	addik	r6, r26, -1
10003514:	88e69800 	xor	r7, r6, r19
10003518:	be0700b8 	beqid	r7, 184		// 100035d0
1000351c:	e8980000 	lwi	r4, r24, 0
10003520:	f8780000 	swi	r3, r24, 0
10003524:	be04ffc8 	beqid	r4, -56		// 100034ec
10003528:	447d9c00 	bsll	r3, r29, r19
1000352c:	e8d90100 	lwi	r6, r25, 256
10003530:	84c33000 	and	r6, r3, r6
10003534:	bc06008c 	beqi	r6, 140		// 100035c0
10003538:	e8b90104 	lwi	r5, r25, 260
1000353c:	84632800 	and	r3, r3, r5
10003540:	be03009c 	beqid	r3, 156		// 100035dc
10003544:	e8a1004c 	lwi	r5, r1, 76
10003548:	99fc2000 	brald	r15, r4
1000354c:	e8b60000 	lwi	r5, r22, 0
10003550:	e8770004 	lwi	r3, r23, 4
10003554:	8b43d000 	xor	r26, r3, r26
10003558:	bc3aff54 	bnei	r26, -172		// 100034ac
1000355c:	e87c0000 	lwi	r3, r28, 0
10003560:	8863b800 	xor	r3, r3, r23
10003564:	be23ff48 	bneid	r3, -184		// 100034ac
10003568:	3273ffff 	addik	r19, r19, -1
1000356c:	a873ffff 	xori	r3, r19, -1
10003570:	32d6fffc 	addik	r22, r22, -4
10003574:	be23ff8c 	bneid	r3, -116		// 10003500
10003578:	3318fffc 	addik	r24, r24, -4
1000357c:	b0000000 	imm	0
10003580:	30600000 	addik	r3, r0, 0
10003584:	bc230194 	bnei	r3, 404		// 10003718
10003588:	e9e10000 	lwi	r15, r1, 0
1000358c:	ea61001c 	lwi	r19, r1, 28
10003590:	eac10020 	lwi	r22, r1, 32
10003594:	eae10024 	lwi	r23, r1, 36
10003598:	eb010028 	lwi	r24, r1, 40
1000359c:	eb21002c 	lwi	r25, r1, 44
100035a0:	eb410030 	lwi	r26, r1, 48
100035a4:	eb610034 	lwi	r27, r1, 52
100035a8:	eb810038 	lwi	r28, r1, 56
100035ac:	eba1003c 	lwi	r29, r1, 60
100035b0:	ebc10040 	lwi	r30, r1, 64
100035b4:	ebe10044 	lwi	r31, r1, 68
100035b8:	b60f0008 	rtsd	r15, 8
100035bc:	30210048 	addik	r1, r1, 72
100035c0:	99fc2000 	brald	r15, r4
100035c4:	80000000 	or	r0, r0, r0
100035c8:	b810ff8c 	brid	-116		// 10003554
100035cc:	e8770004 	lwi	r3, r23, 4
100035d0:	f8d70004 	swi	r6, r23, 4
100035d4:	b810ff50 	brid	-176		// 10003524
100035d8:	13460000 	addk	r26, r6, r0
100035dc:	99fc2000 	brald	r15, r4
100035e0:	e8d60000 	lwi	r6, r22, 0
100035e4:	b810ff70 	brid	-144		// 10003554
100035e8:	e8770004 	lwi	r3, r23, 4
100035ec:	be1900c8 	beqid	r25, 200		// 100036b4
100035f0:	66d60402 	bslli	r22, r22, 2
100035f4:	67530402 	bslli	r26, r19, 2
100035f8:	13030000 	addk	r24, r3, r0
100035fc:	3063ffff 	addik	r3, r3, -1
10003600:	12d7b000 	addk	r22, r23, r22
10003604:	88c39800 	xor	r6, r3, r19
10003608:	1359d000 	addk	r26, r25, r26
1000360c:	be06007c 	beqid	r6, 124		// 10003688
10003610:	e8960000 	lwi	r4, r22, 0
10003614:	f8160000 	swi	r0, r22, 0
10003618:	be040044 	beqid	r4, 68		// 1000365c
1000361c:	447d9c00 	bsll	r3, r29, r19
10003620:	e8b90100 	lwi	r5, r25, 256
10003624:	84a32800 	and	r5, r3, r5
10003628:	bc05006c 	beqi	r5, 108		// 10003694
1000362c:	e8b90104 	lwi	r5, r25, 260
10003630:	84632800 	and	r3, r3, r5
10003634:	be230070 	bneid	r3, 112		// 100036a4
10003638:	e8a1004c 	lwi	r5, r1, 76
1000363c:	99fc2000 	brald	r15, r4
10003640:	e8da0000 	lwi	r6, r26, 0
10003644:	e8770004 	lwi	r3, r23, 4
10003648:	8863c000 	xor	r3, r3, r24
1000364c:	bc23fe60 	bnei	r3, -416		// 100034ac
10003650:	e87c0000 	lwi	r3, r28, 0
10003654:	8863b800 	xor	r3, r3, r23
10003658:	bc23fe54 	bnei	r3, -428		// 100034ac
1000365c:	3273ffff 	addik	r19, r19, -1
10003660:	a873ffff 	xori	r3, r19, -1
10003664:	32d6fffc 	addik	r22, r22, -4
10003668:	be03ff14 	beqid	r3, -236		// 1000357c
1000366c:	335afffc 	addik	r26, r26, -4
10003670:	e8770004 	lwi	r3, r23, 4
10003674:	13030000 	addk	r24, r3, r0
10003678:	3063ffff 	addik	r3, r3, -1
1000367c:	88c39800 	xor	r6, r3, r19
10003680:	be26ff94 	bneid	r6, -108		// 10003614
10003684:	e8960000 	lwi	r4, r22, 0
10003688:	f8770004 	swi	r3, r23, 4
1000368c:	b810ff8c 	brid	-116		// 10003618
10003690:	13030000 	addk	r24, r3, r0
10003694:	99fc2000 	brald	r15, r4
10003698:	80000000 	or	r0, r0, r0
1000369c:	b810ffac 	brid	-84		// 10003648
100036a0:	e8770004 	lwi	r3, r23, 4
100036a4:	99fc2000 	brald	r15, r4
100036a8:	e8ba0000 	lwi	r5, r26, 0
100036ac:	b810ff9c 	brid	-100		// 10003648
100036b0:	e8770004 	lwi	r3, r23, 4
100036b4:	12d7b000 	addk	r22, r23, r22
100036b8:	13030000 	addk	r24, r3, r0
100036bc:	3063ffff 	addik	r3, r3, -1
100036c0:	88839800 	xor	r4, r3, r19
100036c4:	be040048 	beqid	r4, 72		// 1000370c
100036c8:	e8b60000 	lwi	r5, r22, 0
100036cc:	f8160000 	swi	r0, r22, 0
100036d0:	bc050024 	beqi	r5, 36		// 100036f4
100036d4:	99fc2800 	brald	r15, r5
100036d8:	80000000 	or	r0, r0, r0
100036dc:	e8770004 	lwi	r3, r23, 4
100036e0:	8863c000 	xor	r3, r3, r24
100036e4:	bc23fdc8 	bnei	r3, -568		// 100034ac
100036e8:	e87c0000 	lwi	r3, r28, 0
100036ec:	8863b800 	xor	r3, r3, r23
100036f0:	bc23fdbc 	bnei	r3, -580		// 100034ac
100036f4:	3273ffff 	addik	r19, r19, -1
100036f8:	a873ffff 	xori	r3, r19, -1
100036fc:	be03fe80 	beqid	r3, -384		// 1000357c
10003700:	32d6fffc 	addik	r22, r22, -4
10003704:	b810ffb4 	brid	-76		// 100036b8
10003708:	e8770004 	lwi	r3, r23, 4
1000370c:	f8770004 	swi	r3, r23, 4
10003710:	b810ffc0 	brid	-64		// 100036d0
10003714:	13030000 	addk	r24, r3, r0
10003718:	e8770004 	lwi	r3, r23, 4
1000371c:	bc230040 	bnei	r3, 64		// 1000375c
10003720:	e8770000 	lwi	r3, r23, 0
10003724:	bc03003c 	beqi	r3, 60		// 10003760
10003728:	be190014 	beqid	r25, 20		// 1000373c
1000372c:	f87c0000 	swi	r3, r28, 0
10003730:	b000efff 	imm	-4097
10003734:	b9f4c8cc 	brlid	r15, -14132
10003738:	10b90000 	addk	r5, r25, r0
1000373c:	b000efff 	imm	-4097
10003740:	b9f4c8c0 	brlid	r15, -14144
10003744:	10b70000 	addk	r5, r23, r0
10003748:	eafc0000 	lwi	r23, r28, 0
1000374c:	be37fd6c 	bneid	r23, -660		// 100034b8
10003750:	e9e10000 	lwi	r15, r1, 0
10003754:	b810fe3c 	brid	-452		// 10003590
10003758:	ea61001c 	lwi	r19, r1, 28
1000375c:	e8770000 	lwi	r3, r23, 0
10003760:	13970000 	addk	r28, r23, r0
10003764:	b810ffe8 	brid	-24		// 1000374c
10003768:	12e30000 	addk	r23, r3, r0

1000376c <__do_global_ctors_aux>:
1000376c:	b0001000 	imm	4096
10003770:	e86040cc 	lwi	r3, r0, 16588	// 100040cc <__data_end>
10003774:	3021ffe0 	addik	r1, r1, -32
10003778:	f9e10000 	swi	r15, r1, 0
1000377c:	a883ffff 	xori	r4, r3, -1
10003780:	be040024 	beqid	r4, 36		// 100037a4
10003784:	fa61001c 	swi	r19, r1, 28
10003788:	b0001000 	imm	4096
1000378c:	326040cc 	addik	r19, r0, 16588	// 100040cc <__data_end>
10003790:	99fc1800 	brald	r15, r3
10003794:	3273fffc 	addik	r19, r19, -4
10003798:	e8730000 	lwi	r3, r19, 0
1000379c:	a883ffff 	xori	r4, r3, -1
100037a0:	bc24fff0 	bnei	r4, -16		// 10003790
100037a4:	e9e10000 	lwi	r15, r1, 0
100037a8:	ea61001c 	lwi	r19, r1, 28
100037ac:	b60f0008 	rtsd	r15, 8
100037b0:	30210020 	addik	r1, r1, 32

100037b4 <main>:
#include "e_printf.h" /* embedded printf */

#define TIMER_MAX_VALUE 0xFFFFFFFF

int main(void)
{
100037b4:	3021feb0 	addik	r1, r1, -336
100037b8:	fae10134 	swi	r23, r1, 308
100037bc:	fb010138 	swi	r24, r1, 312
100037c0:	fb21013c 	swi	r25, r1, 316
100037c4:	fb810148 	swi	r28, r1, 328
100037c8:	fba1014c 	swi	r29, r1, 332
100037cc:	f9e10000 	swi	r15, r1, 0
100037d0:	fa61012c 	swi	r19, r1, 300
100037d4:	fac10130 	swi	r22, r1, 304
100037d8:	fb410140 	swi	r26, r1, 320
100037dc:	fb610144 	swi	r27, r1, 324
  sb_uint8_t key[4*Nb];
  sb_uint8_t cipher[4*Nb];
  sb_uint8_t w[4][Nb*(Nr+1)];
  sb_uint8_t rx_uart_buffer[32];
  sb_uint32_t end_time;
  sb_uint8_t led = 0xaa;
100037e0:	330000aa 	addik	r24, r0, 170
    {
        
      /* RESET DATA */
      for(i=0;i<16;i++)
      {
        data[i] = 0;
100037e4:	12e00000 	addk	r23, r0, r0
 * \fn void timer_1_reset(void)
 * \brief Force reset timer 1
 */
static __inline__ void timer_1_reset(void)
{
  WRITE_REG32(TIMER_1_CONTROL_REG,TIMER_RESET_BIT);
100037e8:	33200002 	addik	r25, r0, 2
 * \param[in] threshold Threshold value
 */
static __inline__ void timer_1_init(const sb_uint32_t threshold)
{
  WRITE_REG32(TIMER_1_CONTROL_REG,TIMER_RESET_BIT);
  WRITE_REG32(TIMER_1_THRESHOLD_REG,threshold);
100037ec:	33a0ffff 	addik	r29, r0, -1
 * \fn void timer_1_enable(void)
 * \brief Enable timer 1
 */
static __inline__ void timer_1_enable(void)
{
  WRITE_REG32(TIMER_1_CONTROL_REG,TIMER_ENABLE_BIT);
100037f0:	33800001 	addik	r28, r0, 1
100037f4:	f801004c 	swi	r0, r1, 76
100037f8:	f8010050 	swi	r0, r1, 80
100037fc:	f8010054 	swi	r0, r1, 84
10003800:	f8010058 	swi	r0, r1, 88
        key[i]  = 0; 
10003804:	f801002c 	swi	r0, r1, 44
10003808:	f8010030 	swi	r0, r1, 48
1000380c:	f8010034 	swi	r0, r1, 52
10003810:	f8010038 	swi	r0, r1, 56
10003814:	12600000 	addk	r19, r0, r0
      }

      /* GET DATA */
      for(i=0;i<32;i++)   
      {    
        uart_get(&rx_uart_buffer[i]);   
10003818:	3061005c 	addik	r3, r1, 92
1000381c:	10a39800 	addk	r5, r3, r19
        data[i] = 0;
        key[i]  = 0; 
      }

      /* GET DATA */
      for(i=0;i<32;i++)   
10003820:	32730001 	addik	r19, r19, 1
      {    
        uart_get(&rx_uart_buffer[i]);   
10003824:	b9f4ca38 	brlid	r15, -13768	// 1000025c <uart_get>
10003828:	aad30020 	xori	r22, r19, 32
        data[i] = 0;
        key[i]  = 0; 
      }

      /* GET DATA */
      for(i=0;i<32;i++)   
1000382c:	be36fff0 	bneid	r22, -16		// 1000381c
10003830:	3061005c 	addik	r3, r1, 92
      {    
        uart_get(&rx_uart_buffer[i]);   
      }
		
      e_printf("\nInput:\n");
10003834:	b0001000 	imm	4096
10003838:	30a03f54 	addik	r5, r0, 16212
1000383c:	b9f4d0bc 	brlid	r15, -12100	// 100008f8 <e_printf>
10003840:	12760000 	addk	r19, r22, r0

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
10003844:	e061005c 	lbui	r3, r1, 92
        uart_put(data[i]);
10003848:	10a30000 	addk	r5, r3, r0
1000384c:	b9f4c9e4 	brlid	r15, -13852	// 10000230 <uart_put>
10003850:	f061004c 	sbi	r3, r1, 76
      e_printf("\nInput:\n");

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
10003854:	e061005d 	lbui	r3, r1, 93
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
10003858:	e081006c 	lbui	r4, r1, 108

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
1000385c:	10a30000 	addk	r5, r3, r0
        key[i]  = rx_uart_buffer[i+16];
10003860:	f081002c 	sbi	r4, r1, 44

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
10003864:	b9f4c9cc 	brlid	r15, -13876	// 10000230 <uart_put>
10003868:	f061004d 	sbi	r3, r1, 77
      e_printf("\nInput:\n");

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
1000386c:	e061005e 	lbui	r3, r1, 94
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
10003870:	e081006d 	lbui	r4, r1, 109

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
10003874:	10a30000 	addk	r5, r3, r0
        key[i]  = rx_uart_buffer[i+16];
10003878:	f081002d 	sbi	r4, r1, 45

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
1000387c:	b9f4c9b4 	brlid	r15, -13900	// 10000230 <uart_put>
10003880:	f061004e 	sbi	r3, r1, 78
      e_printf("\nInput:\n");

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
10003884:	e061005f 	lbui	r3, r1, 95
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
10003888:	e081006e 	lbui	r4, r1, 110

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
1000388c:	10a30000 	addk	r5, r3, r0
        key[i]  = rx_uart_buffer[i+16];
10003890:	f081002e 	sbi	r4, r1, 46

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
10003894:	b9f4c99c 	brlid	r15, -13924	// 10000230 <uart_put>
10003898:	f061004f 	sbi	r3, r1, 79
      e_printf("\nInput:\n");

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
1000389c:	e0610060 	lbui	r3, r1, 96
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
100038a0:	e081006f 	lbui	r4, r1, 111

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
100038a4:	10a30000 	addk	r5, r3, r0
        key[i]  = rx_uart_buffer[i+16];
100038a8:	f081002f 	sbi	r4, r1, 47

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
100038ac:	b9f4c984 	brlid	r15, -13948	// 10000230 <uart_put>
100038b0:	f0610050 	sbi	r3, r1, 80
      e_printf("\nInput:\n");

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
100038b4:	e0610061 	lbui	r3, r1, 97
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
100038b8:	e0810070 	lbui	r4, r1, 112

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
100038bc:	10a30000 	addk	r5, r3, r0
        key[i]  = rx_uart_buffer[i+16];
100038c0:	f0810030 	sbi	r4, r1, 48

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
100038c4:	b9f4c96c 	brlid	r15, -13972	// 10000230 <uart_put>
100038c8:	f0610051 	sbi	r3, r1, 81
      e_printf("\nInput:\n");

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
100038cc:	e0610062 	lbui	r3, r1, 98
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
100038d0:	e0810071 	lbui	r4, r1, 113

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
100038d4:	10a30000 	addk	r5, r3, r0
        key[i]  = rx_uart_buffer[i+16];
100038d8:	f0810031 	sbi	r4, r1, 49

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
100038dc:	b9f4c954 	brlid	r15, -13996	// 10000230 <uart_put>
100038e0:	f0610052 	sbi	r3, r1, 82
      e_printf("\nInput:\n");

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
100038e4:	e0610063 	lbui	r3, r1, 99
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
100038e8:	e0810072 	lbui	r4, r1, 114

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
100038ec:	10a30000 	addk	r5, r3, r0
        key[i]  = rx_uart_buffer[i+16];
100038f0:	f0810032 	sbi	r4, r1, 50

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
100038f4:	b9f4c93c 	brlid	r15, -14020	// 10000230 <uart_put>
100038f8:	f0610053 	sbi	r3, r1, 83
      e_printf("\nInput:\n");

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
100038fc:	e0610064 	lbui	r3, r1, 100
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
10003900:	e0810073 	lbui	r4, r1, 115

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
10003904:	10a30000 	addk	r5, r3, r0
        key[i]  = rx_uart_buffer[i+16];
10003908:	f0810033 	sbi	r4, r1, 51

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
1000390c:	b9f4c924 	brlid	r15, -14044	// 10000230 <uart_put>
10003910:	f0610054 	sbi	r3, r1, 84
      e_printf("\nInput:\n");

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
10003914:	e0610065 	lbui	r3, r1, 101
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
10003918:	e0810074 	lbui	r4, r1, 116

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
1000391c:	10a30000 	addk	r5, r3, r0
        key[i]  = rx_uart_buffer[i+16];
10003920:	f0810034 	sbi	r4, r1, 52

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
10003924:	b9f4c90c 	brlid	r15, -14068	// 10000230 <uart_put>
10003928:	f0610055 	sbi	r3, r1, 85
      e_printf("\nInput:\n");

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
1000392c:	e0610066 	lbui	r3, r1, 102
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
10003930:	e0810075 	lbui	r4, r1, 117

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
10003934:	10a30000 	addk	r5, r3, r0
        key[i]  = rx_uart_buffer[i+16];
10003938:	f0810035 	sbi	r4, r1, 53

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
1000393c:	b9f4c8f4 	brlid	r15, -14092	// 10000230 <uart_put>
10003940:	f0610056 	sbi	r3, r1, 86
      e_printf("\nInput:\n");

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
10003944:	e0610067 	lbui	r3, r1, 103
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
10003948:	e0810076 	lbui	r4, r1, 118

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
1000394c:	10a30000 	addk	r5, r3, r0
        key[i]  = rx_uart_buffer[i+16];
10003950:	f0810036 	sbi	r4, r1, 54

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
10003954:	b9f4c8dc 	brlid	r15, -14116	// 10000230 <uart_put>
10003958:	f0610057 	sbi	r3, r1, 87
      e_printf("\nInput:\n");

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
1000395c:	e0610068 	lbui	r3, r1, 104
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
10003960:	e0810077 	lbui	r4, r1, 119

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
10003964:	10a30000 	addk	r5, r3, r0
        key[i]  = rx_uart_buffer[i+16];
10003968:	f0810037 	sbi	r4, r1, 55

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
1000396c:	b9f4c8c4 	brlid	r15, -14140	// 10000230 <uart_put>
10003970:	f0610058 	sbi	r3, r1, 88
      e_printf("\nInput:\n");

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
10003974:	e0610069 	lbui	r3, r1, 105
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
10003978:	e0810078 	lbui	r4, r1, 120

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
1000397c:	10a30000 	addk	r5, r3, r0
        key[i]  = rx_uart_buffer[i+16];
10003980:	f0810038 	sbi	r4, r1, 56

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
10003984:	b9f4c8ac 	brlid	r15, -14164	// 10000230 <uart_put>
10003988:	f0610059 	sbi	r3, r1, 89
      e_printf("\nInput:\n");

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
1000398c:	e061006a 	lbui	r3, r1, 106
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
10003990:	e0810079 	lbui	r4, r1, 121

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
10003994:	10a30000 	addk	r5, r3, r0
        key[i]  = rx_uart_buffer[i+16];
10003998:	f0810039 	sbi	r4, r1, 57

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
1000399c:	b9f4c894 	brlid	r15, -14188	// 10000230 <uart_put>
100039a0:	f061005a 	sbi	r3, r1, 90
      e_printf("\nInput:\n");

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
100039a4:	e061006b 	lbui	r3, r1, 107
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
100039a8:	e081007a 	lbui	r4, r1, 122

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
100039ac:	10a30000 	addk	r5, r3, r0
        key[i]  = rx_uart_buffer[i+16];
100039b0:	f081003a 	sbi	r4, r1, 58

      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
100039b4:	b9f4c87c 	brlid	r15, -14212	// 10000230 <uart_put>
100039b8:	f061005b 	sbi	r3, r1, 91
        key[i]  = rx_uart_buffer[i+16];
100039bc:	e061007b 	lbui	r3, r1, 123
      timer_1_reset();
      timer_1_init(TIMER_MAX_VALUE);
      timer_1_enable();

      /* CIPHER */
      KeyExpansion(key,w);
100039c0:	30a1002c 	addik	r5, r1, 44
100039c4:	30c1007c 	addik	r6, r1, 124
      /* DATA & KEY EXTRACTION */
      for (i=0;i<16;i++)
      {
        data[i] = rx_uart_buffer[i];
        uart_put(data[i]);
        key[i]  = rx_uart_buffer[i+16];
100039c8:	f061003b 	sbi	r3, r1, 59
 * \fn void timer_1_reset(void)
 * \brief Force reset timer 1
 */
static __inline__ void timer_1_reset(void)
{
  WRITE_REG32(TIMER_1_CONTROL_REG,TIMER_RESET_BIT);
100039cc:	b0005000 	imm	20480
100039d0:	fb200000 	swi	r25, r0, 0
 * \brief Timer 1 initialization
 * \param[in] threshold Threshold value
 */
static __inline__ void timer_1_init(const sb_uint32_t threshold)
{
  WRITE_REG32(TIMER_1_CONTROL_REG,TIMER_RESET_BIT);
100039d4:	b0005000 	imm	20480
100039d8:	fb200000 	swi	r25, r0, 0
  WRITE_REG32(TIMER_1_THRESHOLD_REG,threshold);
100039dc:	b0005000 	imm	20480
100039e0:	fba00004 	swi	r29, r0, 4
 * \fn void timer_1_enable(void)
 * \brief Enable timer 1
 */
static __inline__ void timer_1_enable(void)
{
  WRITE_REG32(TIMER_1_CONTROL_REG,TIMER_ENABLE_BIT);
100039e4:	b0005000 	imm	20480
100039e8:	fb800000 	swi	r28, r0, 0
      timer_1_reset();
      timer_1_init(TIMER_MAX_VALUE);
      timer_1_enable();

      /* CIPHER */
      KeyExpansion(key,w);
100039ec:	b9f4cfa8 	brlid	r15, -12376	// 10000994 <KeyExpansion>
100039f0:	80000000 	or	r0, r0, r0
      Cipher(data,cipher,w);
100039f4:	30a1004c 	addik	r5, r1, 76
100039f8:	30c1001c 	addik	r6, r1, 28
100039fc:	b9f4e3c0 	brlid	r15, -7232	// 10001dbc <Cipher>
10003a00:	30e1007c 	addik	r7, r1, 124

      end_time = timer_1_getval();
      timer_1_disable();

      /* INVCIPHER */
      InvCipher(cipher,data2,w);
10003a04:	30c1003c 	addik	r6, r1, 60
10003a08:	30e1007c 	addik	r7, r1, 124
10003a0c:	30a1001c 	addik	r5, r1, 28
 * \brief This function returns the value of the first timer's counter
 * \return Counter value
 */
static __inline__ sb_uint32_t timer_1_getval(void)
{
  return READ_REG32(TIMER_1_COUNTER_REG);
10003a10:	b0005000 	imm	20480
10003a14:	eb400008 	lwi	r26, r0, 8
 * \fn void timer_1_disable(void)
 * \brief Disable timer 1
 */
static __inline__ void timer_1_disable(void)
{
  WRITE_REG32(TIMER_1_CONTROL_REG,0x0);
10003a18:	b0005000 	imm	20480
10003a1c:	fac00000 	swi	r22, r0, 0
10003a20:	b9f4f03c 	brlid	r15, -4036	// 10002a5c <InvCipher>
10003a24:	80000000 	or	r0, r0, r0
			
      e_printf("\nCipher:\n");
10003a28:	b0001000 	imm	4096
10003a2c:	30a03f60 	addik	r5, r0, 16224
10003a30:	b9f4cec8 	brlid	r15, -12600	// 100008f8 <e_printf>
10003a34:	80000000 	or	r0, r0, r0

      /* SEND DATA */
      for (i=0;i<16;i++)
      {
        uart_put(cipher[i]); 
10003a38:	b9f4c7f8 	brlid	r15, -14344	// 10000230 <uart_put>
10003a3c:	e0a1001c 	lbui	r5, r1, 28
10003a40:	b9f4c7f0 	brlid	r15, -14352	// 10000230 <uart_put>
10003a44:	e0a1001d 	lbui	r5, r1, 29
10003a48:	b9f4c7e8 	brlid	r15, -14360	// 10000230 <uart_put>
10003a4c:	e0a1001e 	lbui	r5, r1, 30
10003a50:	b9f4c7e0 	brlid	r15, -14368	// 10000230 <uart_put>
10003a54:	e0a1001f 	lbui	r5, r1, 31
10003a58:	b9f4c7d8 	brlid	r15, -14376	// 10000230 <uart_put>
10003a5c:	e0a10020 	lbui	r5, r1, 32
10003a60:	b9f4c7d0 	brlid	r15, -14384	// 10000230 <uart_put>
10003a64:	e0a10021 	lbui	r5, r1, 33
10003a68:	b9f4c7c8 	brlid	r15, -14392	// 10000230 <uart_put>
10003a6c:	e0a10022 	lbui	r5, r1, 34
10003a70:	b9f4c7c0 	brlid	r15, -14400	// 10000230 <uart_put>
10003a74:	e0a10023 	lbui	r5, r1, 35
10003a78:	b9f4c7b8 	brlid	r15, -14408	// 10000230 <uart_put>
10003a7c:	e0a10024 	lbui	r5, r1, 36
10003a80:	b9f4c7b0 	brlid	r15, -14416	// 10000230 <uart_put>
10003a84:	e0a10025 	lbui	r5, r1, 37
10003a88:	b9f4c7a8 	brlid	r15, -14424	// 10000230 <uart_put>
10003a8c:	e0a10026 	lbui	r5, r1, 38
10003a90:	b9f4c7a0 	brlid	r15, -14432	// 10000230 <uart_put>
10003a94:	e0a10027 	lbui	r5, r1, 39
10003a98:	b9f4c798 	brlid	r15, -14440	// 10000230 <uart_put>
10003a9c:	e0a10028 	lbui	r5, r1, 40
10003aa0:	b9f4c790 	brlid	r15, -14448	// 10000230 <uart_put>
10003aa4:	e0a10029 	lbui	r5, r1, 41
10003aa8:	b9f4c788 	brlid	r15, -14456	// 10000230 <uart_put>
10003aac:	e0a1002a 	lbui	r5, r1, 42
10003ab0:	b9f4c780 	brlid	r15, -14464	// 10000230 <uart_put>
10003ab4:	e0a1002b 	lbui	r5, r1, 43
      }
 
      e_printf("\nDecipher:\n");
10003ab8:	b0001000 	imm	4096
10003abc:	30a03f6c 	addik	r5, r0, 16236
10003ac0:	b9f4ce38 	brlid	r15, -12744	// 100008f8 <e_printf>
10003ac4:	80000000 	or	r0, r0, r0

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003ac8:	b9f4c768 	brlid	r15, -14488	// 10000230 <uart_put>
10003acc:	e0a1003c 	lbui	r5, r1, 60
10003ad0:	e0a1003d 	lbui	r5, r1, 61
        if(data2[i] != data[i])
10003ad4:	e361003c 	lbui	r27, r1, 60

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003ad8:	b9f4c758 	brlid	r15, -14504	// 10000230 <uart_put>
10003adc:	e2c1004c 	lbui	r22, r1, 76
        if(data2[i] != data[i])
10003ae0:	e081003d 	lbui	r4, r1, 61
10003ae4:	e061004d 	lbui	r3, r1, 77
10003ae8:	88641800 	xor	r3, r4, r3
10003aec:	bc0301e4 	beqi	r3, 484		// 10003cd0

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003af0:	b9f4c740 	brlid	r15, -14528	// 10000230 <uart_put>
10003af4:	e0a1003e 	lbui	r5, r1, 62
        if(data2[i] != data[i])
10003af8:	e081003e 	lbui	r4, r1, 62
10003afc:	e061004e 	lbui	r3, r1, 78

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003b00:	e0a1003f 	lbui	r5, r1, 63
        if(data2[i] != data[i])
10003b04:	88641800 	xor	r3, r4, r3
        {       
          test = sb_false; 
10003b08:	8863bc00 	pcmpeq	r3, r3, r23
10003b0c:	14630000 	rsubk	r3, r3, r0

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003b10:	b9f4c720 	brlid	r15, -14560	// 10000230 <uart_put>
10003b14:	86731800 	and	r19, r19, r3
        if(data2[i] != data[i])
10003b18:	e081003f 	lbui	r4, r1, 63
10003b1c:	e061004f 	lbui	r3, r1, 79

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003b20:	e0a10040 	lbui	r5, r1, 64
        if(data2[i] != data[i])
10003b24:	88641800 	xor	r3, r4, r3
        {       
          test = sb_false; 
10003b28:	8863bc00 	pcmpeq	r3, r3, r23
10003b2c:	14630000 	rsubk	r3, r3, r0

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003b30:	b9f4c700 	brlid	r15, -14592	// 10000230 <uart_put>
10003b34:	86731800 	and	r19, r19, r3
        if(data2[i] != data[i])
10003b38:	e0810040 	lbui	r4, r1, 64
10003b3c:	e0610050 	lbui	r3, r1, 80

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003b40:	e0a10041 	lbui	r5, r1, 65
        if(data2[i] != data[i])
10003b44:	88641800 	xor	r3, r4, r3
        {       
          test = sb_false; 
10003b48:	8863bc00 	pcmpeq	r3, r3, r23
10003b4c:	14630000 	rsubk	r3, r3, r0

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003b50:	b9f4c6e0 	brlid	r15, -14624	// 10000230 <uart_put>
10003b54:	86731800 	and	r19, r19, r3
        if(data2[i] != data[i])
10003b58:	e0810041 	lbui	r4, r1, 65
10003b5c:	e0610051 	lbui	r3, r1, 81

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003b60:	e0a10042 	lbui	r5, r1, 66
        if(data2[i] != data[i])
10003b64:	88641800 	xor	r3, r4, r3
        {       
          test = sb_false; 
10003b68:	8863bc00 	pcmpeq	r3, r3, r23
10003b6c:	14630000 	rsubk	r3, r3, r0

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003b70:	b9f4c6c0 	brlid	r15, -14656	// 10000230 <uart_put>
10003b74:	86731800 	and	r19, r19, r3
        if(data2[i] != data[i])
10003b78:	e0810042 	lbui	r4, r1, 66
10003b7c:	e0610052 	lbui	r3, r1, 82

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003b80:	e0a10043 	lbui	r5, r1, 67
        if(data2[i] != data[i])
10003b84:	88641800 	xor	r3, r4, r3
        {       
          test = sb_false; 
10003b88:	8863bc00 	pcmpeq	r3, r3, r23
10003b8c:	14630000 	rsubk	r3, r3, r0

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003b90:	b9f4c6a0 	brlid	r15, -14688	// 10000230 <uart_put>
10003b94:	86731800 	and	r19, r19, r3
        if(data2[i] != data[i])
10003b98:	e0810043 	lbui	r4, r1, 67
10003b9c:	e0610053 	lbui	r3, r1, 83

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003ba0:	e0a10044 	lbui	r5, r1, 68
        if(data2[i] != data[i])
10003ba4:	88641800 	xor	r3, r4, r3
        {       
          test = sb_false; 
10003ba8:	8863bc00 	pcmpeq	r3, r3, r23
10003bac:	14630000 	rsubk	r3, r3, r0

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003bb0:	b9f4c680 	brlid	r15, -14720	// 10000230 <uart_put>
10003bb4:	86731800 	and	r19, r19, r3
        if(data2[i] != data[i])
10003bb8:	e0810044 	lbui	r4, r1, 68
10003bbc:	e0610054 	lbui	r3, r1, 84

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003bc0:	e0a10045 	lbui	r5, r1, 69
        if(data2[i] != data[i])
10003bc4:	88641800 	xor	r3, r4, r3
        {       
          test = sb_false; 
10003bc8:	8863bc00 	pcmpeq	r3, r3, r23
10003bcc:	14630000 	rsubk	r3, r3, r0

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003bd0:	b9f4c660 	brlid	r15, -14752	// 10000230 <uart_put>
10003bd4:	86731800 	and	r19, r19, r3
        if(data2[i] != data[i])
10003bd8:	e0810045 	lbui	r4, r1, 69
10003bdc:	e0610055 	lbui	r3, r1, 85

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003be0:	e0a10046 	lbui	r5, r1, 70
        if(data2[i] != data[i])
10003be4:	88641800 	xor	r3, r4, r3
        {       
          test = sb_false; 
10003be8:	8863bc00 	pcmpeq	r3, r3, r23
10003bec:	14630000 	rsubk	r3, r3, r0

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003bf0:	b9f4c640 	brlid	r15, -14784	// 10000230 <uart_put>
10003bf4:	86731800 	and	r19, r19, r3
        if(data2[i] != data[i])
10003bf8:	e0810046 	lbui	r4, r1, 70
10003bfc:	e0610056 	lbui	r3, r1, 86

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003c00:	e0a10047 	lbui	r5, r1, 71
        if(data2[i] != data[i])
10003c04:	88641800 	xor	r3, r4, r3
        {       
          test = sb_false; 
10003c08:	8863bc00 	pcmpeq	r3, r3, r23
10003c0c:	14630000 	rsubk	r3, r3, r0

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003c10:	b9f4c620 	brlid	r15, -14816	// 10000230 <uart_put>
10003c14:	86731800 	and	r19, r19, r3
        if(data2[i] != data[i])
10003c18:	e0810047 	lbui	r4, r1, 71
10003c1c:	e0610057 	lbui	r3, r1, 87

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003c20:	e0a10048 	lbui	r5, r1, 72
        if(data2[i] != data[i])
10003c24:	88641800 	xor	r3, r4, r3
        {       
          test = sb_false; 
10003c28:	8863bc00 	pcmpeq	r3, r3, r23
10003c2c:	14630000 	rsubk	r3, r3, r0

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003c30:	b9f4c600 	brlid	r15, -14848	// 10000230 <uart_put>
10003c34:	86731800 	and	r19, r19, r3
        if(data2[i] != data[i])
10003c38:	e0810048 	lbui	r4, r1, 72
10003c3c:	e0610058 	lbui	r3, r1, 88

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003c40:	e0a10049 	lbui	r5, r1, 73
        if(data2[i] != data[i])
10003c44:	88641800 	xor	r3, r4, r3
        {       
          test = sb_false; 
10003c48:	8863bc00 	pcmpeq	r3, r3, r23
10003c4c:	14630000 	rsubk	r3, r3, r0

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003c50:	b9f4c5e0 	brlid	r15, -14880	// 10000230 <uart_put>
10003c54:	86731800 	and	r19, r19, r3
        if(data2[i] != data[i])
10003c58:	e0810049 	lbui	r4, r1, 73
10003c5c:	e0610059 	lbui	r3, r1, 89

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003c60:	e0a1004a 	lbui	r5, r1, 74
        if(data2[i] != data[i])
10003c64:	88641800 	xor	r3, r4, r3
        {       
          test = sb_false; 
10003c68:	8863bc00 	pcmpeq	r3, r3, r23
10003c6c:	14630000 	rsubk	r3, r3, r0

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003c70:	b9f4c5c0 	brlid	r15, -14912	// 10000230 <uart_put>
10003c74:	86731800 	and	r19, r19, r3
        if(data2[i] != data[i])
10003c78:	e081004a 	lbui	r4, r1, 74
10003c7c:	e061005a 	lbui	r3, r1, 90

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003c80:	e0a1004b 	lbui	r5, r1, 75
        if(data2[i] != data[i])
10003c84:	88641800 	xor	r3, r4, r3
        {       
          test = sb_false; 
10003c88:	8863bc00 	pcmpeq	r3, r3, r23
10003c8c:	14630000 	rsubk	r3, r3, r0

      /* SEND DATA */
      test = sb_true;
      for(i=0;i<16;i++)
      {
        uart_put(data2[i]);
10003c90:	b9f4c5a0 	brlid	r15, -14944	// 10000230 <uart_put>
10003c94:	86731800 	and	r19, r19, r3
        if(data2[i] != data[i])
10003c98:	e081004b 	lbui	r4, r1, 75
10003c9c:	e061005b 	lbui	r3, r1, 91
10003ca0:	88641800 	xor	r3, r4, r3
10003ca4:	be030034 	beqid	r3, 52		// 10003cd8
10003ca8:	aa730001 	xori	r19, r19, 1
      {
        e_printf("\nDone successfully in %d ticks\n",end_time*C_S_CLK_DIV);
      }
      else
      {
        e_printf("\nError...\n");
10003cac:	b0001000 	imm	4096
10003cb0:	30a03f98 	addik	r5, r0, 16280
10003cb4:	b9f4cc44 	brlid	r15, -13244	// 100008f8 <e_printf>
10003cb8:	80000000 	or	r0, r0, r0
      }

      WRITE_REG32(GPIO_LED_REG,(led & GPIO_LED_BANK));
      led ^=0xFF;
10003cbc:	a878ffff 	xori	r3, r24, -1
      else
      {
        e_printf("\nError...\n");
      }

      WRITE_REG32(GPIO_LED_REG,(led & GPIO_LED_BANK));
10003cc0:	b0003000 	imm	12288
10003cc4:	fb000000 	swi	r24, r0, 0
      led ^=0xFF;

    }
10003cc8:	b810fb2c 	brid	-1236		// 100037f4
10003ccc:	a70300ff 	andi	r24, r3, 255
      }
 
      e_printf("\nDecipher:\n");

      /* SEND DATA */
      test = sb_true;
10003cd0:	b810fe20 	brid	-480		// 10003af0
10003cd4:	8a7bb400 	pcmpeq	r19, r27, r22
        {       
          test = sb_false; 
        }
      }

      if(test == sb_true)
10003cd8:	bc33ffd4 	bnei	r19, -44		// 10003cac
      {
        e_printf("\nDone successfully in %d ticks\n",end_time*C_S_CLK_DIV);
10003cdc:	b0001000 	imm	4096
10003ce0:	30a03f78 	addik	r5, r0, 16248
10003ce4:	b9f4cc14 	brlid	r15, -13292	// 100008f8 <e_printf>
10003ce8:	10dad000 	addk	r6, r26, r26
      {
        e_printf("\nError...\n");
      }

      WRITE_REG32(GPIO_LED_REG,(led & GPIO_LED_BANK));
      led ^=0xFF;
10003cec:	b810ffd4 	brid	-44		// 10003cc0
10003cf0:	a878ffff 	xori	r3, r24, -1

Disassembly of section .init:

10003cf4 <__init>:
10003cf4:	3021fff8 	addik	r1, r1, -8
10003cf8:	d9e00800 	sw	r15, r0, r1
10003cfc:	b0001000 	imm	4096
10003d00:	31604310 	addik	r11, r0, 17168
10003d04:	940bc802 	mts	rshr, r11
10003d08:	b0001000 	imm	4096
10003d0c:	31604224 	addik	r11, r0, 16932
10003d10:	940bc800 	mts	rslr, r11
10003d14:	b9f4c41c 	brlid	r15, -15332	// 10000130 <frame_dummy>
10003d18:	80000000 	or	r0, r0, r0
10003d1c:	b9f4fa50 	brlid	r15, -1456	// 1000376c <__do_global_ctors_aux>
10003d20:	80000000 	or	r0, r0, r0
10003d24:	c9e00800 	lw	r15, r0, r1
10003d28:	b60f0008 	rtsd	r15, 8
10003d2c:	30210008 	addik	r1, r1, 8

Disassembly of section .fini:

10003d30 <__fini>:
10003d30:	3021fff8 	addik	r1, r1, -8
10003d34:	d9e00800 	sw	r15, r0, r1
10003d38:	b9f4c344 	brlid	r15, -15548	// 1000007c <__do_global_dtors_aux>
10003d3c:	80000000 	or	r0, r0, r0
10003d40:	c9e00800 	lw	r15, r0, r1
10003d44:	b60f0008 	rtsd	r15, 8
10003d48:	30210008 	addik	r1, r1, 8

Disassembly of section .rodata:

10003d4c <__rodata_start>:
10003d4c:	286e756c 	addic	r3, r14, 30060
10003d50:	6c290000 	get	r1, rfsl0

10003d54 <Sbox>:
10003d54:	637c777b 	muli	r27, r28, 30587
10003d58:	f26b6fc5 	sbi	r19, r11, 28613
10003d5c:	3001672b 	addik	r0, r1, 26411
10003d60:	fed7ab76 		r22, r23, r21
10003d64:	ca82c97d 		r20, r2, r25
10003d68:	fa5947f0 	swi	r18, r25, 18416
10003d6c:	add4a2af 	andni	r14, r20, -23889
10003d70:	9ca472c0 		r5, r4, r14
10003d74:	b7fd9326 		r31, r29, r18
10003d78:	363ff7cc 	rsubik	r17, r31, -2100
10003d7c:	34a5e5f1 	rsubik	r5, r5, -6671
10003d80:	71d83115 		r14, r24, r6
10003d84:	04c723c3 	neg	r6, r7
10003d88:	1896059a 		r4, r22, r0
10003d8c:	071280e2 	neg	r24, r18
10003d90:	eb27b275 	lwi	r25, r7, -19851
10003d94:	09832c1a 		r12, r3, r5
10003d98:	1b6e5aa0 		r27, r14, r11
10003d9c:	523bd6b3 		r17, r27, r26
10003da0:	29e32f84 	addic	r15, r3, 12164
10003da4:	53d100ed 		r30, r17, r0
10003da8:	20fcb15b 	addi	r7, r28, -20133
10003dac:	6acbbe39 		r22, r11, r23
10003db0:	4a4c58cf 		r18, r12, r11
10003db4:	d0efaafb 		r7, r15, r21
10003db8:	434d3385 		r26, r13, r6
10003dbc:	45f9027f 	bsra	r15, r25, r0
10003dc0:	503c9fa8 		r1, r28, r19
10003dc4:	51a3408f 		r13, r3, r8
10003dc8:	929d38f5 		r20, r29, r7
10003dcc:	bcb6da21 	bgei	r22, -9695		// 100017ed
10003dd0:	10fff3d2 		r7, r31, r30
10003dd4:	cd0c13ec 		r8, r12, r2
10003dd8:	5f974417 		r28, r23, r8
10003ddc:	c4a77e3d 		r5, r7, r15
10003de0:	645d1973 	bsrli	r2, r29, 19
10003de4:	60814fdc 	muli	r4, r1, 20444
10003de8:	222a9088 	addi	r17, r10, -28536
10003dec:	46eeb814 	bsrl	r23, r14, r23
10003df0:	de5e0bdb 		r18, r30, r1
10003df4:	e0323a0a 	lbui	r1, r18, 14858
10003df8:	4906245c 		r8, r6, r4
10003dfc:	c2d3ac62 		r22, r19, r21
10003e00:	9195e479 		r12, r21, r28
10003e04:	e7c8376d 	lhui	r30, r8, 14189
10003e08:	8dd54ea9 		r14, r21, r9
10003e0c:	6c56f4ea 	tnecput	rfsl10
10003e10:	657aae08 		r11, r26, r21
10003e14:	ba78252e 		r19, r24, r4
10003e18:	1ca6b4c6 		r5, r6, r22
10003e1c:	e8dd741f 	lwi	r6, r29, 29727
10003e20:	4bbd8b8a 		r29, r29, r17
10003e24:	703eb566 		r1, r30, r22
10003e28:	4803f60e 		r0, r3, r30
10003e2c:	613557b9 	muli	r9, r21, 22457
10003e30:	86c11d9e 		r22, r1, r3
10003e34:	e1f89811 	lbui	r15, r24, -26607
10003e38:	69d98e94 		r14, r25, r17
10003e3c:	9b1e87e9 		r24, r30, r16
10003e40:	ce5528df 		r18, r21, r5
10003e44:	8ca1890d 		r5, r1, r17
10003e48:	bfe64268 		r31, r6, r8
10003e4c:	41992d0f 		r12, r25, r5
10003e50:	b054bb16 		r2, r20, r23

10003e54 <InvSbox>:
10003e54:	52096ad5 		r16, r9, r13
10003e58:	3036a538 	addik	r1, r22, -23240
10003e5c:	bf40a39e 		r26, r0, r20
10003e60:	81f3d7fb 		r15, r19, r26
10003e64:	7ce33982 		r7, r3, r7
10003e68:	9b2fff87 		r25, r15, r31
10003e6c:	348e4344 	rsubik	r4, r14, 17220
10003e70:	c4dee9cb 		r6, r30, r29
10003e74:	547b9432 		r3, r27, r18
10003e78:	a6c2233d 	andi	r22, r2, 9021
10003e7c:	ee4c950b 		r18, r12, r18
10003e80:	42fac34e 		r23, r26, r24
10003e84:	082ea166 		r1, r14, r20
10003e88:	28d924b2 	addic	r6, r25, 9394
10003e8c:	765ba249 		r18, r27, r20
10003e90:	6d8bd125 	tnput	rfsl5
10003e94:	72f8f664 		r23, r24, r30
10003e98:	86689816 		r19, r8, r19
10003e9c:	d4a45ccc 		r5, r4, r11
10003ea0:	5d65b692 		r11, r5, r22
10003ea4:	6c704850 	naget	r3, rfsl0
10003ea8:	fdedb9da 		r15, r13, r23
10003eac:	5e154657 		r16, r21, r8
10003eb0:	a78d9d84 	andi	r28, r13, -25212
10003eb4:	90d8ab00 		r6, r24, r21
10003eb8:	8cbcd30a 		r5, r28, r26
10003ebc:	f7e45805 	shi	r31, r4, 22533
10003ec0:	b8b34506 	mbar	5
10003ec4:	d02c1e8f 		r1, r12, r3
10003ec8:	ca3f0f02 		r17, r31, r1
10003ecc:	c1afbd03 		r13, r15, r23
10003ed0:	01138a6b 		r8, r19, r17
10003ed4:	3a911141 	addikc	r20, r17, 4417
10003ed8:	4f67dcea 	teaputd	r27
10003edc:	97f2cfce 		r31, r18, r25
10003ee0:	f0b4e673 	sbi	r5, r20, -6541
10003ee4:	96ac7422 		r21, r12, r14
10003ee8:	e7ad3585 	lhui	r29, r13, 13701
10003eec:	e2f937e8 	lbui	r23, r25, 14312
10003ef0:	1c75df6e 		r3, r21, r27
10003ef4:	47f11a71 	bsra	r31, r17, r3
10003ef8:	1d29c589 		r9, r9, r24
10003efc:	6fb7620e 	ncget	r29, rfsl14
10003f00:	aa18be1b 	xori	r16, r24, -16869
10003f04:	fc563e4b 		r2, r22, r7
10003f08:	c6d27920 		r22, r18, r15
10003f0c:	9adbc0fe 		r22, r27, r24
10003f10:	78cd5af4 		r6, r13, r11
10003f14:	1fdda833 		r30, r29, r21
10003f18:	8807c731 		r0, r7, r24
10003f1c:	b1121059 		r8, r18, r2
10003f20:	2780ec5f 	rsubi	r28, r0, -5025
10003f24:	60517fa9 	muli	r2, r17, 32681
10003f28:	19b54a0d 		r13, r21, r9
10003f2c:	2de57a9f 	rsubic	r15, r5, 31391
10003f30:	93c99cef 		r30, r9, r19
10003f34:	a0e03b4d 	ori	r7, r0, 15181
10003f38:	ae2af5b0 	andni	r17, r10, -2640
10003f3c:	c8ebbb3c 		r7, r11, r23
10003f40:	83539961 		r26, r19, r19
10003f44:	172b047e 		r25, r11, r0
10003f48:	ba77d626 	mbar	19
10003f4c:	e1691463 	lbui	r11, r9, 5219
10003f50:	55210c7d 		r9, r1, r1
10003f54:	0a496e70 		r18, r9, r13
10003f58:	75743a0a 		r11, r20, r7
10003f5c:	
10003fa4 <_global_impure_ptr>:
10003fa4:	10003fd8 		r0, r0, r7
10003fa8:	Address 0x10003fa8 is out of bounds.


Disassembly of section .data:

10003fcc <__data_start>:
10003fcc:	
10003fd0 <__dso_handle>:
10003fd0:	
10003fd4 <_impure_ptr>:
10003fd4:	10003fd8 		r0, r0, r7

10003fd8 <impure_data>:
10003fd8:	
100040c8 <force_to_data>:
100040c8:	
Disassembly of section .ctors:

100040cc <__CTOR_LIST__>:
100040cc:	ffffffff 		r31, r31, r31

100040d0 <__CTOR_END__>:
100040d0:	
Disassembly of section .dtors:

100040d4 <__DTOR_LIST__>:
100040d4:	ffffffff 		r31, r31, r31

100040d8 <__DTOR_END__>:
100040d8:	
Disassembly of section .eh_frame:

100040dc <__EH_FRAME_BEGIN__>:
100040dc:	
Disassembly of section .jcr:

100040e0 <__JCR_END__>:
100040e0:	
Disassembly of section .bss:

100040fc <__bss_start>:
100040fc:	
10004100 <dtor_idx.2340>:
10004100:	
10004104 <object.2350>:
10004104:	
Disassembly of section .heap:

1000411c <_heap-0x4>:
1000411c:	
10004120 <_heap>:
10004120:	
Disassembly of section .stack:

10004220 <_stack_end>:
10004220:	
Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000000a7 		r0, r0, r0
       4:	00020000 	add	r0, r2, r0
       8:	00490101 		r2, r9, r0
       c:	fb0e0d00 	swi	r24, r14, 3328
      10:	01010101 		r8, r1, r0
      14:	00000001 		r0, r0, r0
      18:	0000012f 		r0, r0, r0
      1c:	676e752f 	bslli	r27, r14, 15
      20:	6d625f67 	tneaget	r11, rfsl7
      24:	6e752f2f 	ecaget	r19, rfsl15
      28:	7372632f 		r27, r18, r12
      2c:	6e65776c 	tnecget	r19, rfsl12
      30:	69622f6c 		r11, r2, r5
      34:	6962676c 		r11, r2, r12
      38:	6f73732f 	tncget	r27, rfsl15
      3c:	6d696372 	ncget	r11, rfsl2
      40:	6f626c61 	necaget	r27, rfsl1
      44:	7a650000 		r19, r5, r0
      48:	63727430 	muli	r27, r18, 29744
      4c:	2e530001 	rsubic	r18, r19, 1
      50:	
Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000000b5 		r0, r0, r0
       4:	00020000 	add	r0, r2, r0
       8:	00000401 		r0, r0, r0
       c:	
Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	01110010 		r8, r17, r0
   4:	06550603 	neg	r18, r21
   8:	081b0825 		r0, r27, r1
   c:	08130500 		r0, r19, r0
  10:	00000111 		r0, r0, r0
  14:	00100655 		r0, r16, r0
  18:	0603081b 	neg	r16, r3
  1c:	08250813 		r1, r5, r1
  20:	05000000 	rsub	r8, r0, r0
  24:	01110010 		r8, r17, r0
  28:	06110112 	neg	r16, r17
  2c:	0103081b 		r8, r3, r1
  30:	08250813 		r1, r5, r1
  34:	05000000 	rsub	r8, r0, r0
  38:	01110125 		r8, r17, r0
  3c:	0e130b03 		r16, r19, r1
  40:	0e1b0e11 		r16, r27, r1
  44:	01120110 		r8, r18, r0
  48:	06000002 	neg	r16, r0
  4c:	24000b0b 	rsubi	r0, r0, 2827
  50:	3e0b030e 	rsubikc	r16, r11, 782
  54:	00000316 		r0, r0, r0
  58:	00030e3a 		r0, r3, r1
  5c:	0b3b0b49 		r25, r27, r1
  60:	13000004 		r24, r0, r0
  64:	24000b0b 	rsubi	r0, r0, 2827
  68:	3e0b0308 	rsubikc	r16, r11, 776
  6c:	0000052e 		r0, r0, r0
  70:	013f0c03 		r9, r31, r1
  74:	0e3a0b3b 		r17, r26, r1
  78:	0b270c20 		r25, r7, r1
  7c:	0b011300 		r24, r1, r2
  80:	00063400 		r0, r6, r6
  84:	030e3a0b 		r24, r14, r7
  88:	3b0b4913 	addikc	r24, r11, 18707
  8c:	0000072e 		r0, r0, r0
  90:	01030e3a 		r8, r3, r1
  94:	0b3b0b27 		r25, r27, r1
  98:	0c200b01 		r1, r0, r1
  9c:	13000008 		r24, r0, r0
  a0:	0500030e 	neg	r8, r0
  a4:	3a0b3b0b 	addikc	r16, r11, 15115
  a8:	49130000 	idiv	r8, r19, r0
  ac:	09260049 		r9, r6, r0
  b0:	1300000a 		r24, r0, r0
  b4:	0f000b0b 		r24, r0, r1
  b8:	49130000 	idiv	r8, r19, r0
  bc:	0b2e0003 		r25, r14, r0
  c0:	0e3a0b3b 		r17, r26, r1
  c4:	0b270c20 		r25, r7, r1
  c8:	0b00000c 		r24, r0, r0
  cc:	2e013f0c 	rsubic	r16, r1, 16140
  d0:	030e3a0b 		r24, r14, r7
  d4:	3b0b270c 	addikc	r24, r11, 9996
  d8:	11011201 		r8, r1, r2
  dc:	400a0113 		r0, r10, r0
  e0:	00000d05 		r0, r0, r1
  e4:	0003083a 		r0, r3, r1
  e8:	0b3b0b49 		r25, r27, r1
  ec:	13020a00 		r24, r2, r1
  f0:	000e1d01 		r0, r14, r3
  f4:	31131101 	addik	r8, r19, 4353
  f8:	1201580b 		r16, r1, r11
  fc:	590b0113 		r8, r11, r0
 100:	00000f05 		r0, r0, r1
 104:	00311302 		r1, r17, r2
 108:	0a000010 		r16, r0, r0
 10c:	1d003113 		r8, r0, r6
 110:	11011201 		r8, r1, r2
 114:	580b590b 		r0, r11, r11
 118:	0000111d 		r0, r0, r2
 11c:	01311311 		r9, r17, r2
 120:	01120158 		r8, r18, r0
 124:	0b590b00 		r26, r25, r1
 128:	00120b01 		r0, r18, r1
 12c:	11011201 		r8, r1, r2
 130:	00001334 		r0, r0, r2
 134:	00311302 		r1, r17, r2
 138:	06000014 	neg	r16, r0
 13c:	2e013113 	rsubic	r16, r1, 12563
 140:	11011201 		r8, r1, r2
 144:	400a0113 		r0, r10, r0
 148:	00001501 		r0, r0, r2
 14c:	01491301 		r10, r9, r2
 150:	13000016 		r24, r0, r0
 154:	21004913 	addi	r8, r0, 18707
 158:	2f0b0000 	rsubic	r24, r11, 0
 15c:	00011101 		r0, r1, r2
 160:	250e130b 	rsubi	r8, r14, 4875
 164:	030e1b0e 		r24, r14, r3
 168:	11011201 		r8, r1, r2
 16c:	10060000 	addk	r0, r6, r0
 170:	0224000b 		r17, r4, r0
 174:	0b3e0b03 		r25, r30, r1
 178:	0e000003 		r16, r0, r0
 17c:	1600030e 		r16, r0, r0
 180:	3a0b3b0b 	addikc	r16, r11, 15115
 184:	49130000 	idiv	r8, r19, r0
 188:	0424000b 	neg	r1, r4
 18c:	0b3e0b03 		r25, r30, r1
 190:	08000005 		r0, r0, r0
 194:	2e013f0c 	rsubic	r16, r1, 16140
 198:	030e3a0b 		r24, r14, r7
 19c:	3b0b270c 	addikc	r24, r11, 9996
 1a0:	200b0113 	addi	r0, r11, 275
 1a4:	00000605 		r0, r0, r0
 1a8:	0003083a 		r0, r3, r1
 1ac:	0b3b0b49 		r25, r27, r1
 1b0:	13000007 		r24, r0, r0
 1b4:	0f000b0b 		r24, r0, r1
 1b8:	49130000 	idiv	r8, r19, r0
 1bc:	082e0131 		r1, r14, r0
 1c0:	13110112 		r24, r17, r0
 1c4:	01400601 		r10, r0, r0
 1c8:	13000009 		r24, r0, r0
 1cc:	05003113 	neg	r8, r0
 1d0:	02060000 	add	r16, r6, r0
 1d4:	0a2e013f 		r17, r14, r0
 1d8:	0c030e3a 		r0, r3, r1
 1dc:	0b3b0b27 		r25, r27, r1
 1e0:	0c491311 		r2, r9, r2
 1e4:	01120140 		r8, r18, r0
 1e8:	06011300 	neg	r16, r1
 1ec:	000b0500 		r0, r11, r0
 1f0:	03083a0b 		r24, r8, r7
 1f4:	3b0b4913 	addikc	r24, r11, 18707
 1f8:	02060000 	add	r16, r6, r0
 1fc:	0c050003 		r0, r5, r0
 200:	0e3a0b3b 		r17, r26, r1
 204:	0b491302 		r26, r9, r2
 208:	0600000d 	neg	r16, r0
 20c:	34000308 	rsubik	r0, r0, 776
 210:	3a0b3b0b 	addikc	r16, r11, 15115
 214:	49130206 		r8, r19, r0
 218:	00000e34 		r0, r0, r1
 21c:	00030e3a 		r0, r3, r1
 220:	0b3b0b49 		r25, r27, r1
 224:	13020600 		r24, r2, r0
 228:	000f0b01 		r0, r15, r1
 22c:	11011201 		r8, r1, r2
 230:	01130000 	add	r8, r19, r0
 234:	101d0131 		r0, r29, r0
 238:	13520155 		r26, r18, r0
 23c:	06580b59 	neg	r18, r24
 240:	0b011300 		r24, r1, r2
 244:	00111d01 		r0, r17, r3
 248:	31135201 	addik	r8, r19, 20993
 24c:	5506580b 		r8, r6, r11
 250:	590b0000 	fadd	r8, r11, r0
 254:	12260049 		r17, r6, r0
 258:	13000013 		r24, r0, r0
 25c:	0500030e 	neg	r8, r0
 260:	3a0b3b0b 	addikc	r16, r11, 15115
 264:	4913020a 		r8, r19, r0
 268:	00001434 		r0, r0, r2
 26c:	00030e3a 		r0, r3, r1
 270:	0b3b0b49 		r25, r27, r1
 274:	13020a00 		r24, r2, r1
 278:	00150101 		r0, r21, r0
 27c:	49130113 		r8, r19, r0
 280:	00001621 		r0, r0, r2
 284:	0049132f 		r2, r9, r2
 288:	0b000017 		r24, r0, r0
 28c:	34000308 	rsubik	r0, r0, 776
 290:	3a0b3b0b 	addikc	r16, r11, 15115
 294:	4913020a 		r8, r19, r0
 298:	0000180a 		r0, r0, r3
 29c:	0003083a 		r0, r3, r1
 2a0:	0b3b0b11 		r25, r27, r1
 2a4:	01000019 		r8, r0, r0
 2a8:	0b015506 		r24, r1, r10
 2ac:	00001a18 		r0, r0, r3
 2b0:	0000001b 		r0, r0, r0
 2b4:	3400030e 	rsubik	r0, r0, 782
 2b8:	3a0b3b0b 	addikc	r16, r11, 15115
 2bc:	49130000 	idiv	r8, r19, r0
 2c0:	00011101 		r0, r1, r2
 2c4:	250e130b 	rsubi	r8, r14, 4875
 2c8:	030e1b0e 		r24, r14, r3
 2cc:	11011201 		r8, r1, r2
 2d0:	10060000 	addk	r0, r6, r0
 2d4:	0224000b 		r17, r4, r0
 2d8:	0b3e0b03 		r25, r30, r1
 2dc:	0e000003 		r16, r0, r0
 2e0:	1600030e 		r16, r0, r0
 2e4:	3a0b3b0b 	addikc	r16, r11, 15115
 2e8:	49130000 	idiv	r8, r19, r0
 2ec:	0424000b 	neg	r1, r4
 2f0:	0b3e0b03 		r25, r30, r1
 2f4:	08000005 		r0, r0, r0
 2f8:	2e013f0c 	rsubic	r16, r1, 16140
 2fc:	030e3a0b 		r24, r14, r7
 300:	3b0b270c 	addikc	r24, r11, 9996
 304:	200b0113 	addi	r0, r11, 275
 308:	00000605 		r0, r0, r0
 30c:	0003083a 		r0, r3, r1
 310:	0b3b0b49 		r25, r27, r1
 314:	13000007 		r24, r0, r0
 318:	34000308 	rsubik	r0, r0, 776
 31c:	3a0b3b0b 	addikc	r16, r11, 15115
 320:	49130000 	idiv	r8, r19, r0
 324:	080f000b 		r0, r15, r0
 328:	0b491300 		r26, r9, r2
 32c:	00092e01 		r0, r9, r5
 330:	3f0c030e 	rsubikc	r24, r12, 782
 334:	3a0b3b05 	addikc	r16, r11, 15109
 338:	270c4913 	rsubi	r24, r12, 18707
 33c:	200b0113 	addi	r0, r11, 275
 340:	00000a05 		r0, r0, r1
 344:	0003083a 		r0, r3, r1
 348:	0b3b0549 		r25, r27, r0
 34c:	1300000b 		r24, r0, r0
 350:	26004913 	rsubi	r16, r0, 18707
 354:	00000c05 		r0, r0, r1
 358:	00030e3a 		r0, r3, r1
 35c:	0b3b0b49 		r25, r27, r1
 360:	1300000d 		r24, r0, r0
 364:	01014913 		r8, r1, r9
 368:	01130000 	add	r8, r19, r0
 36c:	0e210049 		r17, r1, r0
 370:	132f0b00 		r25, r15, r1
 374:	000f3400 		r0, r15, r6
 378:	03083a0b 		r24, r8, r7
 37c:	3b054913 	addikc	r24, r5, 18707
 380:	00001034 		r0, r0, r2
 384:	00030e3a 		r0, r3, r1
 388:	0b3b0549 		r25, r27, r0
 38c:	13000011 		r24, r0, r0
 390:	2e013113 	rsubic	r16, r1, 12563
 394:	11011201 		r8, r1, r2
 398:	400a0113 		r0, r10, r0
 39c:	00001205 		r0, r0, r2
 3a0:	00311302 		r1, r17, r2
 3a4:	0a000013 		r16, r0, r0
 3a8:	34003113 	rsubik	r0, r0, 12563
 3ac:	020a0000 	add	r16, r10, r0
 3b0:	142e013f 		r1, r14, r0
 3b4:	0c030e3a 		r0, r3, r1
 3b8:	0b3b0b27 		r25, r27, r1
 3bc:	0c110112 		r0, r17, r0
 3c0:	01400601 		r10, r0, r0
 3c4:	13000015 		r24, r0, r0
 3c8:	05000308 	neg	r8, r0
 3cc:	3a0b3b0b 	addikc	r16, r11, 15115
 3d0:	49130206 		r8, r19, r0
 3d4:	00001605 		r0, r0, r2
 3d8:	0003083a 		r0, r3, r1
 3dc:	0b3b0b49 		r25, r27, r1
 3e0:	13020a00 		r24, r2, r1
 3e4:	00173400 		r0, r23, r6
 3e8:	03083a0b 		r24, r8, r7
 3ec:	3b0b4913 	addikc	r24, r11, 18707
 3f0:	02060000 	add	r16, r6, r0
 3f4:	18340003 		r1, r20, r0
 3f8:	0e3a0b3b 		r17, r26, r1
 3fc:	0b491302 		r26, r9, r2
 400:	06000019 	neg	r16, r0
 404:	1d013113 		r8, r1, r6
 408:	52015506 		r16, r1, r10
 40c:	580b590b 		r0, r11, r11
 410:	00001a2e 		r0, r0, r3
 414:	01311311 		r9, r17, r2
 418:	01120140 		r8, r18, r0
 41c:	06011300 	neg	r16, r1
 420:	001b3400 		r0, r27, r6
 424:	31130206 	addik	r8, r19, 518
 428:	00001c05 		r0, r0, r3
 42c:	00311302 		r1, r17, r2
 430:	0600001d 	neg	r16, r0
 434:	0500030e 	neg	r8, r0
 438:	3a0b3b0b 	addikc	r16, r11, 15115
 43c:	4913020a 		r8, r19, r0
 440:	00001e1d 		r0, r0, r3
 444:	01311352 		r9, r17, r2
 448:	01550658 		r10, r21, r0
 44c:	0b590b01 		r26, r25, r1
 450:	1300001f 		r24, r0, r0
 454:	1d013113 		r8, r1, r6
 458:	52015506 		r16, r1, r10
 45c:	580b5905 		r0, r11, r11
 460:	00002005 		r0, r0, r4
 464:	00030e3a 		r0, r3, r1
 468:	0b3b0b49 		r25, r27, r1
 46c:	13020600 		r24, r2, r0
 470:	00213400 		r1, r1, r6
 474:	030e3a0b 		r24, r14, r7
 478:	3b0b4913 	addikc	r24, r11, 18707
 47c:	020a0000 	add	r16, r10, r0
 480:	22050031 	addi	r16, r5, 49
 484:	13000023 		r24, r0, r0
 488:	0b015506 		r24, r1, r10
 48c:	0000241d 		r0, r0, r4
 490:	01311311 		r9, r17, r2
 494:	01120158 		r8, r18, r0
 498:	0b590b00 		r26, r25, r1
 49c:	00250b01 		r1, r5, r1
 4a0:	11011201 		r8, r1, r2
 4a4:	0000262e 		r0, r0, r4
 4a8:	013f0c03 		r9, r31, r1
 4ac:	0e3a0b3b 		r17, r26, r1
 4b0:	05270c11 	neg	r9, r7
 4b4:	01120140 		r8, r18, r0
 4b8:	06011300 	neg	r16, r1
 4bc:	00270500 		r1, r7, r0
 4c0:	030e3a0b 		r24, r14, r7
 4c4:	3b054913 	addikc	r24, r5, 18707
 4c8:	02060000 	add	r16, r6, r0
 4cc:	28340003 	addic	r1, r20, 3
 4d0:	083a0b3b 		r1, r26, r1
 4d4:	05491302 	neg	r10, r9
 4d8:	06000029 	neg	r16, r0
 4dc:	1d013113 		r8, r1, r6
 4e0:	52015506 		r16, r1, r10
 4e4:	580b5905 		r0, r11, r11
 4e8:	01130000 	add	r8, r19, r0
 4ec:	2a340031 	addic	r17, r20, 49
 4f0:	1300002b 		r24, r0, r0
 4f4:	1d013113 		r8, r1, r6
 4f8:	11011201 		r8, r1, r2
 4fc:	580b5905 		r0, r11, r11
 500:	01130000 	add	r8, r19, r0
 504:	2c340031 	rsubic	r1, r20, 49
 508:	131c0b00 		r24, r28, r1
 50c:	002d1d01 		r1, r13, r3
 510:	31131101 	addik	r8, r19, 4353
 514:	1201580b 		r16, r1, r11
 518:	59050000 	fadd	r8, r5, r0
 51c:	2e340003 	rsubic	r17, r20, 3
 520:	0e3a0b3b 		r17, r26, r1
 524:	0b491300 		r26, r9, r2
 528:	00000111 		r0, r0, r0
 52c:	01250e13 		r9, r5, r1
 530:	0b030e1b 		r24, r3, r1
 534:	0e110152 		r16, r17, r0
 538:	01550610 		r10, r21, r0
 53c:	06000002 	neg	r16, r0
 540:	24000b0b 	rsubi	r0, r0, 2827
 544:	3e0b030e 	rsubikc	r16, r11, 782
 548:	00000316 		r0, r0, r0
 54c:	00030e3a 		r0, r3, r1
 550:	0b3b0b49 		r25, r27, r1
 554:	13000004 		r24, r0, r0
 558:	24000b0b 	rsubi	r0, r0, 2827
 55c:	3e0b0308 	rsubikc	r16, r11, 776
 560:	00000504 		r0, r0, r0
 564:	010b0b3a 		r8, r11, r1
 568:	0b3b0b01 		r25, r27, r1
 56c:	13000006 		r24, r0, r0
 570:	2800030e 	addic	r0, r0, 782
 574:	1c0d0000 	rsubkc	r0, r13, r0
 578:	072e0003 	neg	r25, r14
 57c:	0e3a0b3b 		r17, r26, r1
 580:	0b270c20 		r25, r7, r1
 584:	0b000008 		r24, r0, r0
 588:	2e01030e 	rsubic	r16, r1, 782
 58c:	3a0b3b0b 	addikc	r16, r11, 15115
 590:	270c200b 	rsubi	r24, r12, 8203
 594:	01130000 	add	r8, r19, r0
 598:	09050003 		r8, r5, r0
 59c:	0e3a0b3b 		r17, r26, r1
 5a0:	0b491300 		r26, r9, r2
 5a4:	000a2600 		r0, r10, r4
 5a8:	49130000 	idiv	r8, r19, r0
 5ac:	0b2e0003 		r25, r14, r0
 5b0:	0e3a0b3b 		r17, r26, r1
 5b4:	0b270c49 		r25, r7, r1
 5b8:	13200b00 		r25, r0, r1
 5bc:	000c2e01 		r0, r12, r5
 5c0:	3f0c030e 	rsubikc	r24, r12, 782
 5c4:	3a0b3b0b 	addikc	r16, r11, 15115
 5c8:	270c4913 	rsubi	r24, r12, 18707
 5cc:	11011201 		r8, r1, r2
 5d0:	40060113 		r0, r6, r0
 5d4:	00000d34 		r0, r0, r1
 5d8:	0003083a 		r0, r3, r1
 5dc:	0b3b0b49 		r25, r27, r1
 5e0:	13020600 		r24, r2, r0
 5e4:	000e3400 		r0, r14, r6
 5e8:	030e3a0b 		r24, r14, r7
 5ec:	3b0b4913 	addikc	r24, r11, 18707
 5f0:	020a0000 	add	r16, r10, r0
 5f4:	0f340003 		r25, r20, r0
 5f8:	083a0b3b 		r1, r26, r1
 5fc:	0b491302 		r26, r9, r2
 600:	0a000010 		r16, r0, r0
 604:	3400030e 	rsubik	r0, r0, 782
 608:	3a0b3b0b 	addikc	r16, r11, 15115
 60c:	49130206 		r8, r19, r0
 610:	0000111d 		r0, r0, r2
 614:	00311352 		r1, r17, r2
 618:	01550658 		r10, r21, r0
 61c:	0b590b00 		r26, r25, r1
 620:	00121d01 		r0, r18, r3
 624:	31135201 	addik	r8, r19, 20993
 628:	5506580b 		r8, r6, r11
 62c:	590b0113 		r8, r11, r0
 630:	00001305 		r0, r0, r2
 634:	0031131c 		r1, r17, r2
 638:	0d000014 		r8, r0, r0
 63c:	1d003113 		r8, r0, r6
 640:	11011201 		r8, r1, r2
 644:	580b590b 		r0, r11, r11
 648:	00001501 		r0, r0, r2
 64c:	01491301 		r10, r9, r2
 650:	13000016 		r24, r0, r0
 654:	21004913 	addi	r8, r0, 18707
 658:	2f0b0000 	rsubic	r24, r11, 0
 65c:	17340003 	cmpu	r25, r20, r0
 660:	0e3a0b3b 		r17, r26, r1
 664:	0b491300 		r26, r9, r2
 668:	00000111 		r0, r0, r0
 66c:	00100611 		r0, r16, r0
 670:	01120103 		r8, r18, r0
 674:	081b0825 		r0, r27, r1
 678:	08130500 		r0, r19, r0
 67c:	00000111 		r0, r0, r0
 680:	00100611 		r0, r16, r0
 684:	01120103 		r8, r18, r0
 688:	081b0825 		r0, r27, r1
 68c:	08130500 		r0, r19, r0
 690:	00000111 		r0, r0, r0
 694:	00100611 		r0, r16, r0
 698:	01120103 		r8, r18, r0
 69c:	081b0825 		r0, r27, r1
 6a0:	08130500 		r0, r19, r0
 6a4:	00000111 		r0, r0, r0
 6a8:	00100611 		r0, r16, r0
 6ac:	01120103 		r8, r18, r0
 6b0:	081b0825 		r0, r27, r1
 6b4:	08130500 		r0, r19, r0
 6b8:	00000111 		r0, r0, r0
 6bc:	00100611 		r0, r16, r0
 6c0:	01120103 		r8, r18, r0
 6c4:	081b0825 		r0, r27, r1
 6c8:	08130500 		r0, r19, r0
 6cc:	00000111 		r0, r0, r0
 6d0:	00100655 		r0, r16, r0
 6d4:	0603081b 	neg	r16, r3
 6d8:	08250813 		r1, r5, r1
 6dc:	05000000 	rsub	r8, r0, r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000003c 		r0, r0, r0
   4:	00020000 	add	r0, r2, r0
   8:	00000400 		r0, r0, r0
   c:	
Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	ffffffff 		r31, r31, r31
       4:	
Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 		r0, r0, r0
   4:	ffffffff 		r31, r31, r31
   8:	0100017c 		r8, r0, r0
   c:	0f0c0100 		r24, r12, r0
  10:	0000000c 		r0, r0, r0
  14:	
Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0000001c 		r0, r0, r0
       4:	00000020 		r0, r0, r0
       8:	00057300 		r0, r5, r14
       c:	321a9f00 	addik	r16, r26, -24832
      10:	00002000 	add	r0, r0, r4
      14:	00002c00 		r0, r0, r5
      18:	01530000 	add	r10, r19, r0
      1c:	
Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c6f6e67 	necaget	r3, rfsl7
   4:	206c6f6e 	addi	r3, r12, 28526
   8:	6720696e 	bsrli	r25, r0, 14
   c:	74007561 		r0, r0, r14
  10:	72745f73 		r19, r20, r11
  14:	656e6400 	bslli	r11, r14, 0
  18:	75617274 		r11, r1, r14
  1c:	5f707574 		r27, r16, r14
  20:	00756172 		r3, r21, r12
  24:	745f6765 		r2, r31, r12
  28:	74006c6f 		r0, r0, r13
  2c:	6e67206c 	cget	r19, rfsl12
  30:	6f6e6720 	necget	r27, rfsl0
  34:	756e7369 		r11, r14, r14
  38:	676e6564 	bslli	r27, r14, 4
  3c:	20696e74 	addi	r3, r9, 28276
  40:	00666c6f 		r3, r6, r13
  44:	61740075 	muli	r11, r20, 117
  48:	6172745f 	muli	r11, r18, 29791
  4c:	72656164 		r19, r5, r12
  50:	00435055 		r2, r3, r10
  54:	5f564552 		r26, r22, r8
  58:	00756e73 		r3, r21, r13
  5c:	69676e65 		r11, r7, r13
  60:	64206368 	bsrai	r1, r0, 8
  64:	61720064 	muli	r11, r18, 100
  68:	61746100 	muli	r11, r20, 24832
  6c:	75617274 		r11, r1, r14
  70:	5f776169 		r27, r23, r12
  74:	745f7478 		r2, r31, r14
  78:	5f646f6e 		r27, r4, r13
  7c:	6500646f 	bslli	r8, r0, 15
  80:	75626c65 		r11, r2, r13
  84:	00756172 		r3, r21, r12
  88:	745f7772 		r2, r31, r14
  8c:	69746500 		r11, r20, r12
  90:	75617274 		r11, r1, r14
  94:	5f776169 		r27, r23, r12
  98:	745f7278 		r2, r31, r14
  9c:	5f726561 		r27, r18, r12
  a0:	64790073 	bsrli	r3, r25, 19
  a4:	686f7274 		r3, r15, r14
  a8:	20756e73 	addi	r3, r21, 28275
  ac:	69676e65 		r11, r7, r13
  b0:	6420696e 	bsrli	r1, r0, 14
  b4:	74007362 		r0, r0, r14
  b8:	5f75696e 		r27, r21, r13
  bc:	74385f74 		r1, r24, r11
  c0:	00435055 		r2, r3, r10
  c4:	5f434849 		r26, r3, r9
  c8:	5000474e 		r0, r0, r8
  cc:	55204320 		r9, r0, r8
  d0:	342e362e 	rsubik	r1, r14, 13870
  d4:	32203230 	addik	r17, r0, 12848
  d8:	31313130 	addik	r9, r17, 12592
  dc:	31382028 	addik	r9, r24, 8232
  e0:	58696c69 		r3, r9, r13
  e4:	6e782031 	cget	r19, rfsl1
  e8:	342e3120 	rsubik	r1, r14, 12576
  ec:	4275696c 		r19, r21, r13
  f0:	64204544 	bslli	r1, r0, 4
  f4:	4b5f502e 		r26, r31, r10
  f8:	31352032 	addik	r9, r21, 8242
  fc:	32204d61 	addik	r17, r0, 19809
 100:	72203230 		r17, r0, r6
 104:	31322900 	addik	r9, r18, 10496
 108:	73625f75 		r27, r2, r11
 10c:	696e7433 		r11, r14, r14
 110:	325f7400 	addik	r18, r31, 29696
 114:	73686f72 		r27, r8, r13
 118:	7420696e 		r1, r0, r13
 11c:	74002e2e 		r0, r0, r5
 120:	2f2e2e2f 	rsubic	r25, r14, 11823
 124:	6c69622f 	ncget	r3, rfsl15
 128:	73656372 		r27, r5, r12
 12c:	6574626c 	bsrai	r11, r20, 12
 130:	617a652f 	muli	r11, r26, 25903
 134:	73625f75 		r27, r2, r11
 138:	6172742e 	muli	r11, r18, 29742
 13c:	6300666c 	muli	r24, r0, 26220
 140:	6167002f 	muli	r11, r7, 47
 144:	686f6d65 		r3, r15, r13
 148:	2f6c7563 	rsubic	r27, r12, 30051
 14c:	6b797469 		r27, r25, r14
 150:	6765722f 	bsrai	r27, r5, 15
 154:	4465736b 	bsra	r3, r5, r14
 158:	746f702f 		r3, r15, r14
 15c:	73656372 		r27, r5, r12
 160:	6574626c 	bsrai	r11, r20, 12
 164:	617a655f 	muli	r11, r26, 25951
 168:	7374645f 		r27, r20, r12
 16c:	315f3638 	addik	r10, r31, 13880
 170:	2f73772f 	rsubic	r27, r19, 30511
 174:	61707073 	muli	r11, r16, 28787
 178:	2f616573 	rsubic	r27, r1, 25971
 17c:	00737472 		r3, r19, r14
 180:	696e6700 		r11, r14, r12
 184:	7072696e 		r3, r18, r13
 188:	74690070 		r3, r9, r0
 18c:	61646368 	muli	r11, r4, 25448
 190:	61720065 	muli	r11, r18, 101
 194:	5f707269 		r27, r16, r14
 198:	6e746600 	necget	r19, rfsl0
 19c:	666f726d 	bsrai	r19, r15, 13
 1a0:	61740070 	muli	r11, r20, 112
 1a4:	72696e74 		r19, r9, r13
 1a8:	5f627566 		r27, r2, r14
 1ac:	00655f73 		r3, r5, r11
 1b0:	7072696e 		r3, r18, r13
 1b4:	74660070 		r3, r6, r0
 1b8:	72696e74 		r19, r9, r13
 1bc:	00776964 		r3, r23, r13
 1c0:	7468006c 		r3, r8, r0
 1c4:	65746261 	bsrai	r11, r20, 1
 1c8:	73650070 		r27, r5, r0
 1cc:	72696e74 		r19, r9, r13
 1d0:	73006f75 		r24, r0, r13
 1d4:	74627974 		r3, r2, r15
 1d8:	65002e2e 		r8, r0, r5
 1dc:	2f2e2e2f 	rsubic	r25, r14, 11823
 1e0:	6c69622f 	ncget	r3, rfsl15
 1e4:	655f6c69 	bslli	r10, r31, 9
 1e8:	622f655f 	muli	r17, r15, 25951
 1ec:	7072696e 		r3, r18, r13
 1f0:	74662e63 		r3, r6, r5
 1f4:	00766172 		r3, r22, r12
 1f8:	67006275 	bsrai	r24, r0, 21
 1fc:	66310062 	bsrli	r17, r17, 2
 200:	75663200 		r11, r6, r6
 204:	62756630 	muli	r19, r21, 26160
 208:	00737461 		r3, r19, r14
 20c:	74650064 		r3, r5, r0
 210:	61745f6f 	muli	r11, r20, 24431
 214:	00627566 		r3, r2, r14
 218:	33004164 	addik	r24, r0, 16740
 21c:	64526f75 		r2, r18, r13
 220:	6e644b65 	naget	r19, rfsl5
 224:	79004b65 		r8, r0, r9
 228:	79457870 		r10, r5, r15
 22c:	616e7369 	muli	r11, r14, 29545
 230:	6f6e0064 	get	r27, rfsl4
 234:	61745f69 	muli	r11, r20, 24425
 238:	00496e76 		r2, r9, r13
 23c:	53686966 		r27, r8, r13
 240:	74526f77 		r2, r18, r13
 244:	73004d75 		r24, r0, r9
 248:	6c744746 	neget	r3, rfsl6
 24c:	00615f62 		r3, r1, r11
 250:	75660049 		r11, r6, r0
 254:	6e765362 	tnget	r19, rfsl2
 258:	6f78004d 	get	r27, rfsl13
 25c:	756c7432 		r11, r12, r14
 260:	47460053 	bsrl	r26, r6, r0
 264:	7562576f 		r11, r2, r10
 268:	72640074 		r19, r4, r0
 26c:	656d7000 	bsrli	r11, r13, 0
 270:	625f6275 	muli	r18, r31, 25205
 274:	6600726f 	bsrai	r16, r0, 15
 278:	756e6400 		r11, r14, r12
 27c:	496e7643 		r11, r14, r14
 280:	69706865 		r11, r16, r13
 284:	72004d75 		r16, r0, r9
 288:	6c743347 	tcget	r3, rfsl7
 28c:	46005263 	bsra	r16, r0, r10
 290:	6f6e0073 	get	r27, rfsl3
 294:	69676e5f 		r11, r7, r13
 298:	6100496e 	muli	r8, r0, 18798
 29c:	764d6978 		r18, r13, r13
 2a0:	436f6c75 		r27, r15, r13
 2a4:	6d6e7300 	tncget	r11, rfsl0
 2a8:	526f7457 		r19, r15, r14
 2ac:	6f726400 	necget	r27, rfsl0
 2b0:	6165732e 	muli	r11, r5, 29486
 2b4:	6300496e 	muli	r24, r0, 18798
 2b8:	76537562 		r18, r19, r14
 2bc:	42797465 		r19, r25, r14
 2c0:	73007362 		r24, r0, r14
 2c4:	5f696e74 		r27, r9, r13
 2c8:	33325f74 	addik	r25, r18, 24436
 2cc:	0073625f 		r3, r19, r12
 2d0:	74727565 		r3, r18, r14
 2d4:	0074696d 		r3, r20, r13
 2d8:	65725f31 		r11, r18, r11
 2dc:	5f726573 		r27, r18, r12
 2e0:	65740065 	bsrli	r11, r20, 5
 2e4:	6e645f74 	tneaget	r19, rfsl4
 2e8:	696d6500 		r11, r13, r12
 2ec:	73625f62 		r27, r2, r11
 2f0:	6f6f6c5f 	necaget	r27, rfsl15
 2f4:	74007468 		r0, r0, r14
 2f8:	72657368 		r19, r5, r14
 2fc:	6f6c6400 	necget	r27, rfsl0
 300:	74696d65 		r3, r9, r13
 304:	725f315f 		r18, r31, r6
 308:	67657476 	bslli	r27, r5, 22
 30c:	616c0072 	muli	r11, r12, 114
 310:	785f7561 		r2, r31, r14
 314:	72745f62 		r19, r20, r11
 318:	75666665 		r11, r6, r12
 31c:	72006461 		r16, r0, r12
 320:	74613200 		r3, r1, r6
 324:	63697068 	muli	r27, r9, 28776
 328:	65720074 	bsrli	r11, r18, 20
 32c:	696d6572 		r11, r13, r12
 330:	5f315f69 		r25, r17, r11
 334:	6e697400 	tnecget	r19, rfsl0
 338:	6d61696e 	ncaget	r11, rfsl14
 33c:	00746573 		r3, r20, r12
 340:	74007469 		r0, r0, r14
 344:	6d65725f 	tncget	r11, rfsl15
 348:	315f656e 	addik	r10, r31, 25966
 34c:	61626c65 	muli	r11, r2, 27749
 350:	0074696d 		r3, r20, r13
 354:	65725f31 		r11, r18, r11
 358:	5f646973 		r27, r4, r13
 35c:	61626c65 	muli	r11, r2, 27749
 360:	006d6169 		r3, r13, r12
 364:	6e2e6300 	ncget	r17, rfsl0
 368:	73625f66 		r27, r2, r11
 36c:	616c7365 	muli	r11, r12, 29541
 370:	Address 0x00000370 is out of bounds.

